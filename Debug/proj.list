
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000266c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080027f8  080027f8  000037f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002838  08002838  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002838  08002838  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002838  08002838  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002838  08002838  00003838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800283c  0800283c  0000383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002840  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800284c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800284c  0000402c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4c7  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa9  00000000  00000000  0000e503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0000ffb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c7  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000019a8  00000000  00000000  000113ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3fa  00000000  00000000  00012d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc3be  00000000  00000000  0001f191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb54f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  000eb594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ee424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080027e0 	.word	0x080027e0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080027e0 	.word	0x080027e0

080001cc <opSystemClock_Config>:
#include "intern_sysclock.h"
#include "stm32l4xx_hal_rcc.h"
void sysclock_lib_error_handler(void);
// c source file for the source clock
void opSystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b096      	sub	sp, #88	@ 0x58
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	2244      	movs	r2, #68	@ 0x44
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fad4 	bl	8002788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	463b      	mov	r3, r7
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80001ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80001f2:	f000 fceb 	bl	8000bcc <HAL_PWREx_ControlVoltageScaling>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <opSystemClock_Config+0x34>
  {
    sysclock_lib_error_handler();
 80001fc:	f000 f82c 	bl	8000258 <sysclock_lib_error_handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000200:	2310      	movs	r3, #16
 8000202:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800020c:	2390      	movs	r3, #144	@ 0x90
 800020e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000210:	2300      	movs	r3, #0
 8000212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fd2d 	bl	8000c78 <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <opSystemClock_Config+0x5c>
  {
    sysclock_lib_error_handler();
 8000224:	f000 f818 	bl	8000258 <sysclock_lib_error_handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023c:	463b      	mov	r3, r7
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f001 f92d 	bl	80014a0 <HAL_RCC_ClockConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <opSystemClock_Config+0x84>
  {
    sysclock_lib_error_handler();
 800024c:	f000 f804 	bl	8000258 <sysclock_lib_error_handler>
  }
}
 8000250:	bf00      	nop
 8000252:	3758      	adds	r7, #88	@ 0x58
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <sysclock_lib_error_handler>:
void sysclock_lib_error_handler(void) {
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800025c:	b672      	cpsid	i
}
 800025e:	bf00      	nop
  /* USER CODE BEGIN sysclock_lib_error_handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <sysclock_lib_error_handler+0x8>

08000264 <reg_tim2dma_initdma_external>:
// source code for tim2 DMA
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_rcc.h"
#include "intern_tim2dma.h"

void reg_tim2dma_initdma_external(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    TIM2->CR2 |= (1 << TIM_CR2_CCDS_Pos);
 8000268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000272:	f043 0308 	orr.w	r3, r3, #8
 8000276:	6053      	str	r3, [r2, #4]
    TIM2->DIER |= (1 << TIM_DIER_UDE_Pos);
 8000278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000286:	60d3      	str	r3, [r2, #12]
    //DMA->CCR &= ~(0x02 << DMA_CCR_PSIZE_Pos);
    //DMA->CCR |= (0x01 << DMA_CCR_DIR_Pos);
    //DMA->
    //DMA->CCR |= (0x01 << DMA_CCR_EN_Pos);

}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 f9b6 	bl	8000606 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  opSystemClock_Config();
 800029a:	f7ff ff97 	bl	80001cc <opSystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  reg_64ledmatrix_init_external();
 800029e:	f000 f802 	bl	80002a6 <reg_64ledmatrix_init_external>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a2:	bf00      	nop
 80002a4:	e7fd      	b.n	80002a2 <main+0x10>

080002a6 <reg_64ledmatrix_init_external>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void ledmatrix64_lib_error_handler(void);


void reg_64ledmatrix_init_external(void) {
 80002a6:	b580      	push	{r7, lr}
 80002a8:	af00      	add	r7, sp, #0


    // GPIO config - each instruction does both clear and set the pins
    reg_64ledmatrix_initgpio_internal();
 80002aa:	f000 f807 	bl	80002bc <reg_64ledmatrix_initgpio_internal>

    reg_64ledmatrix_inittim2_internal();
 80002ae:	f000 f849 	bl	8000344 <reg_64ledmatrix_inittim2_internal>

    reg_tim2dma_initdma_external();
 80002b2:	f7ff ffd7 	bl	8000264 <reg_tim2dma_initdma_external>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <reg_64ledmatrix_initgpio_internal>:


void reg_64ledmatrix_initgpio_internal(void) {
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000340 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000340 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
    GPIOA->MODER = ((GPIOA->MODER & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 80002da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f023 0303 	bic.w	r3, r3, #3
 80002e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_MODER)) |
 80002e8:	f043 0302 	orr.w	r3, r3, #2
    GPIOA->MODER = ((GPIOA->MODER & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 80002ec:	6013      	str	r3, [r2, #0]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_MODER_DIN));

    GPIOA->OSPEEDR = ((GPIOA->OSPEEDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 80002ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	f023 0303 	bic.w	r3, r3, #3
 80002f8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_OSPEEDR)) |
 80002fc:	f043 0302 	orr.w	r3, r3, #2
    GPIOA->OSPEEDR = ((GPIOA->OSPEEDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000300:	6093      	str	r3, [r2, #8]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_OSPEEDR_DIN));

    GPIOA->PUPDR = ((GPIOA->PUPDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000302:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_PUPDR)) |
 800030c:	f023 0303 	bic.w	r3, r3, #3
    GPIOA->PUPDR = ((GPIOA->PUPDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000310:	60d3      	str	r3, [r2, #12]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_PUPDR_DIN));

    GPIOA->OTYPER = ((GPIOA->OTYPER & ~PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK,
 8000312:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_OTYPER)) |
 800031c:	f023 0301 	bic.w	r3, r3, #1
    GPIOA->OTYPER = ((GPIOA->OTYPER & ~PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK,
 8000320:	6053      	str	r3, [r2, #4]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_OTYPER_DIN));

    GPIOA -> AFR[0] |= (1 << 0*4);
 8000322:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6213      	str	r3, [r2, #32]

}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <reg_64ledmatrix_inittim2_internal>:

void reg_64ledmatrix_inittim2_internal(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b0a2      	sub	sp, #136	@ 0x88
 8000348:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000364:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	615a      	str	r2, [r3, #20]
 8000376:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef tim2Struct;
    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    tim2Struct.Instance = TIM2;
 8000378:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800037c:	607b      	str	r3, [r7, #4]
    tim2Struct.Init.Prescaler = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
    tim2Struct.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
    tim2Struct.Init.Period = 21;
 8000386:	2315      	movs	r3, #21
 8000388:	613b      	str	r3, [r7, #16]
    tim2Struct.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
    tim2Struct.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800038e:	2380      	movs	r3, #128	@ 0x80
 8000390:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_Base_Init(&tim2Struct) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fa6f 	bl	8001878 <HAL_TIM_Base_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <reg_64ledmatrix_inittim2_internal+0x60>
    {
      ledmatrix64_lib_error_handler();
 80003a0:	f000 f849 	bl	8000436 <ledmatrix64_lib_error_handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_TIM_ConfigClockSource(&tim2Struct, &sClockSourceConfig) != HAL_OK)
 80003aa:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4611      	mov	r1, r2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fd0a 	bl	8001dcc <HAL_TIM_ConfigClockSource>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <reg_64ledmatrix_inittim2_internal+0x7e>
    {
      ledmatrix64_lib_error_handler();
 80003be:	f000 f83a 	bl	8000436 <ledmatrix64_lib_error_handler>
    }
    if (HAL_TIM_PWM_Init(&tim2Struct) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 faae 	bl	8001926 <HAL_TIM_PWM_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <reg_64ledmatrix_inittim2_internal+0x90>
    {
      ledmatrix64_lib_error_handler();
 80003d0:	f000 f831 	bl	8000436 <ledmatrix64_lib_error_handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d4:	2300      	movs	r3, #0
 80003d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d8:	2300      	movs	r3, #0
 80003da:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_TIMEx_MasterConfigSynchronization(&tim2Struct, &sMasterConfig) != HAL_OK)
 80003dc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4611      	mov	r1, r2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 f969 	bl	80026bc <HAL_TIMEx_MasterConfigSynchronization>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <reg_64ledmatrix_inittim2_internal+0xb0>
    {
      ledmatrix64_lib_error_handler();
 80003f0:	f000 f821 	bl	8000436 <ledmatrix64_lib_error_handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f4:	2360      	movs	r3, #96	@ 0x60
 80003f6:	653b      	str	r3, [r7, #80]	@ 0x50
    sConfigOC.Pulse = 14;
 80003f8:	230e      	movs	r3, #14
 80003fa:	657b      	str	r3, [r7, #84]	@ 0x54
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003fc:	2300      	movs	r3, #0
 80003fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_TIM_PWM_ConfigChannel(&tim2Struct, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000404:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f001 fbc9 	bl	8001ba4 <HAL_TIM_PWM_ConfigChannel>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <reg_64ledmatrix_inittim2_internal+0xd8>
    {
      ledmatrix64_lib_error_handler();
 8000418:	f000 f80d 	bl	8000436 <ledmatrix64_lib_error_handler>
    }
    HAL_TIM_MspPostInit(&tim2Struct);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f852 	bl	80004c8 <HAL_TIM_MspPostInit>
    /* USER CODE BEGIN TIM2_Init 2 */
    HAL_TIM_PWM_Start(&tim2Struct, TIM_CHANNEL_1);
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2100      	movs	r1, #0
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fadd 	bl	80019e8 <HAL_TIM_PWM_Start>
    /* USER CODE END TIM2_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	3788      	adds	r7, #136	@ 0x88
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <ledmatrix64_lib_error_handler>:

void ledmatrix64_lib_error_handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800043a:	b672      	cpsid	i
}
 800043c:	bf00      	nop
    /* USER CODE BEGIN ledmatrix64_lib_error_handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800043e:	bf00      	nop
 8000440:	e7fd      	b.n	800043e <ledmatrix64_lib_error_handler+0x8>
	...

08000444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_MspInit+0x44>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6613      	str	r3, [r2, #96]	@ 0x60
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000466:	4a08      	ldr	r2, [pc, #32]	@ (8000488 <HAL_MspInit+0x44>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800046c:	6593      	str	r3, [r2, #88]	@ 0x58
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800049c:	d10b      	bne.n	80004b6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <HAL_TIM_Base_MspInit+0x38>)
 80004a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a2:	4a08      	ldr	r2, [pc, #32]	@ (80004c4 <HAL_TIM_Base_MspInit+0x38>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004aa:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HAL_TIM_Base_MspInit+0x38>)
 80004ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004e8:	d11c      	bne.n	8000524 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <HAL_TIM_MspPostInit+0x64>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ee:	4a0f      	ldr	r2, [pc, #60]	@ (800052c <HAL_TIM_MspPostInit+0x64>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <HAL_TIM_MspPostInit+0x64>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000502:	2301      	movs	r3, #1
 8000504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000512:	2301      	movs	r3, #1
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000520:	f000 f9cc 	bl	80008bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <NMI_Handler+0x4>

08000538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <MemManage_Handler+0x4>

08000548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <UsageFault_Handler+0x4>

08000558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000586:	f000 f893 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <SystemInit+0x20>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800059a:	4a05      	ldr	r2, [pc, #20]	@ (80005b0 <SystemInit+0x20>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b8:	f7ff ffea 	bl	8000590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490d      	ldr	r1, [pc, #52]	@ (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0a      	ldr	r2, [pc, #40]	@ (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e2:	f002 f8d9 	bl	8002798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fe54 	bl	8000292 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ec:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f8:	08002840 	.word	0x08002840
  ldr r2, =_sbss
 80005fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000600:	2000002c 	.word	0x2000002c

08000604 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_IRQHandler>

08000606 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f91f 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000616:	200f      	movs	r0, #15
 8000618:	f000 f80e 	bl	8000638 <HAL_InitTick>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e001      	b.n	800062c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000628:	f7ff ff0c 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800062c:	79fb      	ldrb	r3, [r7, #7]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <HAL_InitTick+0x6c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d023      	beq.n	8000694 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800064c:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <HAL_InitTick+0x70>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_InitTick+0x6c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065a:	fbb3 f3f1 	udiv	r3, r3, r1
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f91d 	bl	80008a2 <HAL_SYSTICK_Config>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10f      	bne.n	800068e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d809      	bhi.n	8000688 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800067c:	f000 f8f5 	bl	800086a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000680:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <HAL_InitTick+0x74>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	e007      	b.n	8000698 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	e004      	b.n	8000698 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e001      	b.n	8000698 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000004 	.word	0x20000004

080006b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_IncTick+0x20>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <HAL_IncTick+0x24>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <HAL_IncTick+0x24>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000028 	.word	0x20000028

080006d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <HAL_GetTick+0x14>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028

080006f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800071c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <__NVIC_GetPriorityGrouping+0x18>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 0307 	and.w	r3, r3, #7
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	db0a      	blt.n	800077e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	490c      	ldr	r1, [pc, #48]	@ (80007a0 <__NVIC_SetPriority+0x4c>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	0112      	lsls	r2, r2, #4
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	440b      	add	r3, r1
 8000778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800077c:	e00a      	b.n	8000794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4908      	ldr	r1, [pc, #32]	@ (80007a4 <__NVIC_SetPriority+0x50>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	3b04      	subs	r3, #4
 800078c:	0112      	lsls	r2, r2, #4
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	440b      	add	r3, r1
 8000792:	761a      	strb	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	@ 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f1c3 0307 	rsb	r3, r3, #7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	bf28      	it	cs
 80007c6:	2304      	movcs	r3, #4
 80007c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3304      	adds	r3, #4
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d902      	bls.n	80007d8 <NVIC_EncodePriority+0x30>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3b03      	subs	r3, #3
 80007d6:	e000      	b.n	80007da <NVIC_EncodePriority+0x32>
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43da      	mvns	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	401a      	ands	r2, r3
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43d9      	mvns	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4313      	orrs	r3, r2
         );
}
 8000802:	4618      	mov	r0, r3
 8000804:	3724      	adds	r7, #36	@ 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000834:	f7ff ff8e 	bl	8000754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff47 	bl	80006f0 <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff5c 	bl	8000738 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff8e 	bl	80007a8 <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5d 	bl	8000754 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffb0 	bl	8000810 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ca:	e154      	b.n	8000b76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 8146 	beq.w	8000b70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d005      	beq.n	80008fc <HAL_GPIO_Init+0x40>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d130      	bne.n	800095e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68da      	ldr	r2, [r3, #12]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000932:	2201      	movs	r2, #1
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	091b      	lsrs	r3, r3, #4
 8000948:	f003 0201 	and.w	r2, r3, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	2b03      	cmp	r3, #3
 8000968:	d017      	beq.n	800099a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d123      	bne.n	80009ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	08da      	lsrs	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3208      	adds	r2, #8
 80009ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	691a      	ldr	r2, [r3, #16]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	08da      	lsrs	r2, r3, #3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3208      	adds	r2, #8
 80009e8:	6939      	ldr	r1, [r7, #16]
 80009ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0203 	and.w	r2, r3, #3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 80a0 	beq.w	8000b70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a30:	4b58      	ldr	r3, [pc, #352]	@ (8000b94 <HAL_GPIO_Init+0x2d8>)
 8000a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a34:	4a57      	ldr	r2, [pc, #348]	@ (8000b94 <HAL_GPIO_Init+0x2d8>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a3c:	4b55      	ldr	r3, [pc, #340]	@ (8000b94 <HAL_GPIO_Init+0x2d8>)
 8000a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a48:	4a53      	ldr	r2, [pc, #332]	@ (8000b98 <HAL_GPIO_Init+0x2dc>)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a72:	d019      	beq.n	8000aa8 <HAL_GPIO_Init+0x1ec>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a49      	ldr	r2, [pc, #292]	@ (8000b9c <HAL_GPIO_Init+0x2e0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d013      	beq.n	8000aa4 <HAL_GPIO_Init+0x1e8>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a48      	ldr	r2, [pc, #288]	@ (8000ba0 <HAL_GPIO_Init+0x2e4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d00d      	beq.n	8000aa0 <HAL_GPIO_Init+0x1e4>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a47      	ldr	r2, [pc, #284]	@ (8000ba4 <HAL_GPIO_Init+0x2e8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d007      	beq.n	8000a9c <HAL_GPIO_Init+0x1e0>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a46      	ldr	r2, [pc, #280]	@ (8000ba8 <HAL_GPIO_Init+0x2ec>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d101      	bne.n	8000a98 <HAL_GPIO_Init+0x1dc>
 8000a94:	2304      	movs	r3, #4
 8000a96:	e008      	b.n	8000aaa <HAL_GPIO_Init+0x1ee>
 8000a98:	2307      	movs	r3, #7
 8000a9a:	e006      	b.n	8000aaa <HAL_GPIO_Init+0x1ee>
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e004      	b.n	8000aaa <HAL_GPIO_Init+0x1ee>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x1ee>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <HAL_GPIO_Init+0x1ee>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	f002 0203 	and.w	r2, r2, #3
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	4093      	lsls	r3, r2
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aba:	4937      	ldr	r1, [pc, #220]	@ (8000b98 <HAL_GPIO_Init+0x2dc>)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aec:	4a2f      	ldr	r2, [pc, #188]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b16:	4a25      	ldr	r2, [pc, #148]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b40:	4a1a      	ldr	r2, [pc, #104]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b6a:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <HAL_GPIO_Init+0x2f0>)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f47f aea3 	bne.w	80008cc <HAL_GPIO_Init+0x10>
  }
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	48000400 	.word	0x48000400
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	48000c00 	.word	0x48000c00
 8000ba8:	48001000 	.word	0x48001000
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40007000 	.word	0x40007000

08000bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bda:	d130      	bne.n	8000c3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bdc:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000be8:	d038      	beq.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2232      	movs	r2, #50	@ 0x32
 8000c00:	fb02 f303 	mul.w	r3, r2, r3
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c06:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0a:	0c9b      	lsrs	r3, r3, #18
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c10:	e002      	b.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c24:	d102      	bne.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1f2      	bne.n	8000c12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c38:	d110      	bne.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e00f      	b.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c4a:	d007      	beq.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c54:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40007000 	.word	0x40007000
 8000c70:	20000000 	.word	0x20000000
 8000c74:	431bde83 	.word	0x431bde83

08000c78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f000 bc02 	b.w	8001490 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c8c:	4b96      	ldr	r3, [pc, #600]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c96:	4b94      	ldr	r3, [pc, #592]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 80e4 	beq.w	8000e76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d007      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x4c>
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2b0c      	cmp	r3, #12
 8000cb8:	f040 808b 	bne.w	8000dd2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	f040 8087 	bne.w	8000dd2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cc4:	4b88      	ldr	r3, [pc, #544]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <HAL_RCC_OscConfig+0x64>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e3d9      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1a      	ldr	r2, [r3, #32]
 8000ce0:	4b81      	ldr	r3, [pc, #516]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x7e>
 8000cec:	4b7e      	ldr	r3, [pc, #504]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cf4:	e005      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
 8000cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d223      	bcs.n	8000d4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fd54 	bl	80017b8 <RCC_SetFlashLatencyFromMSIRange>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e3ba      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d1a:	4b73      	ldr	r3, [pc, #460]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a72      	ldr	r2, [pc, #456]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	4b70      	ldr	r3, [pc, #448]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	496d      	ldr	r1, [pc, #436]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d38:	4b6b      	ldr	r3, [pc, #428]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	4968      	ldr	r1, [pc, #416]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
 8000d4c:	e025      	b.n	8000d9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d4e:	4b66      	ldr	r3, [pc, #408]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a65      	ldr	r2, [pc, #404]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b63      	ldr	r3, [pc, #396]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4960      	ldr	r1, [pc, #384]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	495b      	ldr	r1, [pc, #364]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fd14 	bl	80017b8 <RCC_SetFlashLatencyFromMSIRange>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e37a      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d9a:	f000 fc81 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	4b51      	ldr	r3, [pc, #324]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	4950      	ldr	r1, [pc, #320]	@ (8000eec <HAL_RCC_OscConfig+0x274>)
 8000dac:	5ccb      	ldrb	r3, [r1, r3]
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	fa22 f303 	lsr.w	r3, r2, r3
 8000db6:	4a4e      	ldr	r2, [pc, #312]	@ (8000ef0 <HAL_RCC_OscConfig+0x278>)
 8000db8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dba:	4b4e      	ldr	r3, [pc, #312]	@ (8000ef4 <HAL_RCC_OscConfig+0x27c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fc3a 	bl	8000638 <HAL_InitTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d052      	beq.n	8000e74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	e35e      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d032      	beq.n	8000e40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dda:	4b43      	ldr	r3, [pc, #268]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a42      	ldr	r2, [pc, #264]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000de6:	f7ff fc77 	bl	80006d8 <HAL_GetTick>
 8000dea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dee:	f7ff fc73 	bl	80006d8 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e347      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e00:	4b39      	ldr	r3, [pc, #228]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f0      	beq.n	8000dee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a35      	ldr	r2, [pc, #212]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4930      	ldr	r1, [pc, #192]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	492b      	ldr	r1, [pc, #172]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
 8000e3e:	e01a      	b.n	8000e76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fc44 	bl	80006d8 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc40 	bl	80006d8 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e314      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1dc>
 8000e72:	e000      	b.n	8000e76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d073      	beq.n	8000f6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d005      	beq.n	8000e94 <HAL_RCC_OscConfig+0x21c>
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2b0c      	cmp	r3, #12
 8000e8c:	d10e      	bne.n	8000eac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d10b      	bne.n	8000eac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d063      	beq.n	8000f68 <HAL_RCC_OscConfig+0x2f0>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d15f      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e2f1      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eb4:	d106      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e025      	b.n	8000f10 <HAL_RCC_OscConfig+0x298>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ecc:	d114      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x280>
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a02      	ldr	r2, [pc, #8]	@ (8000ee8 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e013      	b.n	8000f10 <HAL_RCC_OscConfig+0x298>
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	080027f8 	.word	0x080027f8
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000004 	.word	0x20000004
 8000ef8:	4ba0      	ldr	r3, [pc, #640]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a9f      	ldr	r2, [pc, #636]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b9d      	ldr	r3, [pc, #628]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a9c      	ldr	r2, [pc, #624]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fbde 	bl	80006d8 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fbda 	bl	80006d8 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	@ 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e2ae      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f32:	4b92      	ldr	r3, [pc, #584]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0x2a8>
 8000f3e:	e014      	b.n	8000f6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	f7ff fbca 	bl	80006d8 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fbc6 	bl	80006d8 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	@ 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e29a      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5a:	4b88      	ldr	r3, [pc, #544]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2d0>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d060      	beq.n	8001038 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_OscConfig+0x310>
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b0c      	cmp	r3, #12
 8000f80:	d119      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d116      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f88:	4b7c      	ldr	r3, [pc, #496]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x328>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e277      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4b76      	ldr	r3, [pc, #472]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	061b      	lsls	r3, r3, #24
 8000fae:	4973      	ldr	r1, [pc, #460]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb4:	e040      	b.n	8001038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d023      	beq.n	8001006 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a6e      	ldr	r2, [pc, #440]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fca:	f7ff fb85 	bl	80006d8 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fb81 	bl	80006d8 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e255      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe4:	4b65      	ldr	r3, [pc, #404]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	4b62      	ldr	r3, [pc, #392]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	061b      	lsls	r3, r3, #24
 8000ffe:	495f      	ldr	r1, [pc, #380]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
 8001004:	e018      	b.n	8001038 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001006:	4b5d      	ldr	r3, [pc, #372]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a5c      	ldr	r2, [pc, #368]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 800100c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001012:	f7ff fb61 	bl	80006d8 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fb5d 	bl	80006d8 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e231      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800102c:	4b53      	ldr	r3, [pc, #332]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d03c      	beq.n	80010be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01c      	beq.n	8001086 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104c:	4b4b      	ldr	r3, [pc, #300]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 800104e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001052:	4a4a      	ldr	r2, [pc, #296]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105c:	f7ff fb3c 	bl	80006d8 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fb38 	bl	80006d8 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e20c      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001076:	4b41      	ldr	r3, [pc, #260]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0ef      	beq.n	8001064 <HAL_RCC_OscConfig+0x3ec>
 8001084:	e01b      	b.n	80010be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001086:	4b3d      	ldr	r3, [pc, #244]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800108c:	4a3b      	ldr	r2, [pc, #236]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001096:	f7ff fb1f 	bl	80006d8 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109e:	f7ff fb1b 	bl	80006d8 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e1ef      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b0:	4b32      	ldr	r3, [pc, #200]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 80010b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1ef      	bne.n	800109e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80a6 	beq.w	8001218 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010d0:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10d      	bne.n	80010f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e0:	4a26      	ldr	r2, [pc, #152]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f4:	2301      	movs	r3, #1
 80010f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <HAL_RCC_OscConfig+0x508>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d118      	bne.n	8001136 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <HAL_RCC_OscConfig+0x508>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1d      	ldr	r2, [pc, #116]	@ (8001180 <HAL_RCC_OscConfig+0x508>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800110e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001110:	f7ff fae2 	bl	80006d8 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001118:	f7ff fade 	bl	80006d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1b2      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_RCC_OscConfig+0x508>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_RCC_OscConfig+0x4d8>
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800114e:	e029      	b.n	80011a4 <HAL_RCC_OscConfig+0x52c>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b05      	cmp	r3, #5
 8001156:	d115      	bne.n	8001184 <HAL_RCC_OscConfig+0x50c>
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 800115a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115e:	4a07      	ldr	r2, [pc, #28]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 800116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800116e:	4a03      	ldr	r2, [pc, #12]	@ (800117c <HAL_RCC_OscConfig+0x504>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001178:	e014      	b.n	80011a4 <HAL_RCC_OscConfig+0x52c>
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40007000 	.word	0x40007000
 8001184:	4b9a      	ldr	r3, [pc, #616]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800118a:	4a99      	ldr	r2, [pc, #612]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001194:	4b96      	ldr	r3, [pc, #600]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800119a:	4a95      	ldr	r2, [pc, #596]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d016      	beq.n	80011da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fa94 	bl	80006d8 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f7ff fa90 	bl	80006d8 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e162      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ca:	4b89      	ldr	r3, [pc, #548]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80011cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ed      	beq.n	80011b4 <HAL_RCC_OscConfig+0x53c>
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011da:	f7ff fa7d 	bl	80006d8 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff fa79 	bl	80006d8 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e14b      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011f8:	4b7d      	ldr	r3, [pc, #500]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1ed      	bne.n	80011e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120c:	4b78      	ldr	r3, [pc, #480]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001210:	4a77      	ldr	r2, [pc, #476]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001216:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	2b00      	cmp	r3, #0
 8001222:	d03c      	beq.n	800129e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01c      	beq.n	8001266 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800122c:	4b70      	ldr	r3, [pc, #448]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800122e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001232:	4a6f      	ldr	r2, [pc, #444]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fa4c 	bl	80006d8 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001244:	f7ff fa48 	bl	80006d8 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e11c      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001256:	4b66      	ldr	r3, [pc, #408]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ef      	beq.n	8001244 <HAL_RCC_OscConfig+0x5cc>
 8001264:	e01b      	b.n	800129e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001266:	4b62      	ldr	r3, [pc, #392]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800126c:	4a60      	ldr	r2, [pc, #384]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff fa2f 	bl	80006d8 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800127e:	f7ff fa2b 	bl	80006d8 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0ff      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001290:	4b57      	ldr	r3, [pc, #348]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ef      	bne.n	800127e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80f3 	beq.w	800148e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	f040 80c9 	bne.w	8001444 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012b2:	4b4f      	ldr	r3, [pc, #316]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f003 0203 	and.w	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d12c      	bne.n	8001320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	3b01      	subs	r3, #1
 80012d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d123      	bne.n	8001320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d11b      	bne.n	8001320 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d113      	bne.n	8001320 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001302:	085b      	lsrs	r3, r3, #1
 8001304:	3b01      	subs	r3, #1
 8001306:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d109      	bne.n	8001320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	3b01      	subs	r3, #1
 800131a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800131c:	429a      	cmp	r2, r3
 800131e:	d06b      	beq.n	80013f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d062      	beq.n	80013ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001326:	4b32      	ldr	r3, [pc, #200]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0ac      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2d      	ldr	r2, [pc, #180]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800133c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001340:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001342:	f7ff f9c9 	bl	80006d8 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134a:	f7ff f9c5 	bl	80006d8 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e099      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <HAL_RCC_OscConfig+0x77c>)
 800136e:	4013      	ands	r3, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001378:	3a01      	subs	r2, #1
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	4311      	orrs	r1, r2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001382:	0212      	lsls	r2, r2, #8
 8001384:	4311      	orrs	r1, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800138a:	0852      	lsrs	r2, r2, #1
 800138c:	3a01      	subs	r2, #1
 800138e:	0552      	lsls	r2, r2, #21
 8001390:	4311      	orrs	r1, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001396:	0852      	lsrs	r2, r2, #1
 8001398:	3a01      	subs	r2, #1
 800139a:	0652      	lsls	r2, r2, #25
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013a2:	06d2      	lsls	r2, r2, #27
 80013a4:	430a      	orrs	r2, r1
 80013a6:	4912      	ldr	r1, [pc, #72]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013c4:	f7ff f988 	bl	80006d8 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff f984 	bl	80006d8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e058      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <HAL_RCC_OscConfig+0x778>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ea:	e050      	b.n	800148e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e04f      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
 80013f0:	40021000 	.word	0x40021000
 80013f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d144      	bne.n	800148e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001410:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4a20      	ldr	r2, [pc, #128]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 8001416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800141a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800141c:	f7ff f95c 	bl	80006d8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f958 	bl	80006d8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e02c      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x7ac>
 8001442:	e024      	b.n	800148e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d01f      	beq.n	800148a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 8001450:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff f93f 	bl	80006d8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff f93b 	bl	80006d8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	4905      	ldr	r1, [pc, #20]	@ (8001498 <HAL_RCC_OscConfig+0x820>)
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_RCC_OscConfig+0x824>)
 8001484:	4013      	ands	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
 8001488:	e001      	b.n	800148e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	feeefffc 	.word	0xfeeefffc

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0e7      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b75      	ldr	r3, [pc, #468]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d910      	bls.n	80014e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b72      	ldr	r3, [pc, #456]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 0207 	bic.w	r2, r3, #7
 80014ca:	4970      	ldr	r1, [pc, #448]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b6e      	ldr	r3, [pc, #440]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0cf      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d010      	beq.n	8001512 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	4b66      	ldr	r3, [pc, #408]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d908      	bls.n	8001512 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001500:	4b63      	ldr	r3, [pc, #396]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4960      	ldr	r1, [pc, #384]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d04c      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001526:	4b5a      	ldr	r3, [pc, #360]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d121      	bne.n	8001576 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0a6      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153e:	4b54      	ldr	r3, [pc, #336]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d115      	bne.n	8001576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e09a      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001556:	4b4e      	ldr	r3, [pc, #312]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e08e      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e086      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4b46      	ldr	r3, [pc, #280]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f023 0203 	bic.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4943      	ldr	r1, [pc, #268]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001588:	f7ff f8a6 	bl	80006d8 <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff f8a2 	bl	80006d8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e06e      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d010      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d208      	bcs.n	80015e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	492b      	ldr	r1, [pc, #172]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e6:	4b29      	ldr	r3, [pc, #164]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d210      	bcs.n	8001616 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f4:	4b25      	ldr	r3, [pc, #148]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 0207 	bic.w	r2, r3, #7
 80015fc:	4923      	ldr	r1, [pc, #140]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001604:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_RCC_ClockConfig+0x1ec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e036      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4918      	ldr	r1, [pc, #96]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4910      	ldr	r1, [pc, #64]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001654:	f000 f824 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	490b      	ldr	r1, [pc, #44]	@ (8001694 <HAL_RCC_ClockConfig+0x1f4>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1f8>)
 8001672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_ClockConfig+0x1fc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffdd 	bl	8000638 <HAL_InitTick>
 800167e:	4603      	mov	r3, r0
 8001680:	72fb      	strb	r3, [r7, #11]

  return status;
 8001682:	7afb      	ldrb	r3, [r7, #11]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40022000 	.word	0x40022000
 8001690:	40021000 	.word	0x40021000
 8001694:	080027f8 	.word	0x080027f8
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	@ 0x24
 80016a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ae:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b8:	4b3b      	ldr	r3, [pc, #236]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x34>
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d121      	bne.n	8001712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d11e      	bne.n	8001712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016d4:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016e0:	4b31      	ldr	r3, [pc, #196]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	e005      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016fc:	4a2b      	ldr	r2, [pc, #172]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d102      	bne.n	800171e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001718:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	e004      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b08      	cmp	r3, #8
 8001722:	d101      	bne.n	8001728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001724:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d134      	bne.n	8001798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d003      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0xa6>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d003      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0xac>
 8001744:	e005      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001748:	617b      	str	r3, [r7, #20]
      break;
 800174a:	e005      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800174e:	617b      	str	r3, [r7, #20]
      break;
 8001750:	e002      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	617b      	str	r3, [r7, #20]
      break;
 8001756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	3301      	adds	r3, #1
 8001764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	fb03 f202 	mul.w	r2, r3, r2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	0e5b      	lsrs	r3, r3, #25
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	3301      	adds	r3, #1
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001798:	69bb      	ldr	r3, [r7, #24]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	@ 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08002808 	.word	0x08002808
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	007a1200 	.word	0x007a1200

080017b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017d0:	f7ff f9ee 	bl	8000bb0 <HAL_PWREx_GetVoltageRange>
 80017d4:	6178      	str	r0, [r7, #20]
 80017d6:	e014      	b.n	8001802 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017dc:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017f0:	f7ff f9de 	bl	8000bb0 <HAL_PWREx_GetVoltageRange>
 80017f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001808:	d10b      	bne.n	8001822 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b80      	cmp	r3, #128	@ 0x80
 800180e:	d919      	bls.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2ba0      	cmp	r3, #160	@ 0xa0
 8001814:	d902      	bls.n	800181c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001816:	2302      	movs	r3, #2
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e013      	b.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800181c:	2301      	movs	r3, #1
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	e010      	b.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b80      	cmp	r3, #128	@ 0x80
 8001826:	d902      	bls.n	800182e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001828:	2303      	movs	r3, #3
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	e00a      	b.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b80      	cmp	r3, #128	@ 0x80
 8001832:	d102      	bne.n	800183a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001834:	2302      	movs	r3, #2
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	e004      	b.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b70      	cmp	r3, #112	@ 0x70
 800183e:	d101      	bne.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001840:	2301      	movs	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 0207 	bic.w	r2, r3, #7
 800184c:	4909      	ldr	r1, [pc, #36]	@ (8001874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	429a      	cmp	r2, r3
 8001860:	d001      	beq.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e049      	b.n	800191e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7fe fdf4 	bl	800048c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f000 fb52 	bl	8001f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e049      	b.n	80019cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f841 	bl	80019d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f000 fafb 	bl	8001f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_TIM_PWM_Start+0x24>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e03c      	b.n	8001a86 <HAL_TIM_PWM_Start+0x9e>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d109      	bne.n	8001a26 <HAL_TIM_PWM_Start+0x3e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	e02f      	b.n	8001a86 <HAL_TIM_PWM_Start+0x9e>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d109      	bne.n	8001a40 <HAL_TIM_PWM_Start+0x58>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	e022      	b.n	8001a86 <HAL_TIM_PWM_Start+0x9e>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d109      	bne.n	8001a5a <HAL_TIM_PWM_Start+0x72>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	e015      	b.n	8001a86 <HAL_TIM_PWM_Start+0x9e>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d109      	bne.n	8001a74 <HAL_TIM_PWM_Start+0x8c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	e008      	b.n	8001a86 <HAL_TIM_PWM_Start+0x9e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	bf14      	ite	ne
 8001a80:	2301      	movne	r3, #1
 8001a82:	2300      	moveq	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e07e      	b.n	8001b8c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <HAL_TIM_PWM_Start+0xb6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a9c:	e023      	b.n	8001ae6 <HAL_TIM_PWM_Start+0xfe>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d104      	bne.n	8001aae <HAL_TIM_PWM_Start+0xc6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aac:	e01b      	b.n	8001ae6 <HAL_TIM_PWM_Start+0xfe>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d104      	bne.n	8001abe <HAL_TIM_PWM_Start+0xd6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001abc:	e013      	b.n	8001ae6 <HAL_TIM_PWM_Start+0xfe>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d104      	bne.n	8001ace <HAL_TIM_PWM_Start+0xe6>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001acc:	e00b      	b.n	8001ae6 <HAL_TIM_PWM_Start+0xfe>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d104      	bne.n	8001ade <HAL_TIM_PWM_Start+0xf6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001adc:	e003      	b.n	8001ae6 <HAL_TIM_PWM_Start+0xfe>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fdbe 	bl	8002670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a26      	ldr	r2, [pc, #152]	@ (8001b94 <HAL_TIM_PWM_Start+0x1ac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_TIM_PWM_Start+0x12a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a25      	ldr	r2, [pc, #148]	@ (8001b98 <HAL_TIM_PWM_Start+0x1b0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_TIM_PWM_Start+0x12a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <HAL_TIM_PWM_Start+0x1b4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_PWM_Start+0x12e>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_TIM_PWM_Start+0x130>
 8001b16:	2300      	movs	r3, #0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_TIM_PWM_Start+0x1ac>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d009      	beq.n	8001b4a <HAL_TIM_PWM_Start+0x162>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b3e:	d004      	beq.n	8001b4a <HAL_TIM_PWM_Start+0x162>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <HAL_TIM_PWM_Start+0x1b0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d115      	bne.n	8001b76 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <HAL_TIM_PWM_Start+0x1b8>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d015      	beq.n	8001b88 <HAL_TIM_PWM_Start+0x1a0>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b62:	d011      	beq.n	8001b88 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b74:	e008      	b.n	8001b88 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e000      	b.n	8001b8a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40014000 	.word	0x40014000
 8001b9c:	40014400 	.word	0x40014400
 8001ba0:	00010007 	.word	0x00010007

08001ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e0ff      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b14      	cmp	r3, #20
 8001bce:	f200 80f0 	bhi.w	8001db2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001c2d 	.word	0x08001c2d
 8001bdc:	08001db3 	.word	0x08001db3
 8001be0:	08001db3 	.word	0x08001db3
 8001be4:	08001db3 	.word	0x08001db3
 8001be8:	08001c6d 	.word	0x08001c6d
 8001bec:	08001db3 	.word	0x08001db3
 8001bf0:	08001db3 	.word	0x08001db3
 8001bf4:	08001db3 	.word	0x08001db3
 8001bf8:	08001caf 	.word	0x08001caf
 8001bfc:	08001db3 	.word	0x08001db3
 8001c00:	08001db3 	.word	0x08001db3
 8001c04:	08001db3 	.word	0x08001db3
 8001c08:	08001cef 	.word	0x08001cef
 8001c0c:	08001db3 	.word	0x08001db3
 8001c10:	08001db3 	.word	0x08001db3
 8001c14:	08001db3 	.word	0x08001db3
 8001c18:	08001d31 	.word	0x08001d31
 8001c1c:	08001db3 	.word	0x08001db3
 8001c20:	08001db3 	.word	0x08001db3
 8001c24:	08001db3 	.word	0x08001db3
 8001c28:	08001d71 	.word	0x08001d71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fa04 	bl	8002040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0208 	orr.w	r2, r2, #8
 8001c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0204 	bic.w	r2, r2, #4
 8001c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6999      	ldr	r1, [r3, #24]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	619a      	str	r2, [r3, #24]
      break;
 8001c6a:	e0a5      	b.n	8001db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fa60 	bl	8002138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6999      	ldr	r1, [r3, #24]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	021a      	lsls	r2, r3, #8
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	619a      	str	r2, [r3, #24]
      break;
 8001cac:	e084      	b.n	8001db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fab9 	bl	800222c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0208 	orr.w	r2, r2, #8
 8001cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0204 	bic.w	r2, r2, #4
 8001cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69d9      	ldr	r1, [r3, #28]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	61da      	str	r2, [r3, #28]
      break;
 8001cec:	e064      	b.n	8001db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fb11 	bl	800231c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69da      	ldr	r2, [r3, #28]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69d9      	ldr	r1, [r3, #28]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	021a      	lsls	r2, r3, #8
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	61da      	str	r2, [r3, #28]
      break;
 8001d2e:	e043      	b.n	8001db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fb4e 	bl	80023d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0208 	orr.w	r2, r2, #8
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0204 	bic.w	r2, r2, #4
 8001d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001d6e:	e023      	b.n	8001db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fb86 	bl	8002488 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	021a      	lsls	r2, r3, #8
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
      break;
 8001db6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop

08001dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_TIM_ConfigClockSource+0x1c>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0b6      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x18a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e24:	d03e      	beq.n	8001ea4 <HAL_TIM_ConfigClockSource+0xd8>
 8001e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e2a:	f200 8087 	bhi.w	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e32:	f000 8086 	beq.w	8001f42 <HAL_TIM_ConfigClockSource+0x176>
 8001e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e3a:	d87f      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e3c:	2b70      	cmp	r3, #112	@ 0x70
 8001e3e:	d01a      	beq.n	8001e76 <HAL_TIM_ConfigClockSource+0xaa>
 8001e40:	2b70      	cmp	r3, #112	@ 0x70
 8001e42:	d87b      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e44:	2b60      	cmp	r3, #96	@ 0x60
 8001e46:	d050      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0x11e>
 8001e48:	2b60      	cmp	r3, #96	@ 0x60
 8001e4a:	d877      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e4c:	2b50      	cmp	r3, #80	@ 0x50
 8001e4e:	d03c      	beq.n	8001eca <HAL_TIM_ConfigClockSource+0xfe>
 8001e50:	2b50      	cmp	r3, #80	@ 0x50
 8001e52:	d873      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e54:	2b40      	cmp	r3, #64	@ 0x40
 8001e56:	d058      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0x13e>
 8001e58:	2b40      	cmp	r3, #64	@ 0x40
 8001e5a:	d86f      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e5c:	2b30      	cmp	r3, #48	@ 0x30
 8001e5e:	d064      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15e>
 8001e60:	2b30      	cmp	r3, #48	@ 0x30
 8001e62:	d86b      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d060      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15e>
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d867      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05c      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15e>
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d05a      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15e>
 8001e74:	e062      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e86:	f000 fbd3 	bl	8002630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	609a      	str	r2, [r3, #8]
      break;
 8001ea2:	e04f      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eb4:	f000 fbbc 	bl	8002630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ec6:	609a      	str	r2, [r3, #8]
      break;
 8001ec8:	e03c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f000 fb30 	bl	800253c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2150      	movs	r1, #80	@ 0x50
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fb89 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 8001ee8:	e02c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f000 fb4f 	bl	800259a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2160      	movs	r1, #96	@ 0x60
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fb79 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 8001f08:	e01c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f16:	461a      	mov	r2, r3
 8001f18:	f000 fb10 	bl	800253c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2140      	movs	r1, #64	@ 0x40
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fb69 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 8001f28:	e00c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f000 fb60 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 8001f3a:	e003      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f40:	e000      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a30      	ldr	r2, [pc, #192]	@ (8002034 <TIM_Base_SetConfig+0xd4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0x20>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7e:	d108      	bne.n	8001f92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <TIM_Base_SetConfig+0xd4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_Base_SetConfig+0x52>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa0:	d007      	beq.n	8001fb2 <TIM_Base_SetConfig+0x52>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	@ (8002038 <TIM_Base_SetConfig+0xd8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0x52>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a23      	ldr	r2, [pc, #140]	@ (800203c <TIM_Base_SetConfig+0xdc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <TIM_Base_SetConfig+0xd4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <TIM_Base_SetConfig+0xa0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <TIM_Base_SetConfig+0xd8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <TIM_Base_SetConfig+0xa0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a10      	ldr	r2, [pc, #64]	@ (800203c <TIM_Base_SetConfig+0xdc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d103      	bne.n	8002008 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f023 0201 	bic.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
  }
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40014000 	.word	0x40014000
 800203c:	40014400 	.word	0x40014400

08002040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f023 0201 	bic.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f023 0302 	bic.w	r3, r3, #2
 800208c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a24      	ldr	r2, [pc, #144]	@ (800212c <TIM_OC1_SetConfig+0xec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <TIM_OC1_SetConfig+0x70>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <TIM_OC1_SetConfig+0xf0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_OC1_SetConfig+0x70>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a22      	ldr	r2, [pc, #136]	@ (8002134 <TIM_OC1_SetConfig+0xf4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d10c      	bne.n	80020ca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f023 0308 	bic.w	r3, r3, #8
 80020b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a17      	ldr	r2, [pc, #92]	@ (800212c <TIM_OC1_SetConfig+0xec>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <TIM_OC1_SetConfig+0xa2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a16      	ldr	r2, [pc, #88]	@ (8002130 <TIM_OC1_SetConfig+0xf0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d003      	beq.n	80020e2 <TIM_OC1_SetConfig+0xa2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a15      	ldr	r2, [pc, #84]	@ (8002134 <TIM_OC1_SetConfig+0xf4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d111      	bne.n	8002106 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80020f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40014000 	.word	0x40014000
 8002134:	40014400 	.word	0x40014400

08002138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f023 0210 	bic.w	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800216a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f023 0320 	bic.w	r3, r3, #32
 8002186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <TIM_OC2_SetConfig+0xe8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d10d      	bne.n	80021b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a19      	ldr	r2, [pc, #100]	@ (8002220 <TIM_OC2_SetConfig+0xe8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <TIM_OC2_SetConfig+0x98>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a18      	ldr	r2, [pc, #96]	@ (8002224 <TIM_OC2_SetConfig+0xec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_OC2_SetConfig+0x98>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <TIM_OC2_SetConfig+0xf0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d113      	bne.n	80021f8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	621a      	str	r2, [r3, #32]
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40014000 	.word	0x40014000
 8002228:	40014400 	.word	0x40014400

0800222c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800225e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <TIM_OC3_SetConfig+0xe4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10d      	bne.n	80022aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a18      	ldr	r2, [pc, #96]	@ (8002310 <TIM_OC3_SetConfig+0xe4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <TIM_OC3_SetConfig+0x96>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a17      	ldr	r2, [pc, #92]	@ (8002314 <TIM_OC3_SetConfig+0xe8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d003      	beq.n	80022c2 <TIM_OC3_SetConfig+0x96>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <TIM_OC3_SetConfig+0xec>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d113      	bne.n	80022ea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	621a      	str	r2, [r3, #32]
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40014000 	.word	0x40014000
 8002318:	40014400 	.word	0x40014400

0800231c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800234a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800234e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800236a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	031b      	lsls	r3, r3, #12
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a14      	ldr	r2, [pc, #80]	@ (80023cc <TIM_OC4_SetConfig+0xb0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <TIM_OC4_SetConfig+0x74>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <TIM_OC4_SetConfig+0xb4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <TIM_OC4_SetConfig+0x74>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <TIM_OC4_SetConfig+0xb8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d109      	bne.n	80023a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	621a      	str	r2, [r3, #32]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40014000 	.word	0x40014000
 80023d4:	40014400 	.word	0x40014400

080023d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800240a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800241c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a13      	ldr	r2, [pc, #76]	@ (800247c <TIM_OC5_SetConfig+0xa4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <TIM_OC5_SetConfig+0x6a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <TIM_OC5_SetConfig+0xa8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d003      	beq.n	8002442 <TIM_OC5_SetConfig+0x6a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <TIM_OC5_SetConfig+0xac>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d109      	bne.n	8002456 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	621a      	str	r2, [r3, #32]
}
 8002470:	bf00      	nop
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40014000 	.word	0x40014000
 8002484:	40014400 	.word	0x40014400

08002488 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	051b      	lsls	r3, r3, #20
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <TIM_OC6_SetConfig+0xa8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <TIM_OC6_SetConfig+0x6c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <TIM_OC6_SetConfig+0xac>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <TIM_OC6_SetConfig+0x6c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <TIM_OC6_SetConfig+0xb0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d109      	bne.n	8002508 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	029b      	lsls	r3, r3, #10
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	621a      	str	r2, [r3, #32]
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400

0800253c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f023 0201 	bic.w	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 030a 	bic.w	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800259a:	b480      	push	{r7}
 800259c:	b087      	sub	sp, #28
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f023 0210 	bic.w	r2, r3, #16
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	031b      	lsls	r3, r3, #12
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80025d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	f043 0307 	orr.w	r3, r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800264a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	021a      	lsls	r2, r3, #8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	431a      	orrs	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2201      	movs	r2, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a1a      	ldr	r2, [r3, #32]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	43db      	mvns	r3, r3
 8002692:	401a      	ands	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e04f      	b.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002704:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800273c:	d004      	beq.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a10      	ldr	r2, [pc, #64]	@ (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10c      	bne.n	8002762 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800274e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40014000 	.word	0x40014000

08002788 <memset>:
 8002788:	4402      	add	r2, r0
 800278a:	4603      	mov	r3, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	d100      	bne.n	8002792 <memset+0xa>
 8002790:	4770      	bx	lr
 8002792:	f803 1b01 	strb.w	r1, [r3], #1
 8002796:	e7f9      	b.n	800278c <memset+0x4>

08002798 <__libc_init_array>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	4d0d      	ldr	r5, [pc, #52]	@ (80027d0 <__libc_init_array+0x38>)
 800279c:	4c0d      	ldr	r4, [pc, #52]	@ (80027d4 <__libc_init_array+0x3c>)
 800279e:	1b64      	subs	r4, r4, r5
 80027a0:	10a4      	asrs	r4, r4, #2
 80027a2:	2600      	movs	r6, #0
 80027a4:	42a6      	cmp	r6, r4
 80027a6:	d109      	bne.n	80027bc <__libc_init_array+0x24>
 80027a8:	4d0b      	ldr	r5, [pc, #44]	@ (80027d8 <__libc_init_array+0x40>)
 80027aa:	4c0c      	ldr	r4, [pc, #48]	@ (80027dc <__libc_init_array+0x44>)
 80027ac:	f000 f818 	bl	80027e0 <_init>
 80027b0:	1b64      	subs	r4, r4, r5
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	2600      	movs	r6, #0
 80027b6:	42a6      	cmp	r6, r4
 80027b8:	d105      	bne.n	80027c6 <__libc_init_array+0x2e>
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c0:	4798      	blx	r3
 80027c2:	3601      	adds	r6, #1
 80027c4:	e7ee      	b.n	80027a4 <__libc_init_array+0xc>
 80027c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ca:	4798      	blx	r3
 80027cc:	3601      	adds	r6, #1
 80027ce:	e7f2      	b.n	80027b6 <__libc_init_array+0x1e>
 80027d0:	08002838 	.word	0x08002838
 80027d4:	08002838 	.word	0x08002838
 80027d8:	08002838 	.word	0x08002838
 80027dc:	0800283c 	.word	0x0800283c

080027e0 <_init>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr

080027ec <_fini>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr
