
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000908c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800921c  0800921c  0000a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800964c  0800964c  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800964c  0800964c  0000a64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009654  08009654  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009654  08009654  0000a654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009658  08009658  0000a658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800965c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000070  080096cc  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  080096cc  0000b578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0df  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b37  00000000  00000000  0002517f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00028cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ec  00000000  00000000  0002a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253e6  00000000  00000000  0002b7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020065  00000000  00000000  00050bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc520  00000000  00000000  00070c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba4  00000000  00000000  0014d17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00153d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009204 	.word	0x08009204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009204 	.word	0x08009204

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <OLED_WriteCommand>:

static I2C_HandleTypeDef *oled_i2c;
#define OLED_ADDR 0x78

static void OLED_WriteCommand(uint8_t cmd)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0x00, cmd};
 80005d6:	2300      	movs	r3, #0
 80005d8:	733b      	strb	r3, [r7, #12]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(oled_i2c, OLED_ADDR, data, 2, HAL_MAX_DELAY);
 80005de:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <OLED_WriteCommand+0x30>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	f107 020c 	add.w	r2, r7, #12
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2302      	movs	r3, #2
 80005ee:	2178      	movs	r1, #120	@ 0x78
 80005f0:	f002 f892 	bl	8002718 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000008c 	.word	0x2000008c

08000600 <OLED_WriteData>:

static void OLED_WriteData(uint8_t dat)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0x40, dat};
 800060a:	2340      	movs	r3, #64	@ 0x40
 800060c:	733b      	strb	r3, [r7, #12]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(oled_i2c, OLED_ADDR, data, 2, HAL_MAX_DELAY);
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <OLED_WriteData+0x30>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2302      	movs	r3, #2
 8000622:	2178      	movs	r1, #120	@ 0x78
 8000624:	f002 f878 	bl	8002718 <HAL_I2C_Master_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000008c 	.word	0x2000008c

08000634 <OLED_SetCursor>:

static void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	460a      	mov	r2, r1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	4613      	mov	r3, r2
 8000642:	71bb      	strb	r3, [r7, #6]
	X+=2;
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	3302      	adds	r3, #2
 8000648:	71bb      	strb	r3, [r7, #6]
    OLED_WriteCommand(0xB0 | Y);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffba 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	091b      	lsrs	r3, r3, #4
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ffb1 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x00 | (X & 0x0F));
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	f003 030f 	and.w	r3, r3, #15
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffaa 	bl	80005cc <OLED_WriteCommand>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <OLED_Clear>:

void OLED_Clear(void)
{  
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
    for (uint8_t j = 0; j < 8; j++)
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e014      	b.n	80006b6 <OLED_Clear+0x36>
    {
        OLED_SetCursor(j, 0);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffcf 	bl	8000634 <OLED_SetCursor>
        for (uint8_t i = 0; i < 128; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	71bb      	strb	r3, [r7, #6]
 800069a:	e005      	b.n	80006a8 <OLED_Clear+0x28>
        {
            OLED_WriteData(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ffaf 	bl	8000600 <OLED_WriteData>
        for (uint8_t i = 0; i < 128; i++)
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	3301      	adds	r3, #1
 80006a6:	71bb      	strb	r3, [r7, #6]
 80006a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	daf5      	bge.n	800069c <OLED_Clear+0x1c>
    for (uint8_t j = 0; j < 8; j++)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	3301      	adds	r3, #1
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	d9e7      	bls.n	800068c <OLED_Clear+0xc>
        }
    }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <OLED_Init>:
        OLED_ShowChar(Line, Column + i, Number / OLED_Pow(2, Length - i - 1) % 2 + '0');
    }
}

void OLED_Init(I2C_HandleTypeDef *hi2c)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    oled_i2c = hi2c;
 80006d0:	4a28      	ldr	r2, [pc, #160]	@ (8000774 <OLED_Init+0xac>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
    HAL_Delay(100);
 80006d6:	2064      	movs	r0, #100	@ 0x64
 80006d8:	f001 fb52 	bl	8001d80 <HAL_Delay>

    OLED_WriteCommand(0xAE);
 80006dc:	20ae      	movs	r0, #174	@ 0xae
 80006de:	f7ff ff75 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xD5);
 80006e2:	20d5      	movs	r0, #213	@ 0xd5
 80006e4:	f7ff ff72 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x80);
 80006e8:	2080      	movs	r0, #128	@ 0x80
 80006ea:	f7ff ff6f 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA8);
 80006ee:	20a8      	movs	r0, #168	@ 0xa8
 80006f0:	f7ff ff6c 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x3F);
 80006f4:	203f      	movs	r0, #63	@ 0x3f
 80006f6:	f7ff ff69 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xD3);
 80006fa:	20d3      	movs	r0, #211	@ 0xd3
 80006fc:	f7ff ff66 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x00);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff63 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x40);
 8000706:	2040      	movs	r0, #64	@ 0x40
 8000708:	f7ff ff60 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA1);
 800070c:	20a1      	movs	r0, #161	@ 0xa1
 800070e:	f7ff ff5d 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xC8);
 8000712:	20c8      	movs	r0, #200	@ 0xc8
 8000714:	f7ff ff5a 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xDA);
 8000718:	20da      	movs	r0, #218	@ 0xda
 800071a:	f7ff ff57 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x12);
 800071e:	2012      	movs	r0, #18
 8000720:	f7ff ff54 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x81);
 8000724:	2081      	movs	r0, #129	@ 0x81
 8000726:	f7ff ff51 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xCF);
 800072a:	20cf      	movs	r0, #207	@ 0xcf
 800072c:	f7ff ff4e 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xD9);
 8000730:	20d9      	movs	r0, #217	@ 0xd9
 8000732:	f7ff ff4b 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xF1);
 8000736:	20f1      	movs	r0, #241	@ 0xf1
 8000738:	f7ff ff48 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xDB);
 800073c:	20db      	movs	r0, #219	@ 0xdb
 800073e:	f7ff ff45 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x30);
 8000742:	2030      	movs	r0, #48	@ 0x30
 8000744:	f7ff ff42 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA4);
 8000748:	20a4      	movs	r0, #164	@ 0xa4
 800074a:	f7ff ff3f 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA6);
 800074e:	20a6      	movs	r0, #166	@ 0xa6
 8000750:	f7ff ff3c 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x8D);
 8000754:	208d      	movs	r0, #141	@ 0x8d
 8000756:	f7ff ff39 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0x14);
 800075a:	2014      	movs	r0, #20
 800075c:	f7ff ff36 	bl	80005cc <OLED_WriteCommand>
    OLED_WriteCommand(0xAF);
 8000760:	20af      	movs	r0, #175	@ 0xaf
 8000762:	f7ff ff33 	bl	80005cc <OLED_WriteCommand>

    OLED_Clear();
 8000766:	f7ff ff8b 	bl	8000680 <OLED_Clear>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000008c 	.word	0x2000008c

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_DMA_Init+0x38>)
 8000780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000782:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <MX_DMA_Init+0x38>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6493      	str	r3, [r2, #72]	@ 0x48
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_DMA_Init+0x38>)
 800078c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200f      	movs	r0, #15
 800079c:	f001 fbef 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007a0:	200f      	movs	r0, #15
 80007a2:	f001 fc08 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_GPIO_Init+0x74>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <MX_GPIO_Init+0x74>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_GPIO_Init+0x74>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_GPIO_Init+0x74>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <MX_GPIO_Init+0x74>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_GPIO_Init+0x74>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	480b      	ldr	r0, [pc, #44]	@ (800082c <MX_GPIO_Init+0x78>)
 8000800:	f001 fed6 	bl	80025b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000804:	2302      	movs	r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_GPIO_Init+0x78>)
 800081c:	f001 fd4e 	bl	80022bc <HAL_GPIO_Init>

}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400

08000830 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000834:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_I2C2_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <MX_I2C2_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_I2C2_Init+0x74>)
 800083c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <MX_I2C2_Init+0x7c>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000840:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_I2C2_Init+0x74>)
 8000848:	2201      	movs	r2, #1
 800084a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_I2C2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <MX_I2C2_Init+0x74>)
 800086c:	f001 feb8 	bl	80025e0 <HAL_I2C_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000876:	f000 fec3 	bl	8001600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <MX_I2C2_Init+0x74>)
 800087e:	f002 fa7d 	bl	8002d7c <HAL_I2CEx_ConfigAnalogFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 feba 	bl	8001600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_I2C2_Init+0x74>)
 8000890:	f002 fabf 	bl	8002e12 <HAL_I2CEx_ConfigDigitalFilter>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 feb1 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000090 	.word	0x20000090
 80008a8:	40005800 	.word	0x40005800
 80008ac:	10d19ce4 	.word	0x10d19ce4

080008b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0a2      	sub	sp, #136	@ 0x88
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2260      	movs	r2, #96	@ 0x60
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f007 fff3 	bl	80088bc <memset>
  if(i2cHandle->Instance==I2C2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a20      	ldr	r2, [pc, #128]	@ (800095c <HAL_I2C_MspInit+0xac>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d138      	bne.n	8000952 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 f979 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008f8:	f000 fe82 	bl	8001600 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <HAL_I2C_MspInit+0xb0>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_I2C_MspInit+0xb0>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_I2C_MspInit+0xb0>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000914:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000918:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091a:	2312      	movs	r3, #18
 800091c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000928:	2304      	movs	r3, #4
 800092a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000932:	4619      	mov	r1, r3
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <HAL_I2C_MspInit+0xb4>)
 8000936:	f001 fcc1 	bl	80022bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_I2C_MspInit+0xb0>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_I2C_MspInit+0xb0>)
 8000940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000944:	6593      	str	r3, [r2, #88]	@ 0x58
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_I2C_MspInit+0xb0>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000952:	bf00      	nop
 8000954:	3788      	adds	r7, #136	@ 0x88
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40005800 	.word	0x40005800
 8000960:	40021000 	.word	0x40021000
 8000964:	48000400 	.word	0x48000400

08000968 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...)
{
 8000968:	b40f      	push	{r0, r1, r2, r3}
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800097e:	480b      	ldr	r0, [pc, #44]	@ (80009ac <myprintf+0x44>)
 8000980:	f007 ff64 	bl	800884c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000984:	4809      	ldr	r0, [pc, #36]	@ (80009ac <myprintf+0x44>)
 8000986:	f7ff fc2d 	bl	80001e4 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, -1);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	b29a      	uxth	r2, r3
 8000992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000996:	4905      	ldr	r1, [pc, #20]	@ (80009ac <myprintf+0x44>)
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <myprintf+0x48>)
 800099a:	f004 fbd5 	bl	8005148 <HAL_UART_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr
 80009ac:	200000e4 	.word	0x200000e4
 80009b0:	20000368 	.word	0x20000368

080009b4 <trim_crlf>:
  char difficulty[12]; // N/A, EASY, MEDIUM, HARD, EXPERT, GIGA
  int offset_ms;       // 0..1000
} SongInfo;

static void trim_crlf(char *s)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  size_t n = strlen(s);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fc11 	bl	80001e4 <strlen>
 80009c2:	60f8      	str	r0, [r7, #12]
  while (n && (s[n - 1] == '\r' || s[n - 1] == '\n'))
 80009c4:	e007      	b.n	80009d6 <trim_crlf+0x22>
  {
    s[--n] = 0;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
  while (n && (s[n - 1] == '\r' || s[n - 1] == '\n'))
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00d      	beq.n	80009f8 <trim_crlf+0x44>
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3b01      	subs	r3, #1
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b0d      	cmp	r3, #13
 80009e8:	d0ed      	beq.n	80009c6 <trim_crlf+0x12>
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b0a      	cmp	r3, #10
 80009f6:	d0e6      	beq.n	80009c6 <trim_crlf+0x12>
  }
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <ends_with_case>:

static int ends_with_case(const char *s, const char *ext)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  size_t ls = strlen(s), le = strlen(ext);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fbea 	bl	80001e4 <strlen>
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	6838      	ldr	r0, [r7, #0]
 8000a14:	f7ff fbe6 	bl	80001e4 <strlen>
 8000a18:	60b8      	str	r0, [r7, #8]
  if (ls < le)
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d201      	bcs.n	8000a26 <ends_with_case+0x26>
    return 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e030      	b.n	8000a88 <ends_with_case+0x88>
  for (size_t i = 0; i < le; i++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e028      	b.n	8000a7e <ends_with_case+0x7e>
  {
    char a = s[ls - le + i], b = ext[i];
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad2      	subs	r2, r2, r3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	4413      	add	r3, r2
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	74fb      	strb	r3, [r7, #19]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	4413      	add	r3, r2
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	74bb      	strb	r3, [r7, #18]
    if (a >= 'A' && a <= 'Z')
 8000a48:	7cfb      	ldrb	r3, [r7, #19]
 8000a4a:	2b40      	cmp	r3, #64	@ 0x40
 8000a4c:	d905      	bls.n	8000a5a <ends_with_case+0x5a>
 8000a4e:	7cfb      	ldrb	r3, [r7, #19]
 8000a50:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a52:	d802      	bhi.n	8000a5a <ends_with_case+0x5a>
      a += 32;
 8000a54:	7cfb      	ldrb	r3, [r7, #19]
 8000a56:	3320      	adds	r3, #32
 8000a58:	74fb      	strb	r3, [r7, #19]
    if (b >= 'A' && b <= 'Z')
 8000a5a:	7cbb      	ldrb	r3, [r7, #18]
 8000a5c:	2b40      	cmp	r3, #64	@ 0x40
 8000a5e:	d905      	bls.n	8000a6c <ends_with_case+0x6c>
 8000a60:	7cbb      	ldrb	r3, [r7, #18]
 8000a62:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a64:	d802      	bhi.n	8000a6c <ends_with_case+0x6c>
      b += 32;
 8000a66:	7cbb      	ldrb	r3, [r7, #18]
 8000a68:	3320      	adds	r3, #32
 8000a6a:	74bb      	strb	r3, [r7, #18]
    if (a != b)
 8000a6c:	7cfa      	ldrb	r2, [r7, #19]
 8000a6e:	7cbb      	ldrb	r3, [r7, #18]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d001      	beq.n	8000a78 <ends_with_case+0x78>
      return 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e007      	b.n	8000a88 <ends_with_case+0x88>
  for (size_t i = 0; i < le; i++)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d3d2      	bcc.n	8000a2c <ends_with_case+0x2c>
  }
  return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <replace_ext>:

static void replace_ext(char *path, const char *newext)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  char *dot = NULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  for (char *p = path; *p; ++p)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	e008      	b.n	8000ab6 <replace_ext+0x26>
    if (*p == '.')
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000aaa:	d101      	bne.n	8000ab0 <replace_ext+0x20>
      dot = p;
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60fb      	str	r3, [r7, #12]
  for (char *p = path; *p; ++p)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f2      	bne.n	8000aa4 <replace_ext+0x14>
  if (!dot)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d004      	beq.n	8000ace <replace_ext+0x3e>
    return;
  strcpy(dot, newext);
 8000ac4:	6839      	ldr	r1, [r7, #0]
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f007 ff64 	bl	8008994 <strcpy>
 8000acc:	e000      	b.n	8000ad0 <replace_ext+0x40>
    return;
 8000ace:	bf00      	nop
}
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <parse_tsq_header>:

// 0:/xxx.tsq
static FRESULT parse_tsq_header(const char *tsq_path, SongInfo *info)
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	f5ad 7d38 	sub.w	sp, sp, #736	@ 0x2e0
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000ae4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8000ae8:	6018      	str	r0, [r3, #0]
 8000aea:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000aee:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000af2:	6019      	str	r1, [r3, #0]
  FIL f;
  FRESULT fr;
  memset(info, 0, sizeof(*info));
 8000af4:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000af8:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000afc:	2298      	movs	r2, #152	@ 0x98
 8000afe:	2100      	movs	r1, #0
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	f007 fedb 	bl	80088bc <memset>
  strcpy(info->difficulty, "N/A");
 8000b06:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000b0a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3388      	adds	r3, #136	@ 0x88
 8000b12:	4a9b      	ldr	r2, [pc, #620]	@ (8000d80 <parse_tsq_header+0x2a8>)
 8000b14:	6810      	ldr	r0, [r2, #0]
 8000b16:	6018      	str	r0, [r3, #0]
  info->offset_ms = 0;
 8000b18:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000b1c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  fr = f_open(&f, tsq_path, FA_READ | FA_OPEN_EXISTING);
 8000b28:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000b2c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8000b30:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8000b34:	2201      	movs	r2, #1
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	f006 feb8 	bl	80078ac <f_open>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f887 32df 	strb.w	r3, [r7, #735]	@ 0x2df
  if (fr != FR_OK)
 8000b42:	f897 32df 	ldrb.w	r3, [r7, #735]	@ 0x2df
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <parse_tsq_header+0x78>
    return fr;
 8000b4a:	f897 32df 	ldrb.w	r3, [r7, #735]	@ 0x2df
 8000b4e:	e112      	b.n	8000d76 <parse_tsq_header+0x29e>

  char line[160];
  for (;;)
  {
    TCHAR *r = f_gets((TCHAR *)line, sizeof(line), &f);
 8000b50:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	21a0      	movs	r1, #160	@ 0xa0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 fd26 	bl	80085ac <f_gets>
 8000b60:	f8c7 02d8 	str.w	r0, [r7, #728]	@ 0x2d8
    if (!r)
 8000b64:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 80fb 	beq.w	8000d64 <parse_tsq_header+0x28c>
      break;
    trim_crlf(line);
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff1e 	bl	80009b4 <trim_crlf>
    if (strcmp(line, "---") == 0)
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4981      	ldr	r1, [pc, #516]	@ (8000d84 <parse_tsq_header+0x2ac>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb26 	bl	80001d0 <strcmp>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 80ee 	beq.w	8000d68 <parse_tsq_header+0x290>
      break; // end of header

    if (strncmp(line, "Name:", 5) == 0)
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2205      	movs	r2, #5
 8000b92:	497d      	ldr	r1, [pc, #500]	@ (8000d88 <parse_tsq_header+0x2b0>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 feac 	bl	80088f2 <strncmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d12e      	bne.n	8000bfe <parse_tsq_header+0x126>
    {
      strncpy(info->name, line + 5, sizeof(info->name) - 1);
 8000ba0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000ba4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	3305      	adds	r3, #5
 8000bb0:	2240      	movs	r2, #64	@ 0x40
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f007 feaf 	bl	8008916 <strncpy>
      while (info->name[0] == ' ')
 8000bb8:	e018      	b.n	8000bec <parse_tsq_header+0x114>
        memmove(info->name, info->name + 1, strlen(info->name));
 8000bba:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000bbe:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000bc2:	681c      	ldr	r4, [r3, #0]
 8000bc4:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000bc8:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1c5d      	adds	r5, r3, #1
 8000bd0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000bd4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb02 	bl	80001e4 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	4629      	mov	r1, r5
 8000be6:	4620      	mov	r0, r4
 8000be8:	f007 fe4e 	bl	8008888 <memmove>
      while (info->name[0] == ' ')
 8000bec:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000bf0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d0de      	beq.n	8000bba <parse_tsq_header+0xe2>
 8000bfc:	e7a8      	b.n	8000b50 <parse_tsq_header+0x78>
    }
    else if (strncmp(line, "Artist:", 7) == 0)
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	2207      	movs	r2, #7
 8000c04:	4961      	ldr	r1, [pc, #388]	@ (8000d8c <parse_tsq_header+0x2b4>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f007 fe73 	bl	80088f2 <strncmp>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d135      	bne.n	8000c7e <parse_tsq_header+0x1a6>
    {
      strncpy(info->artist, line + 7, sizeof(info->artist) - 1);
 8000c12:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000c16:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	3307      	adds	r3, #7
 8000c26:	2240      	movs	r2, #64	@ 0x40
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f007 fe74 	bl	8008916 <strncpy>
      while (info->artist[0] == ' ')
 8000c2e:	e01c      	b.n	8000c6a <parse_tsq_header+0x192>
        memmove(info->artist, info->artist + 1, strlen(info->artist));
 8000c30:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000c34:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f103 0441 	add.w	r4, r3, #65	@ 0x41
 8000c3e:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000c42:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3341      	adds	r3, #65	@ 0x41
 8000c4a:	1c5d      	adds	r5, r3, #1
 8000c4c:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000c50:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3341      	adds	r3, #65	@ 0x41
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fac3 	bl	80001e4 <strlen>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4629      	mov	r1, r5
 8000c64:	4620      	mov	r0, r4
 8000c66:	f007 fe0f 	bl	8008888 <memmove>
      while (info->artist[0] == ' ')
 8000c6a:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000c6e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c78:	2b20      	cmp	r3, #32
 8000c7a:	d0d9      	beq.n	8000c30 <parse_tsq_header+0x158>
 8000c7c:	e768      	b.n	8000b50 <parse_tsq_header+0x78>
    }
    else if (strncmp(line, "BPM:", 4) == 0)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2204      	movs	r2, #4
 8000c84:	4942      	ldr	r1, [pc, #264]	@ (8000d90 <parse_tsq_header+0x2b8>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f007 fe33 	bl	80088f2 <strncmp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10e      	bne.n	8000cb0 <parse_tsq_header+0x1d8>
    {
      info->bpm = atoi(line + 4);
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	3304      	adds	r3, #4
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f007 fd20 	bl	80086de <atoi>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000ca4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000cae:	e74f      	b.n	8000b50 <parse_tsq_header+0x78>
    }
    else if (strncmp(line, "Difficulty:", 11) == 0)
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	220b      	movs	r2, #11
 8000cb6:	4937      	ldr	r1, [pc, #220]	@ (8000d94 <parse_tsq_header+0x2bc>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f007 fe1a 	bl	80088f2 <strncmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d135      	bne.n	8000d30 <parse_tsq_header+0x258>
    {
      strncpy(info->difficulty, line + 11, sizeof(info->difficulty) - 1);
 8000cc4:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000cc8:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	330b      	adds	r3, #11
 8000cd8:	220b      	movs	r2, #11
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f007 fe1b 	bl	8008916 <strncpy>
      while (info->difficulty[0] == ' ')
 8000ce0:	e01c      	b.n	8000d1c <parse_tsq_header+0x244>
        memmove(info->difficulty, info->difficulty + 1, strlen(info->difficulty));
 8000ce2:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000ce6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f103 0488 	add.w	r4, r3, #136	@ 0x88
 8000cf0:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000cf4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3388      	adds	r3, #136	@ 0x88
 8000cfc:	1c5d      	adds	r5, r3, #1
 8000cfe:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000d02:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3388      	adds	r3, #136	@ 0x88
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa6a 	bl	80001e4 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4629      	mov	r1, r5
 8000d16:	4620      	mov	r0, r4
 8000d18:	f007 fdb6 	bl	8008888 <memmove>
      while (info->difficulty[0] == ' ')
 8000d1c:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000d20:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8000d2a:	2b20      	cmp	r3, #32
 8000d2c:	d0d9      	beq.n	8000ce2 <parse_tsq_header+0x20a>
 8000d2e:	e70f      	b.n	8000b50 <parse_tsq_header+0x78>
    }
    else if (strncmp(line, "Offset:", 7) == 0)
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	2207      	movs	r2, #7
 8000d36:	4918      	ldr	r1, [pc, #96]	@ (8000d98 <parse_tsq_header+0x2c0>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f007 fdda 	bl	80088f2 <strncmp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f47f af05 	bne.w	8000b50 <parse_tsq_header+0x78>
    {
      info->offset_ms = atoi(line + 7);
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f007 fcc6 	bl	80086de <atoi>
 8000d52:	4602      	mov	r2, r0
 8000d54:	f507 7338 	add.w	r3, r7, #736	@ 0x2e0
 8000d58:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  {
 8000d62:	e6f5      	b.n	8000b50 <parse_tsq_header+0x78>
      break;
 8000d64:	bf00      	nop
 8000d66:	e000      	b.n	8000d6a <parse_tsq_header+0x292>
      break; // end of header
 8000d68:	bf00      	nop
    }
    //
  }
  f_close(&f);
 8000d6a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f007 f913 	bl	8007f9a <f_close>
  return FR_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	f507 7738 	add.w	r7, r7, #736	@ 0x2e0
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d80:	0800921c 	.word	0x0800921c
 8000d84:	08009220 	.word	0x08009220
 8000d88:	08009224 	.word	0x08009224
 8000d8c:	0800922c 	.word	0x0800922c
 8000d90:	08009234 	.word	0x08009234
 8000d94:	0800923c 	.word	0x0800923c
 8000d98:	08009248 	.word	0x08009248

08000d9c <parse_wav_info>:

// read wav header
static FRESULT parse_wav_info(const char *wav_path,
                              uint16_t *channels, uint32_t *sr,
                              uint16_t *bits, uint32_t *duration_ms)
{
 8000d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da0:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	f507 7626 	add.w	r6, r7, #664	@ 0x298
 8000daa:	f5a6 7621 	sub.w	r6, r6, #644	@ 0x284
 8000dae:	6030      	str	r0, [r6, #0]
 8000db0:	f507 7026 	add.w	r0, r7, #664	@ 0x298
 8000db4:	f5a0 7022 	sub.w	r0, r0, #648	@ 0x288
 8000db8:	6001      	str	r1, [r0, #0]
 8000dba:	f507 7126 	add.w	r1, r7, #664	@ 0x298
 8000dbe:	f5a1 7123 	sub.w	r1, r1, #652	@ 0x28c
 8000dc2:	600a      	str	r2, [r1, #0]
 8000dc4:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 8000dc8:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8000dcc:	6013      	str	r3, [r2, #0]
  FIL f;
  FRESULT fr;
  *channels = 0;
 8000dce:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000dd2:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	801a      	strh	r2, [r3, #0]
  *sr = 0;
 8000ddc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000de0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
  *bits = 0;
 8000dea:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000dee:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	801a      	strh	r2, [r3, #0]
  *duration_ms = 0;
 8000df8:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]

  fr = f_open(&f, wav_path, FA_READ | FA_OPEN_EXISTING);
 8000e00:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e04:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8000e08:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	f006 fd4c 	bl	80078ac <f_open>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f887 3293 	strb.w	r3, [r7, #659]	@ 0x293
  if (fr != FR_OK)
 8000e1a:	f897 3293 	ldrb.w	r3, [r7, #659]	@ 0x293
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <parse_wav_info+0x8c>
    return fr;
 8000e22:	f897 3293 	ldrb.w	r3, [r7, #659]	@ 0x293
 8000e26:	e1fd      	b.n	8001224 <parse_wav_info+0x488>

  // RIFF(4) + size(4) + WAVE(4)
  BYTE hdr[12];
  UINT br = 0;
 8000e28:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e2c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
  fr = f_read(&f, hdr, 12, &br);
 8000e34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e38:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000e3c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000e40:	220c      	movs	r2, #12
 8000e42:	f006 feed 	bl	8007c20 <f_read>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 3293 	strb.w	r3, [r7, #659]	@ 0x293
  if (fr != FR_OK || br != 12 || memcmp(hdr, "RIFF", 4) || memcmp(hdr + 8, "WAVE", 4))
 8000e4c:	f897 3293 	ldrb.w	r3, [r7, #659]	@ 0x293
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <parse_wav_info+0xf0>
 8000e54:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000e58:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b0c      	cmp	r3, #12
 8000e60:	d114      	bne.n	8000e8c <parse_wav_info+0xf0>
 8000e62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e66:	2204      	movs	r2, #4
 8000e68:	49af      	ldr	r1, [pc, #700]	@ (8001128 <parse_wav_info+0x38c>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fcfc 	bl	8008868 <memcmp>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10a      	bne.n	8000e8c <parse_wav_info+0xf0>
 8000e76:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	49ab      	ldr	r1, [pc, #684]	@ (800112c <parse_wav_info+0x390>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f007 fcf1 	bl	8008868 <memcmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <parse_wav_info+0xfe>
  {
    f_close(&f);
 8000e8c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e90:	4618      	mov	r0, r3
 8000e92:	f007 f882 	bl	8007f9a <f_close>
    return FR_INT_ERR;
 8000e96:	2302      	movs	r3, #2
 8000e98:	e1c4      	b.n	8001224 <parse_wav_info+0x488>
  }

  uint32_t data_size = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
  for (;;)
  {
    BYTE chdr[8];
    br = 0;
 8000ea0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000ea4:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
    fr = f_read(&f, chdr, 8, &br);
 8000eac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000eb0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000eb4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000eb8:	2208      	movs	r2, #8
 8000eba:	f006 feb1 	bl	8007c20 <f_read>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 3293 	strb.w	r3, [r7, #659]	@ 0x293
    if (fr != FR_OK)
 8000ec4:	f897 3293 	ldrb.w	r3, [r7, #659]	@ 0x293
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d007      	beq.n	8000edc <parse_wav_info+0x140>
    {
      f_close(&f);
 8000ecc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f007 f862 	bl	8007f9a <f_close>
      return fr;
 8000ed6:	f897 3293 	ldrb.w	r3, [r7, #659]	@ 0x293
 8000eda:	e1a3      	b.n	8001224 <parse_wav_info+0x488>
    }
    if (br != 8)
 8000edc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000ee0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d00e      	beq.n	8000f08 <parse_wav_info+0x16c>
    }
    if (sz & 1)
      f_lseek(&f, f_tell(&f) + 1);
  }

  f_close(&f);
 8000eea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 f853 	bl	8007f9a <f_close>
  if (*sr && *channels && *bits && data_size)
 8000ef4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000ef8:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 8119 	bne.w	8001138 <parse_wav_info+0x39c>
 8000f06:	e18c      	b.n	8001222 <parse_wav_info+0x486>
    uint32_t sz = chdr[4] | (chdr[5] << 8) | (chdr[6] << 16) | (chdr[7] << 24);
 8000f08:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f0c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8000f10:	791b      	ldrb	r3, [r3, #4]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f18:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8000f1c:	795b      	ldrb	r3, [r3, #5]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	431a      	orrs	r2, r3
 8000f22:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f26:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8000f2a:	799b      	ldrb	r3, [r3, #6]
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f34:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8000f38:	79db      	ldrb	r3, [r3, #7]
 8000f3a:	061b      	lsls	r3, r3, #24
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
    if (!memcmp(chdr, "fmt ", 4))
 8000f42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f46:	2204      	movs	r2, #4
 8000f48:	4979      	ldr	r1, [pc, #484]	@ (8001130 <parse_wav_info+0x394>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 fc8c 	bl	8008868 <memcmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 80a9 	bne.w	80010aa <parse_wav_info+0x30e>
      UINT toread = (sz > sizeof(fmt)) ? sizeof(fmt) : sz;
 8000f58:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8000f5c:	2b20      	cmp	r3, #32
 8000f5e:	bf28      	it	cs
 8000f60:	2320      	movcs	r3, #32
 8000f62:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
      fr = f_read(&f, fmt, toread, &br);
 8000f66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f6a:	f107 0118 	add.w	r1, r7, #24
 8000f6e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000f72:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8000f76:	f006 fe53 	bl	8007c20 <f_read>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 3293 	strb.w	r3, [r7, #659]	@ 0x293
      if (fr != FR_OK)
 8000f80:	f897 3293 	ldrb.w	r3, [r7, #659]	@ 0x293
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <parse_wav_info+0x1fc>
        f_close(&f);
 8000f88:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 f804 	bl	8007f9a <f_close>
        return fr;
 8000f92:	f897 3293 	ldrb.w	r3, [r7, #659]	@ 0x293
 8000f96:	e087      	b.n	80010a8 <parse_wav_info+0x30c>
      if (br < 16)
 8000f98:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000f9c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	d806      	bhi.n	8000fb4 <parse_wav_info+0x218>
        f_close(&f);
 8000fa6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000faa:	4618      	mov	r0, r3
 8000fac:	f006 fff5 	bl	8007f9a <f_close>
        return FR_INT_ERR;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e079      	b.n	80010a8 <parse_wav_info+0x30c>
      uint16_t audioFmt = fmt[0] | (fmt[1] << 8);
 8000fb4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000fb8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000fc4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	f8a7 3286 	strh.w	r3, [r7, #646]	@ 0x286
      *channels = fmt[2] | (fmt[3] << 8);
 8000fd8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000fdc:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000fe8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000fec:	78db      	ldrb	r3, [r3, #3]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000ffe:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	801a      	strh	r2, [r3, #0]
      *sr = fmt[4] | (fmt[5] << 8) | (fmt[6] << 16) | (fmt[7] << 24);
 8001006:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800100a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	461a      	mov	r2, r3
 8001012:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001016:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800101a:	795b      	ldrb	r3, [r3, #5]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	431a      	orrs	r2, r3
 8001020:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001024:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8001028:	799b      	ldrb	r3, [r3, #6]
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	431a      	orrs	r2, r3
 800102e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001032:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8001036:	79db      	ldrb	r3, [r3, #7]
 8001038:	061b      	lsls	r3, r3, #24
 800103a:	4313      	orrs	r3, r2
 800103c:	461a      	mov	r2, r3
 800103e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001042:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	601a      	str	r2, [r3, #0]
      *bits = fmt[14] | (fmt[15] << 8);
 800104a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800104e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8001052:	7b9b      	ldrb	r3, [r3, #14]
 8001054:	b21a      	sxth	r2, r3
 8001056:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800105a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800105e:	7bdb      	ldrb	r3, [r3, #15]
 8001060:	b21b      	sxth	r3, r3
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001070:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	801a      	strh	r2, [r3, #0]
      if (sz > toread)
 8001078:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 800107c:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8001080:	429a      	cmp	r2, r3
 8001082:	d93d      	bls.n	8001100 <parse_wav_info+0x364>
        f_lseek(&f, f_tell(&f) + (sz - toread));
 8001084:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001088:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	f8d7 128c 	ldr.w	r1, [r7, #652]	@ 0x28c
 8001092:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 8001096:	1acb      	subs	r3, r1, r3
 8001098:	441a      	add	r2, r3
 800109a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 ffa4 	bl	8007fee <f_lseek>
 80010a6:	e02b      	b.n	8001100 <parse_wav_info+0x364>
      return fr;
 80010a8:	e0bc      	b.n	8001224 <parse_wav_info+0x488>
    else if (!memcmp(chdr, "data", 4))
 80010aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010ae:	2204      	movs	r2, #4
 80010b0:	4920      	ldr	r1, [pc, #128]	@ (8001134 <parse_wav_info+0x398>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fbd8 	bl	8008868 <memcmp>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d112      	bne.n	80010e4 <parse_wav_info+0x348>
      data_size = sz;
 80010be:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80010c2:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
      f_lseek(&f, f_tell(&f) + sz);
 80010c6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80010ca:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80010d4:	441a      	add	r2, r3
 80010d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 ff86 	bl	8007fee <f_lseek>
 80010e2:	e00d      	b.n	8001100 <parse_wav_info+0x364>
      f_lseek(&f, f_tell(&f) + sz);
 80010e4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80010e8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80010f2:	441a      	add	r2, r3
 80010f4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 ff77 	bl	8007fee <f_lseek>
    if (sz & 1)
 8001100:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	f43f aec9 	beq.w	8000ea0 <parse_wav_info+0x104>
      f_lseek(&f, f_tell(&f) + 1);
 800110e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001112:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f006 ff64 	bl	8007fee <f_lseek>
  {
 8001126:	e6bb      	b.n	8000ea0 <parse_wav_info+0x104>
 8001128:	08009250 	.word	0x08009250
 800112c:	08009258 	.word	0x08009258
 8001130:	08009260 	.word	0x08009260
 8001134:	08009268 	.word	0x08009268
  if (*sr && *channels && *bits && data_size)
 8001138:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800113c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d06c      	beq.n	8001222 <parse_wav_info+0x486>
 8001148:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800114c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d064      	beq.n	8001222 <parse_wav_info+0x486>
 8001158:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800115c:	2b00      	cmp	r3, #0
 800115e:	d060      	beq.n	8001222 <parse_wav_info+0x486>
  {
    uint32_t bytes_per_sec = (*sr) * (*channels) * ((*bits) / 8);
 8001160:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001164:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 8001170:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	8812      	ldrh	r2, [r2, #0]
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 8001180:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	8812      	ldrh	r2, [r2, #0]
 8001188:	08d2      	lsrs	r2, r2, #3
 800118a:	b292      	uxth	r2, r2
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
    *duration_ms = (bytes_per_sec) ? (uint32_t)((1000ULL * data_size) / bytes_per_sec) : 0;
 8001194:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03c      	beq.n	8001216 <parse_wav_info+0x47a>
 800119c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80011a0:	2200      	movs	r2, #0
 80011a2:	4698      	mov	r8, r3
 80011a4:	4691      	mov	r9, r2
 80011a6:	4642      	mov	r2, r8
 80011a8:	464b      	mov	r3, r9
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	f04f 0100 	mov.w	r1, #0
 80011b2:	0159      	lsls	r1, r3, #5
 80011b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011b8:	0150      	lsls	r0, r2, #5
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	ebb2 0408 	subs.w	r4, r2, r8
 80011c2:	eb63 0509 	sbc.w	r5, r3, r9
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	00ab      	lsls	r3, r5, #2
 80011d0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80011d4:	00a2      	lsls	r2, r4, #2
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	eb14 0a08 	adds.w	sl, r4, r8
 80011de:	eb45 0b09 	adc.w	fp, r5, r9
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80011ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80011f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011f6:	4692      	mov	sl, r2
 80011f8:	469b      	mov	fp, r3
 80011fa:	4650      	mov	r0, sl
 80011fc:	4659      	mov	r1, fp
 80011fe:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8001202:	2200      	movs	r2, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800120c:	f7ff f848 	bl	80002a0 <__aeabi_uldivmod>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	e000      	b.n	8001218 <parse_wav_info+0x47c>
 8001216:	2200      	movs	r2, #0
 8001218:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 800121c:	601a      	str	r2, [r3, #0]
    return FR_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <parse_wav_info+0x488>
  }
  return FR_INT_ERR;
 8001222:	2302      	movs	r3, #2
}
 8001224:	4618      	mov	r0, r3
 8001226:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 800122a:	46bd      	mov	sp, r7
 800122c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 8001236:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f000 fd2d 	bl	8001c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f98e 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f7ff fab8 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001244:	f7ff fa98 	bl	8000778 <MX_DMA_Init>
  MX_TIM2_Init();
 8001248:	f000 fb08 	bl	800185c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800124c:	f000 fbfa 	bl	8001a44 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001250:	f004 fc7a 	bl	8005b48 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001254:	f000 f9da 	bl	800160c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001258:	f000 fc24 	bl	8001aa4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800125c:	f7ff fae8 	bl	8000830 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init(&hi2c2);
 8001260:	48ac      	ldr	r0, [pc, #688]	@ (8001514 <main+0x2e4>)
 8001262:	f7ff fa31 	bl	80006c8 <OLED_Init>

  myprintf("\r\n~ tsq + wav info reader ~\r\n");
 8001266:	48ac      	ldr	r0, [pc, #688]	@ (8001518 <main+0x2e8>)
 8001268:	f7ff fb7e 	bl	8000968 <myprintf>
  HAL_Delay(800);
 800126c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001270:	f000 fd86 	bl	8001d80 <HAL_Delay>

  FATFS FatFs;
  FRESULT fres;
  fres = f_mount(&FatFs, "0:", 1);
 8001274:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8001278:	2201      	movs	r2, #1
 800127a:	49a8      	ldr	r1, [pc, #672]	@ (800151c <main+0x2ec>)
 800127c:	4618      	mov	r0, r3
 800127e:	f006 facf 	bl	8007820 <f_mount>
 8001282:	4603      	mov	r3, r0
 8001284:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
  if (fres != FR_OK)
 8001288:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <main+0x70>
  {
    myprintf("f_mount error (%d)\r\n", (int)fres);
 8001290:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 8001294:	4619      	mov	r1, r3
 8001296:	48a2      	ldr	r0, [pc, #648]	@ (8001520 <main+0x2f0>)
 8001298:	f7ff fb66 	bl	8000968 <myprintf>
    while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <main+0x6c>
  }

  // 2) liat all the file .tsq
  DIR dir;
  FILINFO fno;
  fres = f_opendir(&dir, "0:/");
 80012a0:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80012a4:	499f      	ldr	r1, [pc, #636]	@ (8001524 <main+0x2f4>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 f8aa 	bl	8008400 <f_opendir>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
  if (fres != FR_OK)
 80012b2:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <main+0x9a>
  {
    myprintf("f_opendir error (%d)\r\n", (int)fres);
 80012ba:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 80012be:	4619      	mov	r1, r3
 80012c0:	4899      	ldr	r0, [pc, #612]	@ (8001528 <main+0x2f8>)
 80012c2:	f7ff fb51 	bl	8000968 <myprintf>
    while (1)
 80012c6:	bf00      	nop
 80012c8:	e7fd      	b.n	80012c6 <main+0x96>
      ;
  }

  myprintf("Scanning 0:/ for .tsq ...\r\n");
 80012ca:	4898      	ldr	r0, [pc, #608]	@ (800152c <main+0x2fc>)
 80012cc:	f7ff fb4c 	bl	8000968 <myprintf>
  for (;;)
  {
    fres = f_readdir(&dir, &fno);
 80012d0:	f507 72d2 	add.w	r2, r7, #420	@ 0x1a4
 80012d4:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 f929 	bl	8008532 <f_readdir>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
    if (fres != FR_OK)
 80012e6:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <main+0xcc>
    {
      myprintf("f_readdir error (%d)\r\n", (int)fres);
 80012ee:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 80012f2:	4619      	mov	r1, r3
 80012f4:	488e      	ldr	r0, [pc, #568]	@ (8001530 <main+0x300>)
 80012f6:	f7ff fb37 	bl	8000968 <myprintf>
      break;
 80012fa:	e0fe      	b.n	80014fa <main+0x2ca>
    }
    if (fno.fname[0] == 0)
 80012fc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001300:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001304:	7a5b      	ldrb	r3, [r3, #9]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80f6 	beq.w	80014f8 <main+0x2c8>
      break; // end of dir

    // if the file is a .tsq
    if (!(fno.fattrib & AM_DIR) && ends_with_case(fno.fname, ".tsq"))
 800130c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001310:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001314:	7a1b      	ldrb	r3, [r3, #8]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1d8      	bne.n	80012d0 <main+0xa0>
 800131e:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001322:	3309      	adds	r3, #9
 8001324:	4983      	ldr	r1, [pc, #524]	@ (8001534 <main+0x304>)
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb6a 	bl	8000a00 <ends_with_case>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ce      	beq.n	80012d0 <main+0xa0>
    {
      char tsq_path[128] = "0:/";
 8001332:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001336:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800133a:	4a7f      	ldr	r2, [pc, #508]	@ (8001538 <main+0x308>)
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	3304      	adds	r3, #4
 8001340:	227c      	movs	r2, #124	@ 0x7c
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f007 fab9 	bl	80088bc <memset>
      strncat(tsq_path, fno.fname, sizeof(tsq_path) - 4);
 800134a:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800134e:	f103 0109 	add.w	r1, r3, #9
 8001352:	463b      	mov	r3, r7
 8001354:	227c      	movs	r2, #124	@ 0x7c
 8001356:	4618      	mov	r0, r3
 8001358:	f007 fab8 	bl	80088cc <strncat>

      SongInfo si;
      FRESULT fr1 = parse_tsq_header(tsq_path, &si);
 800135c:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8001360:	463b      	mov	r3, r7
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fbb7 	bl	8000ad8 <parse_tsq_header>
 800136a:	4603      	mov	r3, r0
 800136c:	f887 3426 	strb.w	r3, [r7, #1062]	@ 0x426
      if (fr1 != FR_OK)
 8001370:	f897 3426 	ldrb.w	r3, [r7, #1062]	@ 0x426
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <main+0x158>
      {
        myprintf("TSQ parse fail (%d): %s\r\n", (int)fr1, tsq_path);
 8001378:	f897 3426 	ldrb.w	r3, [r7, #1062]	@ 0x426
 800137c:	463a      	mov	r2, r7
 800137e:	4619      	mov	r1, r3
 8001380:	486e      	ldr	r0, [pc, #440]	@ (800153c <main+0x30c>)
 8001382:	f7ff faf1 	bl	8000968 <myprintf>
 8001386:	e7a3      	b.n	80012d0 <main+0xa0>
        continue;
      }

      // print the song info
      myprintf("\r\n[Sequence]\r\n  File: %s\r\n  Name: %s\r\n  Artist: %s\r\n  BPM: %d\r\n  Difficulty: %s\r\n  Offset: %d ms\r\n",
               tsq_path, si.name[0] ? si.name : "(N/A)", si.artist[0] ? si.artist : "(N/A)",
 8001388:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800138c:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001390:	781b      	ldrb	r3, [r3, #0]
      myprintf("\r\n[Sequence]\r\n  File: %s\r\n  Name: %s\r\n  Artist: %s\r\n  BPM: %d\r\n  Difficulty: %s\r\n  Offset: %d ms\r\n",
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <main+0x16c>
 8001396:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 800139a:	e000      	b.n	800139e <main+0x16e>
 800139c:	4a68      	ldr	r2, [pc, #416]	@ (8001540 <main+0x310>)
               tsq_path, si.name[0] ? si.name : "(N/A)", si.artist[0] ? si.artist : "(N/A)",
 800139e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013a2:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80013a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
      myprintf("\r\n[Sequence]\r\n  File: %s\r\n  Name: %s\r\n  Artist: %s\r\n  BPM: %d\r\n  Difficulty: %s\r\n  Offset: %d ms\r\n",
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <main+0x186>
 80013ae:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80013b2:	3341      	adds	r3, #65	@ 0x41
 80013b4:	e000      	b.n	80013b8 <main+0x188>
 80013b6:	4b62      	ldr	r3, [pc, #392]	@ (8001540 <main+0x310>)
 80013b8:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 80013bc:	f5a1 714a 	sub.w	r1, r1, #808	@ 0x328
 80013c0:	f8d1 1084 	ldr.w	r1, [r1, #132]	@ 0x84
 80013c4:	f507 6085 	add.w	r0, r7, #1064	@ 0x428
 80013c8:	f5a0 704a 	sub.w	r0, r0, #808	@ 0x328
 80013cc:	f8d0 0094 	ldr.w	r0, [r0, #148]	@ 0x94
 80013d0:	463c      	mov	r4, r7
 80013d2:	9002      	str	r0, [sp, #8]
 80013d4:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 80013d8:	3088      	adds	r0, #136	@ 0x88
 80013da:	9001      	str	r0, [sp, #4]
 80013dc:	9100      	str	r1, [sp, #0]
 80013de:	4621      	mov	r1, r4
 80013e0:	4858      	ldr	r0, [pc, #352]	@ (8001544 <main+0x314>)
 80013e2:	f7ff fac1 	bl	8000968 <myprintf>
               si.bpm, si.difficulty, si.offset_ms);

      // 3) wav info
      char wav_path[128];
      strncpy(wav_path, tsq_path, sizeof(wav_path) - 1);
 80013e6:	4639      	mov	r1, r7
 80013e8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80013ec:	227f      	movs	r2, #127	@ 0x7f
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fa91 	bl	8008916 <strncpy>
      wav_path[sizeof(wav_path) - 1] = 0;
 80013f4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013f8:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
      replace_ext(wav_path, ".wav");
 8001402:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001406:	4950      	ldr	r1, [pc, #320]	@ (8001548 <main+0x318>)
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fb41 	bl	8000a90 <replace_ext>
      uint16_t ch = 0, bits = 0;
 800140e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001412:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 8001416:	2200      	movs	r2, #0
 8001418:	801a      	strh	r2, [r3, #0]
 800141a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800141e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001422:	2200      	movs	r2, #0
 8001424:	801a      	strh	r2, [r3, #0]
      uint32_t sr = 0, dur_ms = 0;
 8001426:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800142a:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001436:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
      FRESULT fr2 = parse_wav_info(wav_path, &ch, &sr, &bits, &dur_ms);
 800143e:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8001442:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8001446:	f507 71d1 	add.w	r1, r7, #418	@ 0x1a2
 800144a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800144e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4623      	mov	r3, r4
 8001456:	f7ff fca1 	bl	8000d9c <parse_wav_info>
 800145a:	4603      	mov	r3, r0
 800145c:	f887 3425 	strb.w	r3, [r7, #1061]	@ 0x425
      if (fr2 == FR_OK)
 8001460:	f897 3425 	ldrb.w	r3, [r7, #1061]	@ 0x425
 8001464:	2b00      	cmp	r3, #0
 8001466:	d13e      	bne.n	80014e6 <main+0x2b6>
      {
        uint32_t mm = dur_ms / 60000U;
 8001468:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800146c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a36      	ldr	r2, [pc, #216]	@ (800154c <main+0x31c>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	0b9b      	lsrs	r3, r3, #14
 800147a:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
        uint32_t ss = (dur_ms % 60000U) / 1000U;
 800147e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001482:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b30      	ldr	r3, [pc, #192]	@ (800154c <main+0x31c>)
 800148a:	fba3 1302 	umull	r1, r3, r3, r2
 800148e:	0b9b      	lsrs	r3, r3, #14
 8001490:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	4a2d      	ldr	r2, [pc, #180]	@ (8001550 <main+0x320>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
        myprintf("[Audio]\r\n  File: %s\r\n  %u ch, %lu Hz, %u-bit\r\n  Length: %02lu:%02lu\r\n",
 80014a6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014aa:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	461c      	mov	r4, r3
 80014b2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014b6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014c0:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80014cc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	9000      	str	r0, [sp, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	4622      	mov	r2, r4
 80014de:	481d      	ldr	r0, [pc, #116]	@ (8001554 <main+0x324>)
 80014e0:	f7ff fa42 	bl	8000968 <myprintf>
 80014e4:	e6f4      	b.n	80012d0 <main+0xa0>
                 wav_path, (unsigned)ch, (unsigned long)sr, (unsigned)bits,
                 (unsigned long)mm, (unsigned long)ss);
      }
      else
      {
        myprintf("[Audio]\r\n  File: %s\r\n  open/parse failed (%d)\r\n", wav_path, (int)fr2);
 80014e6:	f897 2425 	ldrb.w	r2, [r7, #1061]	@ 0x425
 80014ea:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014ee:	4619      	mov	r1, r3
 80014f0:	4819      	ldr	r0, [pc, #100]	@ (8001558 <main+0x328>)
 80014f2:	f7ff fa39 	bl	8000968 <myprintf>
    fres = f_readdir(&dir, &fno);
 80014f6:	e6eb      	b.n	80012d0 <main+0xa0>
      break; // end of dir
 80014f8:	bf00      	nop
      }
    }
  }
  f_closedir(&dir);
 80014fa:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fff1 	bl	80084e6 <f_closedir>

  // 4) unmount the filesystem
  f_mount(NULL, "0:", 0);
 8001504:	2200      	movs	r2, #0
 8001506:	4905      	ldr	r1, [pc, #20]	@ (800151c <main+0x2ec>)
 8001508:	2000      	movs	r0, #0
 800150a:	f006 f989 	bl	8007820 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800150e:	bf00      	nop
 8001510:	e7fd      	b.n	800150e <main+0x2de>
 8001512:	bf00      	nop
 8001514:	20000090 	.word	0x20000090
 8001518:	08009270 	.word	0x08009270
 800151c:	08009290 	.word	0x08009290
 8001520:	08009294 	.word	0x08009294
 8001524:	080092ac 	.word	0x080092ac
 8001528:	080092b0 	.word	0x080092b0
 800152c:	080092c8 	.word	0x080092c8
 8001530:	080092e4 	.word	0x080092e4
 8001534:	080092fc 	.word	0x080092fc
 8001538:	002f3a30 	.word	0x002f3a30
 800153c:	08009304 	.word	0x08009304
 8001540:	08009320 	.word	0x08009320
 8001544:	08009328 	.word	0x08009328
 8001548:	0800938c 	.word	0x0800938c
 800154c:	45e7b273 	.word	0x45e7b273
 8001550:	10624dd3 	.word	0x10624dd3
 8001554:	08009394 	.word	0x08009394
 8001558:	080093dc 	.word	0x080093dc

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b096      	sub	sp, #88	@ 0x58
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2244      	movs	r2, #68	@ 0x44
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f007 f9a6 	bl	80088bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800157e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001582:	f001 fca1 	bl	8002ec8 <HAL_PWREx_ControlVoltageScaling>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800158c:	f000 f838 	bl	8001600 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001590:	2310      	movs	r3, #16
 8001592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800159c:	2360      	movs	r3, #96	@ 0x60
 800159e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015ac:	2328      	movs	r3, #40	@ 0x28
 80015ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015b0:	2307      	movs	r3, #7
 80015b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fcd7 	bl	8002f74 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015cc:	f000 f818 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	2303      	movs	r3, #3
 80015d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	2104      	movs	r1, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 f8d7 	bl	800379c <HAL_RCC_ClockConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015f4:	f000 f804 	bl	8001600 <Error_Handler>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3758      	adds	r7, #88	@ 0x58
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <Error_Handler+0x8>

0800160c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <MX_SPI2_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001618:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800161c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001626:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800162a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_SPI2_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_SPI2_Init+0x74>)
 800163a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001642:	2230      	movs	r2, #48	@ 0x30
 8001644:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_SPI2_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_SPI2_Init+0x74>)
 800165a:	2207      	movs	r2, #7
 800165c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_SPI2_Init+0x74>)
 8001666:	2208      	movs	r2, #8
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_SPI2_Init+0x74>)
 800166c:	f002 fdf6 	bl	800425c <HAL_SPI_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001676:	f7ff ffc3 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001e4 	.word	0x200001e4
 8001684:	40003800 	.word	0x40003800

08001688 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <HAL_SPI_MspInit+0x7c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d128      	bne.n	80016fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <HAL_SPI_MspInit+0x80>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <HAL_SPI_MspInit+0x80>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <HAL_SPI_MspInit+0x80>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_SPI_MspInit+0x80>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <HAL_SPI_MspInit+0x80>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <HAL_SPI_MspInit+0x80>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016da:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ec:	2305      	movs	r3, #5
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <HAL_SPI_MspInit+0x84>)
 80016f8:	f000 fde0 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40003800 	.word	0x40003800
 8001708:	40021000 	.word	0x40021000
 800170c:	48000400 	.word	0x48000400

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_MspInit+0x44>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_MspInit+0x44>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6613      	str	r3, [r2, #96]	@ 0x60
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x44>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_MspInit+0x44>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6593      	str	r3, [r2, #88]	@ 0x58
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 fac7 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <DMA1_Channel5_IRQHandler+0x10>)
 80017be:	f000 fccd 	bl	800215c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000298 	.word	0x20000298

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f007 f89e 	bl	800893c <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000c000 	.word	0x2000c000
 800182c:	00000400 	.word	0x00000400
 8001830:	20000248 	.word	0x20000248
 8001834:	20000578 	.word	0x20000578

08001838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <SystemInit+0x20>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <SystemInit+0x20>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	@ 0x38
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187c:	463b      	mov	r3, r7
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800188e:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <MX_TIM2_Init+0xe8>)
 8001890:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001894:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001896:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <MX_TIM2_Init+0xe8>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b29      	ldr	r3, [pc, #164]	@ (8001944 <MX_TIM2_Init+0xe8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21;
 80018a2:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <MX_TIM2_Init+0xe8>)
 80018a4:	2215      	movs	r2, #21
 80018a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b26      	ldr	r3, [pc, #152]	@ (8001944 <MX_TIM2_Init+0xe8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <MX_TIM2_Init+0xe8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018b4:	4823      	ldr	r0, [pc, #140]	@ (8001944 <MX_TIM2_Init+0xe8>)
 80018b6:	f002 fd74 	bl	80043a2 <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018c0:	f7ff fe9e 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ce:	4619      	mov	r1, r3
 80018d0:	481c      	ldr	r0, [pc, #112]	@ (8001944 <MX_TIM2_Init+0xe8>)
 80018d2:	f002 ff33 	bl	800473c <HAL_TIM_ConfigClockSource>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018dc:	f7ff fe90 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018e0:	4818      	ldr	r0, [pc, #96]	@ (8001944 <MX_TIM2_Init+0xe8>)
 80018e2:	f002 fdb5 	bl	8004450 <HAL_TIM_PWM_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018ec:	f7ff fe88 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4811      	ldr	r0, [pc, #68]	@ (8001944 <MX_TIM2_Init+0xe8>)
 8001900:	f003 fb6e 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800190a:	f7ff fe79 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190e:	2360      	movs	r3, #96	@ 0x60
 8001910:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 14;
 8001912:	230e      	movs	r3, #14
 8001914:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	4807      	ldr	r0, [pc, #28]	@ (8001944 <MX_TIM2_Init+0xe8>)
 8001926:	f002 fdf5 	bl	8004514 <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001930:	f7ff fe66 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001934:	4803      	ldr	r0, [pc, #12]	@ (8001944 <MX_TIM2_Init+0xe8>)
 8001936:	f000 f851 	bl	80019dc <HAL_TIM_MspPostInit>

}
 800193a:	bf00      	nop
 800193c:	3738      	adds	r7, #56	@ 0x38
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000024c 	.word	0x2000024c

08001948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001958:	d136      	bne.n	80019c8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_TIM_Base_MspInit+0x88>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195e:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <HAL_TIM_Base_MspInit+0x88>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6593      	str	r3, [r2, #88]	@ 0x58
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_TIM_Base_MspInit+0x88>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001974:	4a18      	ldr	r2, [pc, #96]	@ (80019d8 <HAL_TIM_Base_MspInit+0x90>)
 8001976:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 800197a:	2204      	movs	r2, #4
 800197c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001980:	2210      	movs	r2, #16
 8001982:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 800198c:	2280      	movs	r2, #128	@ 0x80
 800198e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001996:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 800199a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800199e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80019ac:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 80019ae:	f000 fb1d 	bl	8001fec <HAL_DMA_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80019b8:	f7ff fe22 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80019c2:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <HAL_TIM_Base_MspInit+0x8c>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	20000298 	.word	0x20000298
 80019d8:	40020058 	.word	0x40020058

080019dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019fc:	d11c      	bne.n	8001a38 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_TIM_MspPostInit+0x64>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <HAL_TIM_MspPostInit+0x64>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <HAL_TIM_MspPostInit+0x64>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a16:	2301      	movs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a34:	f000 fc42 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a4a:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <MX_USART1_UART_Init+0x5c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <MX_USART1_UART_Init+0x58>)
 8001a88:	f003 fb10 	bl	80050ac <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a92:	f7ff fdb5 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002e0 	.word	0x200002e0
 8001aa0:	40013800 	.word	0x40013800

08001aa4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001aaa:	4a15      	ldr	r2, [pc, #84]	@ (8001b00 <MX_USART2_UART_Init+0x5c>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_USART2_UART_Init+0x58>)
 8001ae8:	f003 fae0 	bl	80050ac <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001af2:	f7ff fd85 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000368 	.word	0x20000368
 8001b00:	40004400 	.word	0x40004400

08001b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0a4      	sub	sp, #144	@ 0x90
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2260      	movs	r2, #96	@ 0x60
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f006 fec9 	bl	80088bc <memset>
  if(uartHandle->Instance==USART1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a42      	ldr	r2, [pc, #264]	@ (8001c38 <HAL_UART_MspInit+0x134>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d13c      	bne.n	8001bae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 f84f 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b4c:	f7ff fd58 	bl	8001600 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b50:	4b3a      	ldr	r3, [pc, #232]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b54:	4a39      	ldr	r2, [pc, #228]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b5c:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6c:	4a33      	ldr	r2, [pc, #204]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b80:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b98:	2307      	movs	r3, #7
 8001b9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba8:	f000 fb88 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bac:	e03f      	b.n	8001c2e <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a23      	ldr	r2, [pc, #140]	@ (8001c40 <HAL_UART_MspInit+0x13c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d13a      	bne.n	8001c2e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 f80d 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001bd0:	f7ff fd16 	bl	8001600 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be0:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf0:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_UART_MspInit+0x138>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c04:	230c      	movs	r3, #12
 8001c06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2a:	f000 fb47 	bl	80022bc <HAL_GPIO_Init>
}
 8001c2e:	bf00      	nop
 8001c30:	3790      	adds	r7, #144	@ 0x90
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40004400 	.word	0x40004400

08001c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c48:	f7ff fdf6 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c4e:	490d      	ldr	r1, [pc, #52]	@ (8001c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <LoopForever+0xe>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c64:	4c0a      	ldr	r4, [pc, #40]	@ (8001c90 <LoopForever+0x16>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f006 fe69 	bl	8008948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c76:	f7ff fadb 	bl	8001230 <main>

08001c7a <LoopForever>:

LoopForever:
    b LoopForever
 8001c7a:	e7fe      	b.n	8001c7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c7c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c88:	0800965c 	.word	0x0800965c
  ldr r2, =_sbss
 8001c8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c90:	20000578 	.word	0x20000578

08001c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC1_IRQHandler>

08001c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 f961 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f80e 	bl	8001cc8 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	e001      	b.n	8001cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb8:	f7ff fd2a 	bl	8001710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_InitTick+0x6c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cdc:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_InitTick+0x70>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_InitTick+0x6c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f96d 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10f      	bne.n	8001d1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d809      	bhi.n	8001d18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d0c:	f000 f937 	bl	8001f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d10:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <HAL_InitTick+0x74>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e004      	b.n	8001d28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e001      	b.n	8001d28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	200003f0 	.word	0x200003f0

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200003f0 	.word	0x200003f0

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	@ (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	@ (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e098      	b.n	8002130 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4b4d      	ldr	r3, [pc, #308]	@ (800213c <HAL_DMA_Init+0x150>)
 8002006:	429a      	cmp	r2, r3
 8002008:	d80f      	bhi.n	800202a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <HAL_DMA_Init+0x154>)
 8002012:	4413      	add	r3, r2
 8002014:	4a4b      	ldr	r2, [pc, #300]	@ (8002144 <HAL_DMA_Init+0x158>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	009a      	lsls	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a48      	ldr	r2, [pc, #288]	@ (8002148 <HAL_DMA_Init+0x15c>)
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40
 8002028:	e00e      	b.n	8002048 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	4b46      	ldr	r3, [pc, #280]	@ (800214c <HAL_DMA_Init+0x160>)
 8002032:	4413      	add	r3, r2
 8002034:	4a43      	ldr	r2, [pc, #268]	@ (8002144 <HAL_DMA_Init+0x158>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	009a      	lsls	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <HAL_DMA_Init+0x164>)
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800205e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002062:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800206c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020a2:	d039      	beq.n	8002118 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a27      	ldr	r2, [pc, #156]	@ (8002148 <HAL_DMA_Init+0x15c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d11a      	bne.n	80020e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020ae:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <HAL_DMA_Init+0x168>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	f003 031c 	and.w	r3, r3, #28
 80020ba:	210f      	movs	r1, #15
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4924      	ldr	r1, [pc, #144]	@ (8002154 <HAL_DMA_Init+0x168>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020c8:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <HAL_DMA_Init+0x168>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	f003 031c 	and.w	r3, r3, #28
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	491d      	ldr	r1, [pc, #116]	@ (8002154 <HAL_DMA_Init+0x168>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
 80020e2:	e019      	b.n	8002118 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <HAL_DMA_Init+0x16c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	f003 031c 	and.w	r3, r3, #28
 80020f0:	210f      	movs	r1, #15
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4917      	ldr	r1, [pc, #92]	@ (8002158 <HAL_DMA_Init+0x16c>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_DMA_Init+0x16c>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	f003 031c 	and.w	r3, r3, #28
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	4911      	ldr	r1, [pc, #68]	@ (8002158 <HAL_DMA_Init+0x16c>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40020407 	.word	0x40020407
 8002140:	bffdfff8 	.word	0xbffdfff8
 8002144:	cccccccd 	.word	0xcccccccd
 8002148:	40020000 	.word	0x40020000
 800214c:	bffdfbf8 	.word	0xbffdfbf8
 8002150:	40020400 	.word	0x40020400
 8002154:	400200a8 	.word	0x400200a8
 8002158:	400204a8 	.word	0x400204a8

0800215c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002178:	f003 031c 	and.w	r3, r3, #28
 800217c:	2204      	movs	r2, #4
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d026      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x7a>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d021      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	f003 021c 	and.w	r2, r3, #28
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	2104      	movs	r1, #4
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d071      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021d4:	e06c      	b.n	80022b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f003 031c 	and.w	r3, r3, #28
 80021de:	2202      	movs	r2, #2
 80021e0:	409a      	lsls	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d02e      	beq.n	8002248 <HAL_DMA_IRQHandler+0xec>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d029      	beq.n	8002248 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10b      	bne.n	800221a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 020a 	bic.w	r2, r2, #10
 8002210:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f003 021c 	and.w	r2, r3, #28
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2102      	movs	r1, #2
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d038      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002246:	e033      	b.n	80022b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	f003 031c 	and.w	r3, r3, #28
 8002250:	2208      	movs	r2, #8
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02a      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x156>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d025      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 020e 	bic.w	r2, r2, #14
 8002274:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f003 021c 	and.w	r2, r3, #28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
}
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	e154      	b.n	8002576 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8146 	beq.w	8002570 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d005      	beq.n	80022fc <HAL_GPIO_Init+0x40>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d130      	bne.n	800235e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002332:	2201      	movs	r2, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0201 	and.w	r2, r3, #1
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b03      	cmp	r3, #3
 8002368:	d017      	beq.n	800239a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d123      	bne.n	80023ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	08da      	lsrs	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3208      	adds	r2, #8
 80023ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	6939      	ldr	r1, [r7, #16]
 80023ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0203 	and.w	r2, r3, #3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80a0 	beq.w	8002570 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002430:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_GPIO_Init+0x2d8>)
 8002432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002434:	4a57      	ldr	r2, [pc, #348]	@ (8002594 <HAL_GPIO_Init+0x2d8>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6613      	str	r3, [r2, #96]	@ 0x60
 800243c:	4b55      	ldr	r3, [pc, #340]	@ (8002594 <HAL_GPIO_Init+0x2d8>)
 800243e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002448:	4a53      	ldr	r2, [pc, #332]	@ (8002598 <HAL_GPIO_Init+0x2dc>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002472:	d019      	beq.n	80024a8 <HAL_GPIO_Init+0x1ec>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a49      	ldr	r2, [pc, #292]	@ (800259c <HAL_GPIO_Init+0x2e0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d013      	beq.n	80024a4 <HAL_GPIO_Init+0x1e8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a48      	ldr	r2, [pc, #288]	@ (80025a0 <HAL_GPIO_Init+0x2e4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00d      	beq.n	80024a0 <HAL_GPIO_Init+0x1e4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a47      	ldr	r2, [pc, #284]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d007      	beq.n	800249c <HAL_GPIO_Init+0x1e0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a46      	ldr	r2, [pc, #280]	@ (80025a8 <HAL_GPIO_Init+0x2ec>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_GPIO_Init+0x1dc>
 8002494:	2304      	movs	r3, #4
 8002496:	e008      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 8002498:	2307      	movs	r3, #7
 800249a:	e006      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 800249c:	2303      	movs	r3, #3
 800249e:	e004      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a8:	2300      	movs	r3, #0
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ba:	4937      	ldr	r1, [pc, #220]	@ (8002598 <HAL_GPIO_Init+0x2dc>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024c8:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024ec:	4a2f      	ldr	r2, [pc, #188]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024f2:	4b2e      	ldr	r3, [pc, #184]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002516:	4a25      	ldr	r2, [pc, #148]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800251c:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002540:	4a1a      	ldr	r2, [pc, #104]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002546:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800256a:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f aea3 	bne.w	80022cc <HAL_GPIO_Init+0x10>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40021000 	.word	0x40021000
 8002598:	40010000 	.word	0x40010000
 800259c:	48000400 	.word	0x48000400
 80025a0:	48000800 	.word	0x48000800
 80025a4:	48000c00 	.word	0x48000c00
 80025a8:	48001000 	.word	0x48001000
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
 80025bc:	4613      	mov	r3, r2
 80025be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c0:	787b      	ldrb	r3, [r7, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e08d      	b.n	800270e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe f952 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	@ 0x24
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002630:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002640:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e006      	b.n	8002668 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002666:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d108      	bne.n	8002682 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	e007      	b.n	8002692 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69d9      	ldr	r1, [r3, #28]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	461a      	mov	r2, r3
 8002724:	460b      	mov	r3, r1
 8002726:	817b      	strh	r3, [r7, #10]
 8002728:	4613      	mov	r3, r2
 800272a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b20      	cmp	r3, #32
 8002736:	f040 80fd 	bne.w	8002934 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2C_Master_Transmit+0x30>
 8002744:	2302      	movs	r3, #2
 8002746:	e0f6      	b.n	8002936 <HAL_I2C_Master_Transmit+0x21e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002750:	f7ff fb0a 	bl	8001d68 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2319      	movs	r3, #25
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f914 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0e1      	b.n	8002936 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2221      	movs	r2, #33	@ 0x21
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2210      	movs	r2, #16
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2bff      	cmp	r3, #255	@ 0xff
 80027a2:	d906      	bls.n	80027b2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	22ff      	movs	r2, #255	@ 0xff
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80027aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e007      	b.n	80027c2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80027bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027c0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d024      	beq.n	8002814 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	3301      	adds	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	4b4e      	ldr	r3, [pc, #312]	@ (8002940 <HAL_I2C_Master_Transmit+0x228>)
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fa83 	bl	8002d18 <I2C_TransferConfig>
 8002812:	e066      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	b2da      	uxtb	r2, r3
 800281a:	8979      	ldrh	r1, [r7, #10]
 800281c:	4b48      	ldr	r3, [pc, #288]	@ (8002940 <HAL_I2C_Master_Transmit+0x228>)
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fa78 	bl	8002d18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002828:	e05b      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f907 	bl	8002a42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07b      	b.n	8002936 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d034      	beq.n	80028e2 <HAL_I2C_Master_Transmit+0x1ca>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d130      	bne.n	80028e2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	2200      	movs	r2, #0
 8002888:	2180      	movs	r1, #128	@ 0x80
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f880 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e04d      	b.n	8002936 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2bff      	cmp	r3, #255	@ 0xff
 80028a2:	d90e      	bls.n	80028c2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	22ff      	movs	r2, #255	@ 0xff
 80028a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	8979      	ldrh	r1, [r7, #10]
 80028b2:	2300      	movs	r3, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fa2c 	bl	8002d18 <I2C_TransferConfig>
 80028c0:	e00f      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	2300      	movs	r3, #0
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa1b 	bl	8002d18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d19e      	bne.n	800282a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	6a39      	ldr	r1, [r7, #32]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f8ed 	bl	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e01a      	b.n	8002936 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2220      	movs	r2, #32
 8002906:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <HAL_I2C_Master_Transmit+0x22c>)
 8002914:	400b      	ands	r3, r1
 8002916:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	80002000 	.word	0x80002000
 8002944:	fe00e800 	.word	0xfe00e800

08002948 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d103      	bne.n	8002966 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d007      	beq.n	8002984 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	619a      	str	r2, [r3, #24]
  }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a0:	e03b      	b.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8d6 	bl	8002b58 <I2C_IsErrorOccurred>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029bc:	d02d      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7ff f9d3 	bl	8001d68 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d122      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d113      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d0b4      	beq.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a4e:	e033      	b.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f87f 	bl	8002b58 <I2C_IsErrorOccurred>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e031      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a6a:	d025      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7ff f97c 	bl	8001d68 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11a      	bne.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d013      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d1c4      	bne.n	8002a50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002adc:	e02f      	b.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f838 	bl	8002b58 <I2C_IsErrorOccurred>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e02d      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7ff f939 	bl	8001d68 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11a      	bne.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d013      	beq.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e007      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d1c8      	bne.n	8002ade <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	@ 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d068      	beq.n	8002c56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b8c:	e049      	b.n	8002c22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b94:	d045      	beq.n	8002c22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7ff f8e7 	bl	8001d68 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_IsErrorOccurred+0x54>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d13a      	bne.n	8002c22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bce:	d121      	bne.n	8002c14 <I2C_IsErrorOccurred+0xbc>
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bd6:	d01d      	beq.n	8002c14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d01a      	beq.n	8002c14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bee:	f7ff f8bb 	bl	8001d68 <HAL_GetTick>
 8002bf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf4:	e00e      	b.n	8002c14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bf6:	f7ff f8b7 	bl	8001d68 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b19      	cmp	r3, #25
 8002c02:	d907      	bls.n	8002c14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	f043 0320 	orr.w	r3, r3, #32
 8002c0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c12:	e006      	b.n	8002c22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d1e9      	bne.n	8002bf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d003      	beq.n	8002c38 <I2C_IsErrorOccurred+0xe0>
 8002c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0aa      	beq.n	8002b8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d103      	bne.n	8002c48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2220      	movs	r2, #32
 8002c46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01c      	beq.n	8002d06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff fe3b 	bl	8002948 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <I2C_IsErrorOccurred+0x1bc>)
 8002cde:	400b      	ands	r3, r1
 8002ce0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3728      	adds	r7, #40	@ 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	fe00e800 	.word	0xfe00e800

08002d18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	4613      	mov	r3, r2
 8002d28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d30:	7a7b      	ldrb	r3, [r7, #9]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	0d5b      	lsrs	r3, r3, #21
 8002d52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <I2C_TransferConfig+0x60>)
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	ea02 0103 	and.w	r1, r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	03ff63ff 	.word	0x03ff63ff

08002d7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d138      	bne.n	8002e04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e032      	b.n	8002e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	@ 0x24
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d139      	bne.n	8002e9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e033      	b.n	8002e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2224      	movs	r2, #36	@ 0x24
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40007000 	.word	0x40007000

08002ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed6:	d130      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed8:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee4:	d038      	beq.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee6:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002eee:	4a1e      	ldr	r2, [pc, #120]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2232      	movs	r2, #50	@ 0x32
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	3301      	adds	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0c:	e002      	b.n	8002f14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f14:	4b14      	ldr	r3, [pc, #80]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f20:	d102      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f2      	bne.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f34:	d110      	bne.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00f      	b.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d007      	beq.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f48:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f50:	4a05      	ldr	r2, [pc, #20]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	431bde83 	.word	0x431bde83

08002f74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f000 bc02 	b.w	800378c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f88:	4b96      	ldr	r3, [pc, #600]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f92:	4b94      	ldr	r3, [pc, #592]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80e4 	beq.w	8003172 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4c>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	f040 808b 	bne.w	80030ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 8087 	bne.w	80030ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc0:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x64>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e3d9      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	4b81      	ldr	r3, [pc, #516]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x7e>
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff0:	e005      	b.n	8002ffe <HAL_RCC_OscConfig+0x8a>
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d223      	bcs.n	800304a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fd8c 	bl	8003b24 <RCC_SetFlashLatencyFromMSIRange>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e3ba      	b.n	800378c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003016:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a72      	ldr	r2, [pc, #456]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b70      	ldr	r3, [pc, #448]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	496d      	ldr	r1, [pc, #436]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003034:	4b6b      	ldr	r3, [pc, #428]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	4968      	ldr	r1, [pc, #416]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e025      	b.n	8003096 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304a:	4b66      	ldr	r3, [pc, #408]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a65      	ldr	r2, [pc, #404]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b63      	ldr	r3, [pc, #396]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4960      	ldr	r1, [pc, #384]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003068:	4b5e      	ldr	r3, [pc, #376]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	495b      	ldr	r1, [pc, #364]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd4c 	bl	8003b24 <RCC_SetFlashLatencyFromMSIRange>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e37a      	b.n	800378c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003096:	f000 fc81 	bl	800399c <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b51      	ldr	r3, [pc, #324]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4950      	ldr	r1, [pc, #320]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <HAL_RCC_OscConfig+0x278>)
 80030b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030b6:	4b4e      	ldr	r3, [pc, #312]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fe04 	bl	8001cc8 <HAL_InitTick>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d052      	beq.n	8003170 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	e35e      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d032      	beq.n	800313c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030d6:	4b43      	ldr	r3, [pc, #268]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e2:	f7fe fe41 	bl	8001d68 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ea:	f7fe fe3d 	bl	8001d68 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e347      	b.n	800378c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fc:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a35      	ldr	r2, [pc, #212]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800310e:	f043 0308 	orr.w	r3, r3, #8
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b33      	ldr	r3, [pc, #204]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4930      	ldr	r1, [pc, #192]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003126:	4b2f      	ldr	r3, [pc, #188]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	492b      	ldr	r1, [pc, #172]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
 800313a:	e01a      	b.n	8003172 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800313c:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a28      	ldr	r2, [pc, #160]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003148:	f7fe fe0e 	bl	8001d68 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003150:	f7fe fe0a 	bl	8001d68 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e314      	b.n	800378c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003162:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1dc>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d073      	beq.n	8003266 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d005      	beq.n	8003190 <HAL_RCC_OscConfig+0x21c>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d10e      	bne.n	80031a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d063      	beq.n	8003264 <HAL_RCC_OscConfig+0x2f0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d15f      	bne.n	8003264 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e2f1      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x24c>
 80031b2:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a0b      	ldr	r2, [pc, #44]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e025      	b.n	800320c <HAL_RCC_OscConfig+0x298>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c8:	d114      	bne.n	80031f4 <HAL_RCC_OscConfig+0x280>
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a02      	ldr	r2, [pc, #8]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e013      	b.n	800320c <HAL_RCC_OscConfig+0x298>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08009450 	.word	0x08009450
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000004 	.word	0x20000004
 80031f4:	4ba0      	ldr	r3, [pc, #640]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a9f      	ldr	r2, [pc, #636]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b9d      	ldr	r3, [pc, #628]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a9c      	ldr	r2, [pc, #624]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fda8 	bl	8001d68 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fda4 	bl	8001d68 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2ae      	b.n	800378c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322e:	4b92      	ldr	r3, [pc, #584]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x2a8>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fd94 	bl	8001d68 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fd90 	bl	8001d68 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e29a      	b.n	800378c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x2d0>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d060      	beq.n	8003334 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d005      	beq.n	8003284 <HAL_RCC_OscConfig+0x310>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d119      	bne.n	80032b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d116      	bne.n	80032b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003284:	4b7c      	ldr	r3, [pc, #496]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x328>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e277      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b76      	ldr	r3, [pc, #472]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	4973      	ldr	r1, [pc, #460]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b0:	e040      	b.n	8003334 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d023      	beq.n	8003302 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6e      	ldr	r2, [pc, #440]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe fd4f 	bl	8001d68 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe fd4b 	bl	8001d68 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e255      	b.n	800378c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b65      	ldr	r3, [pc, #404]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b62      	ldr	r3, [pc, #392]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	495f      	ldr	r1, [pc, #380]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
 8003300:	e018      	b.n	8003334 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b5d      	ldr	r3, [pc, #372]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5c      	ldr	r2, [pc, #368]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fd2b 	bl	8001d68 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7fe fd27 	bl	8001d68 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e231      	b.n	800378c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003328:	4b53      	ldr	r3, [pc, #332]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d03c      	beq.n	80033ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003348:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334e:	4a4a      	ldr	r2, [pc, #296]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe fd06 	bl	8001d68 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe fd02 	bl	8001d68 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e20c      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ef      	beq.n	8003360 <HAL_RCC_OscConfig+0x3ec>
 8003380:	e01b      	b.n	80033ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003388:	4a3b      	ldr	r2, [pc, #236]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe fce9 	bl	8001d68 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339a:	f7fe fce5 	bl	8001d68 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1ef      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ef      	bne.n	800339a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80a6 	beq.w	8003514 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	4a26      	ldr	r2, [pc, #152]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f4:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d118      	bne.n	8003432 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003400:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340c:	f7fe fcac 	bl	8001d68 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fe fca8 	bl	8001d68 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1b2      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_RCC_OscConfig+0x4d8>
 800343a:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800344a:	e029      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d115      	bne.n	8003480 <HAL_RCC_OscConfig+0x50c>
 8003454:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	4a07      	ldr	r2, [pc, #28]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003464:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	4a03      	ldr	r2, [pc, #12]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	4b9a      	ldr	r3, [pc, #616]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	4a99      	ldr	r2, [pc, #612]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003490:	4b96      	ldr	r3, [pc, #600]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	4a95      	ldr	r2, [pc, #596]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d016      	beq.n	80034d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fe fc5e 	bl	8001d68 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fe fc5a 	bl	8001d68 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e162      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c6:	4b89      	ldr	r3, [pc, #548]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ed      	beq.n	80034b0 <HAL_RCC_OscConfig+0x53c>
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fe fc47 	bl	8001d68 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fe fc43 	bl	8001d68 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e14b      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f4:	4b7d      	ldr	r3, [pc, #500]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ed      	bne.n	80034de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003502:	7ffb      	ldrb	r3, [r7, #31]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b78      	ldr	r3, [pc, #480]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	4a77      	ldr	r2, [pc, #476]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003512:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03c      	beq.n	800359a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01c      	beq.n	8003562 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003528:	4b70      	ldr	r3, [pc, #448]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 800352a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800352e:	4a6f      	ldr	r2, [pc, #444]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe fc16 	bl	8001d68 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003540:	f7fe fc12 	bl	8001d68 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e11c      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003552:	4b66      	ldr	r3, [pc, #408]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ef      	beq.n	8003540 <HAL_RCC_OscConfig+0x5cc>
 8003560:	e01b      	b.n	800359a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003562:	4b62      	ldr	r3, [pc, #392]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003568:	4a60      	ldr	r2, [pc, #384]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe fbf9 	bl	8001d68 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357a:	f7fe fbf5 	bl	8001d68 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0ff      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800358c:	4b57      	ldr	r3, [pc, #348]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 800358e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ef      	bne.n	800357a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80f3 	beq.w	800378a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	f040 80c9 	bne.w	8003740 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ae:	4b4f      	ldr	r3, [pc, #316]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0203 	and.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d12c      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	3b01      	subs	r3, #1
 80035ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d123      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d11b      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d113      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d109      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	3b01      	subs	r3, #1
 8003616:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d06b      	beq.n	80036f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d062      	beq.n	80036e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003622:	4b32      	ldr	r3, [pc, #200]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0ac      	b.n	800378c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003632:	4b2e      	ldr	r3, [pc, #184]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2d      	ldr	r2, [pc, #180]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003638:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800363c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800363e:	f7fe fb93 	bl	8001d68 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fe fb8f 	bl	8001d68 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e099      	b.n	800378c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	4b24      	ldr	r3, [pc, #144]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003664:	4b21      	ldr	r3, [pc, #132]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <HAL_RCC_OscConfig+0x77c>)
 800366a:	4013      	ands	r3, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003674:	3a01      	subs	r2, #1
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	4311      	orrs	r1, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800367e:	0212      	lsls	r2, r2, #8
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003686:	0852      	lsrs	r2, r2, #1
 8003688:	3a01      	subs	r2, #1
 800368a:	0552      	lsls	r2, r2, #21
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003692:	0852      	lsrs	r2, r2, #1
 8003694:	3a01      	subs	r2, #1
 8003696:	0652      	lsls	r2, r2, #25
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800369e:	06d2      	lsls	r2, r2, #27
 80036a0:	430a      	orrs	r2, r1
 80036a2:	4912      	ldr	r1, [pc, #72]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036a8:	4b10      	ldr	r3, [pc, #64]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0f      	ldr	r2, [pc, #60]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b4:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a0c      	ldr	r2, [pc, #48]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c0:	f7fe fb52 	bl	8001d68 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe fb4e 	bl	8001d68 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e058      	b.n	800378c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	4b04      	ldr	r3, [pc, #16]	@ (80036ec <HAL_RCC_OscConfig+0x778>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036e6:	e050      	b.n	800378a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e04f      	b.n	800378c <HAL_RCC_OscConfig+0x818>
 80036ec:	40021000 	.word	0x40021000
 80036f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f4:	4b27      	ldr	r3, [pc, #156]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d144      	bne.n	800378a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003700:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a23      	ldr	r2, [pc, #140]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800370c:	4b21      	ldr	r3, [pc, #132]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a20      	ldr	r2, [pc, #128]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003716:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003718:	f7fe fb26 	bl	8001d68 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe fb22 	bl	8001d68 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e02c      	b.n	800378c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x7ac>
 800373e:	e024      	b.n	800378a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d01f      	beq.n	8003786 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b13      	ldr	r3, [pc, #76]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a12      	ldr	r2, [pc, #72]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 800374c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fe fb09 	bl	8001d68 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe fb05 	bl	8001d68 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e00f      	b.n	800378c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376c:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	4905      	ldr	r1, [pc, #20]	@ (8003794 <HAL_RCC_OscConfig+0x820>)
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_OscConfig+0x824>)
 8003780:	4013      	ands	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
 8003784:	e001      	b.n	800378a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	feeefffc 	.word	0xfeeefffc

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0e7      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b75      	ldr	r3, [pc, #468]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d910      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b72      	ldr	r3, [pc, #456]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4970      	ldr	r1, [pc, #448]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0cf      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	4b66      	ldr	r3, [pc, #408]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d908      	bls.n	800380e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b63      	ldr	r3, [pc, #396]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4960      	ldr	r1, [pc, #384]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d04c      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	4b5a      	ldr	r3, [pc, #360]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d121      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0a6      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	4b54      	ldr	r3, [pc, #336]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d115      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e09a      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003852:	4b4e      	ldr	r3, [pc, #312]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e08e      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003862:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e086      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b46      	ldr	r3, [pc, #280]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4943      	ldr	r1, [pc, #268]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003884:	f7fe fa70 	bl	8001d68 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe fa6c 	bl	8001d68 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e06e      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b3a      	ldr	r3, [pc, #232]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	4b31      	ldr	r3, [pc, #196]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d208      	bcs.n	80038e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b2e      	ldr	r3, [pc, #184]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	492b      	ldr	r1, [pc, #172]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e2:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d210      	bcs.n	8003912 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f0:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 0207 	bic.w	r2, r3, #7
 80038f8:	4923      	ldr	r1, [pc, #140]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d001      	beq.n	8003912 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e036      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391e:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4918      	ldr	r1, [pc, #96]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393c:	4b13      	ldr	r3, [pc, #76]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4910      	ldr	r1, [pc, #64]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003950:	f000 f824 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b0d      	ldr	r3, [pc, #52]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	490b      	ldr	r1, [pc, #44]	@ (8003990 <HAL_RCC_ClockConfig+0x1f4>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	4a09      	ldr	r2, [pc, #36]	@ (8003994 <HAL_RCC_ClockConfig+0x1f8>)
 800396e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003970:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1fc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe f9a7 	bl	8001cc8 <HAL_InitTick>
 800397a:	4603      	mov	r3, r0
 800397c:	72fb      	strb	r3, [r7, #11]

  return status;
 800397e:	7afb      	ldrb	r3, [r7, #11]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40022000 	.word	0x40022000
 800398c:	40021000 	.word	0x40021000
 8003990:	08009450 	.word	0x08009450
 8003994:	20000000 	.word	0x20000000
 8003998:	20000004 	.word	0x20000004

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	@ 0x24
 80039a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039aa:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b4:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x34>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d121      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d11e      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039d0:	4b34      	ldr	r3, [pc, #208]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039dc:	4b31      	ldr	r3, [pc, #196]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	e005      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039ec:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039f8:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10d      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d102      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a14:	4b25      	ldr	r3, [pc, #148]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x110>)
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e004      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a20:	4b23      	ldr	r3, [pc, #140]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d134      	bne.n	8003a94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xac>
 8003a40:	e005      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a42:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x110>)
 8003a44:	617b      	str	r3, [r7, #20]
      break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a4a:	617b      	str	r3, [r7, #20]
      break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	617b      	str	r3, [r7, #20]
      break;
 8003a52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a54:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	3301      	adds	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	fb03 f202 	mul.w	r2, r3, r2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	0e5b      	lsrs	r3, r3, #25
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	3301      	adds	r3, #1
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a94:	69bb      	ldr	r3, [r7, #24]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	@ 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08009468 	.word	0x08009468
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	007a1200 	.word	0x007a1200

08003ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	@ (8003ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000000 	.word	0x20000000

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ad0:	f7ff fff0 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4904      	ldr	r1, [pc, #16]	@ (8003af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08009460 	.word	0x08009460

08003af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003afc:	f7ff ffda 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0adb      	lsrs	r3, r3, #11
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4904      	ldr	r1, [pc, #16]	@ (8003b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	08009460 	.word	0x08009460

08003b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b30:	4b2a      	ldr	r3, [pc, #168]	@ (8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b3c:	f7ff f9b6 	bl	8002eac <HAL_PWREx_GetVoltageRange>
 8003b40:	6178      	str	r0, [r7, #20]
 8003b42:	e014      	b.n	8003b6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b44:	4b25      	ldr	r3, [pc, #148]	@ (8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b50:	4b22      	ldr	r3, [pc, #136]	@ (8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b5c:	f7ff f9a6 	bl	8002eac <HAL_PWREx_GetVoltageRange>
 8003b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b62:	4b1e      	ldr	r3, [pc, #120]	@ (8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	4a1d      	ldr	r2, [pc, #116]	@ (8003bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b74:	d10b      	bne.n	8003b8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b80      	cmp	r3, #128	@ 0x80
 8003b7a:	d919      	bls.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b80:	d902      	bls.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b82:	2302      	movs	r3, #2
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	e013      	b.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b88:	2301      	movs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e010      	b.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b80      	cmp	r3, #128	@ 0x80
 8003b92:	d902      	bls.n	8003b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b94:	2303      	movs	r3, #3
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	e00a      	b.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b80      	cmp	r3, #128	@ 0x80
 8003b9e:	d102      	bne.n	8003ba6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e004      	b.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b70      	cmp	r3, #112	@ 0x70
 8003baa:	d101      	bne.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bac:	2301      	movs	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 0207 	bic.w	r2, r3, #7
 8003bb8:	4909      	ldr	r1, [pc, #36]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bc0:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40022000 	.word	0x40022000

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bec:	2300      	movs	r3, #0
 8003bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d031      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c08:	d01a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c0e:	d814      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c18:	d10f      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c26:	e00c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fa22 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c48:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	494e      	ldr	r1, [pc, #312]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c5e:	e001      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 809e 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c76:	4b46      	ldr	r3, [pc, #280]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b40      	ldr	r3, [pc, #256]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c90:	4a3f      	ldr	r2, [pc, #252]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c98:	4b3d      	ldr	r3, [pc, #244]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a39      	ldr	r2, [pc, #228]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb4:	f7fe f858 	bl	8001d68 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cba:	e009      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fe f854 	bl	8001d68 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d902      	bls.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	74fb      	strb	r3, [r7, #19]
        break;
 8003cce:	e005      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd0:	4b30      	ldr	r3, [pc, #192]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ef      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d15a      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01e      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d019      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cfe:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0a:	4b21      	ldr	r3, [pc, #132]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d10:	4a1f      	ldr	r2, [pc, #124]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	4a1b      	ldr	r2, [pc, #108]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d2a:	4a19      	ldr	r2, [pc, #100]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fe f814 	bl	8001d68 <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d42:	e00b      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fe f810 	bl	8001d68 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d902      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	74fb      	strb	r3, [r7, #19]
            break;
 8003d5a:	e006      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0ec      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	4904      	ldr	r1, [pc, #16]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d86:	e009      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
 8003d8c:	e006      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9c:	7c7b      	ldrb	r3, [r7, #17]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	4a8c      	ldr	r2, [pc, #560]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dba:	4b87      	ldr	r3, [pc, #540]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc0:	f023 0203 	bic.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4983      	ldr	r1, [pc, #524]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	f023 020c 	bic.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	497b      	ldr	r1, [pc, #492]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dfe:	4b76      	ldr	r3, [pc, #472]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0c:	4972      	ldr	r1, [pc, #456]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e20:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	496a      	ldr	r1, [pc, #424]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e42:	4b65      	ldr	r3, [pc, #404]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e50:	4961      	ldr	r1, [pc, #388]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e64:	4b5c      	ldr	r3, [pc, #368]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	4959      	ldr	r1, [pc, #356]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e86:	4b54      	ldr	r3, [pc, #336]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e94:	4950      	ldr	r1, [pc, #320]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb6:	4948      	ldr	r1, [pc, #288]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eca:	4b43      	ldr	r3, [pc, #268]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	493f      	ldr	r1, [pc, #252]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d028      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eec:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	4937      	ldr	r1, [pc, #220]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b32      	ldr	r3, [pc, #200]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a31      	ldr	r2, [pc, #196]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
 8003f18:	e011      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f22:	d10c      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f8a4 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d028      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f4a:	4b23      	ldr	r3, [pc, #140]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f58:	491f      	ldr	r1, [pc, #124]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f68:	d106      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f74:	60d3      	str	r3, [r2, #12]
 8003f76:	e011      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f875 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02b      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	4908      	ldr	r1, [pc, #32]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fc6:	d109      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a02      	ldr	r2, [pc, #8]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd2:	60d3      	str	r3, [r2, #12]
 8003fd4:	e014      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f843 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01c      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800400c:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401a:	4916      	ldr	r1, [pc, #88]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800402a:	d10c      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f820 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004052:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	4904      	ldr	r1, [pc, #16]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004068:	7cbb      	ldrb	r3, [r7, #18]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000

08004078 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004086:	4b74      	ldr	r3, [pc, #464]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004092:	4b71      	ldr	r3, [pc, #452]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0203 	and.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d10d      	bne.n	80040be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
       ||
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d047      	beq.n	800414e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e044      	b.n	800414e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d018      	beq.n	80040fe <RCCEx_PLLSAI1_Config+0x86>
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d825      	bhi.n	800411c <RCCEx_PLLSAI1_Config+0xa4>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d002      	beq.n	80040da <RCCEx_PLLSAI1_Config+0x62>
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d009      	beq.n	80040ec <RCCEx_PLLSAI1_Config+0x74>
 80040d8:	e020      	b.n	800411c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040da:	4b5f      	ldr	r3, [pc, #380]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11d      	bne.n	8004122 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e01a      	b.n	8004122 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fc:	e013      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040fe:	4b56      	ldr	r3, [pc, #344]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800410a:	4b53      	ldr	r3, [pc, #332]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800411a:	e006      	b.n	800412a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e004      	b.n	800412c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800412a:	bf00      	nop
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004132:	4b49      	ldr	r3, [pc, #292]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	430b      	orrs	r3, r1
 8004148:	4943      	ldr	r1, [pc, #268]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d17c      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004154:	4b40      	ldr	r3, [pc, #256]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a3f      	ldr	r2, [pc, #252]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800415a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800415e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004160:	f7fd fe02 	bl	8001d68 <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004166:	e009      	b.n	800417c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004168:	f7fd fdfe 	bl	8001d68 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	73fb      	strb	r3, [r7, #15]
        break;
 800417a:	e005      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800417c:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ef      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d15f      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d110      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004194:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800419c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6892      	ldr	r2, [r2, #8]
 80041a4:	0211      	lsls	r1, r2, #8
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	06d2      	lsls	r2, r2, #27
 80041ac:	430a      	orrs	r2, r1
 80041ae:	492a      	ldr	r1, [pc, #168]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	610b      	str	r3, [r1, #16]
 80041b4:	e027      	b.n	8004206 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d112      	bne.n	80041e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041bc:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6892      	ldr	r2, [r2, #8]
 80041cc:	0211      	lsls	r1, r2, #8
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6912      	ldr	r2, [r2, #16]
 80041d2:	0852      	lsrs	r2, r2, #1
 80041d4:	3a01      	subs	r2, #1
 80041d6:	0552      	lsls	r2, r2, #21
 80041d8:	430a      	orrs	r2, r1
 80041da:	491f      	ldr	r1, [pc, #124]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	610b      	str	r3, [r1, #16]
 80041e0:	e011      	b.n	8004206 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6892      	ldr	r2, [r2, #8]
 80041f2:	0211      	lsls	r1, r2, #8
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6952      	ldr	r2, [r2, #20]
 80041f8:	0852      	lsrs	r2, r2, #1
 80041fa:	3a01      	subs	r2, #1
 80041fc:	0652      	lsls	r2, r2, #25
 80041fe:	430a      	orrs	r2, r1
 8004200:	4915      	ldr	r1, [pc, #84]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004202:	4313      	orrs	r3, r2
 8004204:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004206:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a13      	ldr	r2, [pc, #76]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800420c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004210:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fd fda9 	bl	8001d68 <HAL_GetTick>
 8004216:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004218:	e009      	b.n	800422e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800421a:	f7fd fda5 	bl	8001d68 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d902      	bls.n	800422e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	73fb      	strb	r3, [r7, #15]
          break;
 800422c:	e005      	b.n	800423a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800422e:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0ef      	beq.n	800421a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	4903      	ldr	r1, [pc, #12]	@ (8004258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000

0800425c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e095      	b.n	800439a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427e:	d009      	beq.n	8004294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
 8004286:	e005      	b.n	8004294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd f9ea 	bl	8001688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042d4:	d902      	bls.n	80042dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e002      	b.n	80042e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80042ea:	d007      	beq.n	80042fc <HAL_SPI_Init+0xa0>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042f4:	d002      	beq.n	80042fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433e:	ea42 0103 	orr.w	r1, r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	0c1b      	lsrs	r3, r3, #16
 8004358:	f003 0204 	and.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004378:	ea42 0103 	orr.w	r1, r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e049      	b.n	8004448 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fd fabd 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f000 fa75 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e049      	b.n	80044f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f841 	bl	80044fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 fa1e 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800452e:	2302      	movs	r3, #2
 8004530:	e0ff      	b.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b14      	cmp	r3, #20
 800453e:	f200 80f0 	bhi.w	8004722 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004542:	a201      	add	r2, pc, #4	@ (adr r2, 8004548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800459d 	.word	0x0800459d
 800454c:	08004723 	.word	0x08004723
 8004550:	08004723 	.word	0x08004723
 8004554:	08004723 	.word	0x08004723
 8004558:	080045dd 	.word	0x080045dd
 800455c:	08004723 	.word	0x08004723
 8004560:	08004723 	.word	0x08004723
 8004564:	08004723 	.word	0x08004723
 8004568:	0800461f 	.word	0x0800461f
 800456c:	08004723 	.word	0x08004723
 8004570:	08004723 	.word	0x08004723
 8004574:	08004723 	.word	0x08004723
 8004578:	0800465f 	.word	0x0800465f
 800457c:	08004723 	.word	0x08004723
 8004580:	08004723 	.word	0x08004723
 8004584:	08004723 	.word	0x08004723
 8004588:	080046a1 	.word	0x080046a1
 800458c:	08004723 	.word	0x08004723
 8004590:	08004723 	.word	0x08004723
 8004594:	08004723 	.word	0x08004723
 8004598:	080046e1 	.word	0x080046e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fa04 	bl	80049b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0208 	orr.w	r2, r2, #8
 80045b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0204 	bic.w	r2, r2, #4
 80045c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6999      	ldr	r1, [r3, #24]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	619a      	str	r2, [r3, #24]
      break;
 80045da:	e0a5      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fa60 	bl	8004aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6999      	ldr	r1, [r3, #24]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	021a      	lsls	r2, r3, #8
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	619a      	str	r2, [r3, #24]
      break;
 800461c:	e084      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fab9 	bl	8004b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0208 	orr.w	r2, r2, #8
 8004638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0204 	bic.w	r2, r2, #4
 8004648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69d9      	ldr	r1, [r3, #28]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	61da      	str	r2, [r3, #28]
      break;
 800465c:	e064      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fb11 	bl	8004c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69d9      	ldr	r1, [r3, #28]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	021a      	lsls	r2, r3, #8
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	61da      	str	r2, [r3, #28]
      break;
 800469e:	e043      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb4e 	bl	8004d48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0208 	orr.w	r2, r2, #8
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0204 	bic.w	r2, r2, #4
 80046ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80046de:	e023      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fb86 	bl	8004df8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004720:	e002      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
      break;
 8004726:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop

0800473c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_TIM_ConfigClockSource+0x1c>
 8004754:	2302      	movs	r3, #2
 8004756:	e0b6      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800477a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004794:	d03e      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xd8>
 8004796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479a:	f200 8087 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x170>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	f000 8086 	beq.w	80048b2 <HAL_TIM_ConfigClockSource+0x176>
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047aa:	d87f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047ac:	2b70      	cmp	r3, #112	@ 0x70
 80047ae:	d01a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xaa>
 80047b0:	2b70      	cmp	r3, #112	@ 0x70
 80047b2:	d87b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d050      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x11e>
 80047b8:	2b60      	cmp	r3, #96	@ 0x60
 80047ba:	d877      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047bc:	2b50      	cmp	r3, #80	@ 0x50
 80047be:	d03c      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xfe>
 80047c0:	2b50      	cmp	r3, #80	@ 0x50
 80047c2:	d873      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d058      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x13e>
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d86f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047cc:	2b30      	cmp	r3, #48	@ 0x30
 80047ce:	d064      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d86b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d060      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d867      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d05a      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047e4:	e062      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f6:	f000 fbd3 	bl	8004fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e04f      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004824:	f000 fbbc 	bl	8004fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e03c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fb30 	bl	8004eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2150      	movs	r1, #80	@ 0x50
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb89 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 8004858:	e02c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 fb4f 	bl	8004f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2160      	movs	r1, #96	@ 0x60
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fb79 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 8004878:	e01c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	461a      	mov	r2, r3
 8004888:	f000 fb10 	bl	8004eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	@ 0x40
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fb69 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 8004898:	e00c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 fb60 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 80048aa:	e003      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a30      	ldr	r2, [pc, #192]	@ (80049a4 <TIM_Base_SetConfig+0xd4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_Base_SetConfig+0x20>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ee:	d108      	bne.n	8004902 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <TIM_Base_SetConfig+0xd4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00b      	beq.n	8004922 <TIM_Base_SetConfig+0x52>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004910:	d007      	beq.n	8004922 <TIM_Base_SetConfig+0x52>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a24      	ldr	r2, [pc, #144]	@ (80049a8 <TIM_Base_SetConfig+0xd8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_Base_SetConfig+0x52>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a23      	ldr	r2, [pc, #140]	@ (80049ac <TIM_Base_SetConfig+0xdc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d108      	bne.n	8004934 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a12      	ldr	r2, [pc, #72]	@ (80049a4 <TIM_Base_SetConfig+0xd4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0xa0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a11      	ldr	r2, [pc, #68]	@ (80049a8 <TIM_Base_SetConfig+0xd8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0xa0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <TIM_Base_SetConfig+0xdc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d103      	bne.n	8004978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d105      	bne.n	8004996 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	611a      	str	r2, [r3, #16]
  }
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400

080049b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f023 0201 	bic.w	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0302 	bic.w	r3, r3, #2
 80049fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a24      	ldr	r2, [pc, #144]	@ (8004a9c <TIM_OC1_SetConfig+0xec>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <TIM_OC1_SetConfig+0x70>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a23      	ldr	r2, [pc, #140]	@ (8004aa0 <TIM_OC1_SetConfig+0xf0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC1_SetConfig+0x70>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a22      	ldr	r2, [pc, #136]	@ (8004aa4 <TIM_OC1_SetConfig+0xf4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10c      	bne.n	8004a3a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0308 	bic.w	r3, r3, #8
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	@ (8004a9c <TIM_OC1_SetConfig+0xec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_OC1_SetConfig+0xa2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a16      	ldr	r2, [pc, #88]	@ (8004aa0 <TIM_OC1_SetConfig+0xf0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_OC1_SetConfig+0xa2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	@ (8004aa4 <TIM_OC1_SetConfig+0xf4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d111      	bne.n	8004a76 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	621a      	str	r2, [r3, #32]
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400

08004aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f023 0210 	bic.w	r2, r3, #16
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a22      	ldr	r2, [pc, #136]	@ (8004b90 <TIM_OC2_SetConfig+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d10d      	bne.n	8004b28 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <TIM_OC2_SetConfig+0xe8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <TIM_OC2_SetConfig+0x98>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a18      	ldr	r2, [pc, #96]	@ (8004b94 <TIM_OC2_SetConfig+0xec>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC2_SetConfig+0x98>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <TIM_OC2_SetConfig+0xf0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d113      	bne.n	8004b68 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400

08004b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	@ (8004c80 <TIM_OC3_SetConfig+0xe4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10d      	bne.n	8004c1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	@ (8004c80 <TIM_OC3_SetConfig+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_OC3_SetConfig+0x96>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a17      	ldr	r2, [pc, #92]	@ (8004c84 <TIM_OC3_SetConfig+0xe8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_OC3_SetConfig+0x96>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a16      	ldr	r2, [pc, #88]	@ (8004c88 <TIM_OC3_SetConfig+0xec>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d113      	bne.n	8004c5a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400

08004c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a14      	ldr	r2, [pc, #80]	@ (8004d3c <TIM_OC4_SetConfig+0xb0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_OC4_SetConfig+0x74>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a13      	ldr	r2, [pc, #76]	@ (8004d40 <TIM_OC4_SetConfig+0xb4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC4_SetConfig+0x74>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a12      	ldr	r2, [pc, #72]	@ (8004d44 <TIM_OC4_SetConfig+0xb8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d109      	bne.n	8004d14 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	019b      	lsls	r3, r3, #6
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400

08004d48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a13      	ldr	r2, [pc, #76]	@ (8004dec <TIM_OC5_SetConfig+0xa4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <TIM_OC5_SetConfig+0x6a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a12      	ldr	r2, [pc, #72]	@ (8004df0 <TIM_OC5_SetConfig+0xa8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC5_SetConfig+0x6a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a11      	ldr	r2, [pc, #68]	@ (8004df4 <TIM_OC5_SetConfig+0xac>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d109      	bne.n	8004dc6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400

08004df8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	051b      	lsls	r3, r3, #20
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <TIM_OC6_SetConfig+0xa8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <TIM_OC6_SetConfig+0x6c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <TIM_OC6_SetConfig+0xac>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_OC6_SetConfig+0x6c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ea8 <TIM_OC6_SetConfig+0xb0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d109      	bne.n	8004e78 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400

08004eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0201 	bic.w	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f023 030a 	bic.w	r3, r3, #10
 8004ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f023 0210 	bic.w	r2, r3, #16
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	031b      	lsls	r3, r3, #12
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f043 0307 	orr.w	r3, r3, #7
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e04f      	b.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a21      	ldr	r2, [pc, #132]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005028:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a14      	ldr	r2, [pc, #80]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d009      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005060:	d004      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a10      	ldr	r2, [pc, #64]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4313      	orrs	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40014000 	.word	0x40014000

080050ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e040      	b.n	8005140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fd18 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	@ 0x24
 80050d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fb0c 	bl	8005710 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f8af 	bl	800525c <UART_SetConfig>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e01b      	b.n	8005140 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fb8b 	bl	8005854 <UART_CheckIdleState>
 800513e:	4603      	mov	r3, r0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	@ 0x28
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800515c:	2b20      	cmp	r3, #32
 800515e:	d177      	bne.n	8005250 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_UART_Transmit+0x24>
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e070      	b.n	8005252 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2221      	movs	r2, #33	@ 0x21
 800517c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517e:	f7fc fdf3 	bl	8001d68 <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519c:	d108      	bne.n	80051b0 <HAL_UART_Transmit+0x68>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e003      	b.n	80051b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051b8:	e02f      	b.n	800521a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	2180      	movs	r1, #128	@ 0x80
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fbed 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e03b      	b.n	8005252 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	881a      	ldrh	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ec:	b292      	uxth	r2, r2
 80051ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	3302      	adds	r3, #2
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e007      	b.n	8005208 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3301      	adds	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1c9      	bne.n	80051ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	@ 0x40
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fbb7 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e005      	b.n	8005252 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800525c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005260:	b08a      	sub	sp, #40	@ 0x28
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	431a      	orrs	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	4313      	orrs	r3, r2
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b9e      	ldr	r3, [pc, #632]	@ (8005504 <UART_SetConfig+0x2a8>)
 800528c:	4013      	ands	r3, r2
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005294:	430b      	orrs	r3, r1
 8005296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a93      	ldr	r2, [pc, #588]	@ (8005508 <UART_SetConfig+0x2ac>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c4:	4313      	orrs	r3, r2
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a8a      	ldr	r2, [pc, #552]	@ (800550c <UART_SetConfig+0x2b0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d126      	bne.n	8005334 <UART_SetConfig+0xd8>
 80052e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005510 <UART_SetConfig+0x2b4>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d81b      	bhi.n	800532c <UART_SetConfig+0xd0>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <UART_SetConfig+0xa0>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	0800530d 	.word	0x0800530d
 8005300:	0800531d 	.word	0x0800531d
 8005304:	08005315 	.word	0x08005315
 8005308:	08005325 	.word	0x08005325
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005312:	e0ab      	b.n	800546c <UART_SetConfig+0x210>
 8005314:	2302      	movs	r3, #2
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531a:	e0a7      	b.n	800546c <UART_SetConfig+0x210>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005322:	e0a3      	b.n	800546c <UART_SetConfig+0x210>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800532a:	e09f      	b.n	800546c <UART_SetConfig+0x210>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005332:	e09b      	b.n	800546c <UART_SetConfig+0x210>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a76      	ldr	r2, [pc, #472]	@ (8005514 <UART_SetConfig+0x2b8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d138      	bne.n	80053b0 <UART_SetConfig+0x154>
 800533e:	4b74      	ldr	r3, [pc, #464]	@ (8005510 <UART_SetConfig+0x2b4>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d82d      	bhi.n	80053a8 <UART_SetConfig+0x14c>
 800534c:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <UART_SetConfig+0xf8>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005389 	.word	0x08005389
 8005358:	080053a9 	.word	0x080053a9
 800535c:	080053a9 	.word	0x080053a9
 8005360:	080053a9 	.word	0x080053a9
 8005364:	08005399 	.word	0x08005399
 8005368:	080053a9 	.word	0x080053a9
 800536c:	080053a9 	.word	0x080053a9
 8005370:	080053a9 	.word	0x080053a9
 8005374:	08005391 	.word	0x08005391
 8005378:	080053a9 	.word	0x080053a9
 800537c:	080053a9 	.word	0x080053a9
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053a1 	.word	0x080053a1
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800538e:	e06d      	b.n	800546c <UART_SetConfig+0x210>
 8005390:	2302      	movs	r3, #2
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005396:	e069      	b.n	800546c <UART_SetConfig+0x210>
 8005398:	2304      	movs	r3, #4
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800539e:	e065      	b.n	800546c <UART_SetConfig+0x210>
 80053a0:	2308      	movs	r3, #8
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a6:	e061      	b.n	800546c <UART_SetConfig+0x210>
 80053a8:	2310      	movs	r3, #16
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ae:	e05d      	b.n	800546c <UART_SetConfig+0x210>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a58      	ldr	r2, [pc, #352]	@ (8005518 <UART_SetConfig+0x2bc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d125      	bne.n	8005406 <UART_SetConfig+0x1aa>
 80053ba:	4b55      	ldr	r3, [pc, #340]	@ (8005510 <UART_SetConfig+0x2b4>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053c4:	2b30      	cmp	r3, #48	@ 0x30
 80053c6:	d016      	beq.n	80053f6 <UART_SetConfig+0x19a>
 80053c8:	2b30      	cmp	r3, #48	@ 0x30
 80053ca:	d818      	bhi.n	80053fe <UART_SetConfig+0x1a2>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d00a      	beq.n	80053e6 <UART_SetConfig+0x18a>
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d814      	bhi.n	80053fe <UART_SetConfig+0x1a2>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <UART_SetConfig+0x182>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d008      	beq.n	80053ee <UART_SetConfig+0x192>
 80053dc:	e00f      	b.n	80053fe <UART_SetConfig+0x1a2>
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e4:	e042      	b.n	800546c <UART_SetConfig+0x210>
 80053e6:	2302      	movs	r3, #2
 80053e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ec:	e03e      	b.n	800546c <UART_SetConfig+0x210>
 80053ee:	2304      	movs	r3, #4
 80053f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f4:	e03a      	b.n	800546c <UART_SetConfig+0x210>
 80053f6:	2308      	movs	r3, #8
 80053f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fc:	e036      	b.n	800546c <UART_SetConfig+0x210>
 80053fe:	2310      	movs	r3, #16
 8005400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005404:	e032      	b.n	800546c <UART_SetConfig+0x210>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a3f      	ldr	r2, [pc, #252]	@ (8005508 <UART_SetConfig+0x2ac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d12a      	bne.n	8005466 <UART_SetConfig+0x20a>
 8005410:	4b3f      	ldr	r3, [pc, #252]	@ (8005510 <UART_SetConfig+0x2b4>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800541a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800541e:	d01a      	beq.n	8005456 <UART_SetConfig+0x1fa>
 8005420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005424:	d81b      	bhi.n	800545e <UART_SetConfig+0x202>
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800542a:	d00c      	beq.n	8005446 <UART_SetConfig+0x1ea>
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005430:	d815      	bhi.n	800545e <UART_SetConfig+0x202>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <UART_SetConfig+0x1e2>
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d008      	beq.n	800544e <UART_SetConfig+0x1f2>
 800543c:	e00f      	b.n	800545e <UART_SetConfig+0x202>
 800543e:	2300      	movs	r3, #0
 8005440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005444:	e012      	b.n	800546c <UART_SetConfig+0x210>
 8005446:	2302      	movs	r3, #2
 8005448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544c:	e00e      	b.n	800546c <UART_SetConfig+0x210>
 800544e:	2304      	movs	r3, #4
 8005450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005454:	e00a      	b.n	800546c <UART_SetConfig+0x210>
 8005456:	2308      	movs	r3, #8
 8005458:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545c:	e006      	b.n	800546c <UART_SetConfig+0x210>
 800545e:	2310      	movs	r3, #16
 8005460:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005464:	e002      	b.n	800546c <UART_SetConfig+0x210>
 8005466:	2310      	movs	r3, #16
 8005468:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	@ (8005508 <UART_SetConfig+0x2ac>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f040 808a 	bne.w	800558c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005478:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800547c:	2b08      	cmp	r3, #8
 800547e:	d824      	bhi.n	80054ca <UART_SetConfig+0x26e>
 8005480:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x22c>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054cb 	.word	0x080054cb
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054bb 	.word	0x080054bb
 800549c:	080054cb 	.word	0x080054cb
 80054a0:	080054cb 	.word	0x080054cb
 80054a4:	080054cb 	.word	0x080054cb
 80054a8:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fe fb0e 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80054b0:	61f8      	str	r0, [r7, #28]
        break;
 80054b2:	e010      	b.n	80054d6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b19      	ldr	r3, [pc, #100]	@ (800551c <UART_SetConfig+0x2c0>)
 80054b6:	61fb      	str	r3, [r7, #28]
        break;
 80054b8:	e00d      	b.n	80054d6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fe fa6f 	bl	800399c <HAL_RCC_GetSysClockFreq>
 80054be:	61f8      	str	r0, [r7, #28]
        break;
 80054c0:	e009      	b.n	80054d6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c6:	61fb      	str	r3, [r7, #28]
        break;
 80054c8:	e005      	b.n	80054d6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8109 	beq.w	80056f0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4413      	add	r3, r2
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d305      	bcc.n	80054fa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d912      	bls.n	8005520 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005500:	e0f6      	b.n	80056f0 <UART_SetConfig+0x494>
 8005502:	bf00      	nop
 8005504:	efff69f3 	.word	0xefff69f3
 8005508:	40008000 	.word	0x40008000
 800550c:	40013800 	.word	0x40013800
 8005510:	40021000 	.word	0x40021000
 8005514:	40004400 	.word	0x40004400
 8005518:	40004800 	.word	0x40004800
 800551c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2200      	movs	r2, #0
 8005524:	461c      	mov	r4, r3
 8005526:	4615      	mov	r5, r2
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	022b      	lsls	r3, r5, #8
 8005532:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005536:	0222      	lsls	r2, r4, #8
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	6849      	ldr	r1, [r1, #4]
 800553c:	0849      	lsrs	r1, r1, #1
 800553e:	2000      	movs	r0, #0
 8005540:	4688      	mov	r8, r1
 8005542:	4681      	mov	r9, r0
 8005544:	eb12 0a08 	adds.w	sl, r2, r8
 8005548:	eb43 0b09 	adc.w	fp, r3, r9
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800555a:	4650      	mov	r0, sl
 800555c:	4659      	mov	r1, fp
 800555e:	f7fa fe9f 	bl	80002a0 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4613      	mov	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005570:	d308      	bcc.n	8005584 <UART_SetConfig+0x328>
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005578:	d204      	bcs.n	8005584 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	e0b5      	b.n	80056f0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800558a:	e0b1      	b.n	80056f0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005594:	d15d      	bne.n	8005652 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800559a:	2b08      	cmp	r3, #8
 800559c:	d827      	bhi.n	80055ee <UART_SetConfig+0x392>
 800559e:	a201      	add	r2, pc, #4	@ (adr r2, 80055a4 <UART_SetConfig+0x348>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055d9 	.word	0x080055d9
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055ef 	.word	0x080055ef
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c8:	f7fe fa80 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80055cc:	61f8      	str	r0, [r7, #28]
        break;
 80055ce:	e014      	b.n	80055fa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7fe fa92 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 80055d4:	61f8      	str	r0, [r7, #28]
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b4c      	ldr	r3, [pc, #304]	@ (800570c <UART_SetConfig+0x4b0>)
 80055da:	61fb      	str	r3, [r7, #28]
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fe f9dd 	bl	800399c <HAL_RCC_GetSysClockFreq>
 80055e2:	61f8      	str	r0, [r7, #28]
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ea:	61fb      	str	r3, [r7, #28]
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d077      	beq.n	80056f0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	005a      	lsls	r2, r3, #1
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b0f      	cmp	r3, #15
 800561a:	d916      	bls.n	800564a <UART_SetConfig+0x3ee>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005622:	d212      	bcs.n	800564a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f023 030f 	bic.w	r3, r3, #15
 800562c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	b29b      	uxth	r3, r3
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	b29a      	uxth	r2, r3
 800563a:	8afb      	ldrh	r3, [r7, #22]
 800563c:	4313      	orrs	r3, r2
 800563e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	8afa      	ldrh	r2, [r7, #22]
 8005646:	60da      	str	r2, [r3, #12]
 8005648:	e052      	b.n	80056f0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005650:	e04e      	b.n	80056f0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005652:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005656:	2b08      	cmp	r3, #8
 8005658:	d827      	bhi.n	80056aa <UART_SetConfig+0x44e>
 800565a:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <UART_SetConfig+0x404>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005685 	.word	0x08005685
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005695 	.word	0x08005695
 800566c:	080056ab 	.word	0x080056ab
 8005670:	0800569b 	.word	0x0800569b
 8005674:	080056ab 	.word	0x080056ab
 8005678:	080056ab 	.word	0x080056ab
 800567c:	080056ab 	.word	0x080056ab
 8005680:	080056a3 	.word	0x080056a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005684:	f7fe fa22 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8005688:	61f8      	str	r0, [r7, #28]
        break;
 800568a:	e014      	b.n	80056b6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800568c:	f7fe fa34 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8005690:	61f8      	str	r0, [r7, #28]
        break;
 8005692:	e010      	b.n	80056b6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005694:	4b1d      	ldr	r3, [pc, #116]	@ (800570c <UART_SetConfig+0x4b0>)
 8005696:	61fb      	str	r3, [r7, #28]
        break;
 8005698:	e00d      	b.n	80056b6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800569a:	f7fe f97f 	bl	800399c <HAL_RCC_GetSysClockFreq>
 800569e:	61f8      	str	r0, [r7, #28]
        break;
 80056a0:	e009      	b.n	80056b6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056a6:	61fb      	str	r3, [r7, #28]
        break;
 80056a8:	e005      	b.n	80056b6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056b4:	bf00      	nop
    }

    if (pclk != 0U)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d019      	beq.n	80056f0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	085a      	lsrs	r2, r3, #1
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b0f      	cmp	r3, #15
 80056d4:	d909      	bls.n	80056ea <UART_SetConfig+0x48e>
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056dc:	d205      	bcs.n	80056ea <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60da      	str	r2, [r3, #12]
 80056e8:	e002      	b.n	80056f0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80056fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005700:	4618      	mov	r0, r3
 8005702:	3728      	adds	r7, #40	@ 0x28
 8005704:	46bd      	mov	sp, r7
 8005706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570a:	bf00      	nop
 800570c:	00f42400 	.word	0x00f42400

08005710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01a      	beq.n	8005826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580e:	d10a      	bne.n	8005826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
  }
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b098      	sub	sp, #96	@ 0x60
 8005858:	af02      	add	r7, sp, #8
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005864:	f7fc fa80 	bl	8001d68 <HAL_GetTick>
 8005868:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d12e      	bne.n	80058d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005878:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f88c 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d021      	beq.n	80058d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e062      	b.n	800599c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d149      	bne.n	8005978 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ec:	2200      	movs	r2, #0
 80058ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f856 	bl	80059a4 <UART_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03c      	beq.n	8005978 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	623b      	str	r3, [r7, #32]
   return(result);
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	633b      	str	r3, [r7, #48]	@ 0x30
 800591e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800592a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005950:	61fa      	str	r2, [r7, #28]
 8005952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	617b      	str	r3, [r7, #20]
   return(result);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e011      	b.n	800599c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3758      	adds	r7, #88	@ 0x58
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b4:	e04f      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059bc:	d04b      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fc f9d3 	bl	8001d68 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e04e      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d037      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b80      	cmp	r3, #128	@ 0x80
 80059ea:	d034      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b40      	cmp	r3, #64	@ 0x40
 80059f0:	d031      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d110      	bne.n	8005a22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2208      	movs	r2, #8
 8005a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f838 	bl	8005a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2208      	movs	r2, #8
 8005a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e029      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a30:	d111      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f81e 	bl	8005a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d0a0      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b095      	sub	sp, #84	@ 0x54
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e6      	bne.n	8005a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3308      	adds	r3, #8
 8005abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d118      	bne.n	8005b26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f023 0310 	bic.w	r3, r3, #16
 8005b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e6      	bne.n	8005af4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b3a:	bf00      	nop
 8005b3c:	3754      	adds	r7, #84	@ 0x54
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005b4c:	4904      	ldr	r1, [pc, #16]	@ (8005b60 <MX_FATFS_Init+0x18>)
 8005b4e:	4805      	ldr	r0, [pc, #20]	@ (8005b64 <MX_FATFS_Init+0x1c>)
 8005b50:	f002 fdb6 	bl	80086c0 <FATFS_LinkDriver>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	4b03      	ldr	r3, [pc, #12]	@ (8005b68 <MX_FATFS_Init+0x20>)
 8005b5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b5c:	bf00      	nop
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200003f8 	.word	0x200003f8
 8005b64:	2000000c 	.word	0x2000000c
 8005b68:	200003f4 	.word	0x200003f4

08005b6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005b70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005b86:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <USER_initialize+0x24>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <USER_initialize+0x24>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000009 	.word	0x20000009

08005ba4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005bae:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <USER_status+0x24>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005bb4:	4b04      	ldr	r3, [pc, #16]	@ (8005bc8 <USER_status+0x24>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000009 	.word	0x20000009

08005bcc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005bdc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005bfa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	603a      	str	r2, [r7, #0]
 8005c12:	71fb      	strb	r3, [r7, #7]
 8005c14:	460b      	mov	r3, r1
 8005c16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
    return res;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	4a08      	ldr	r2, [pc, #32]	@ (8005c5c <disk_status+0x30>)
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	79fa      	ldrb	r2, [r7, #7]
 8005c44:	4905      	ldr	r1, [pc, #20]	@ (8005c5c <disk_status+0x30>)
 8005c46:	440a      	add	r2, r1
 8005c48:	7a12      	ldrb	r2, [r2, #8]
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4798      	blx	r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000424 	.word	0x20000424

08005c60 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca8 <disk_initialize+0x48>)
 8005c72:	5cd3      	ldrb	r3, [r2, r3]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d111      	bne.n	8005c9c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005ca8 <disk_initialize+0x48>)
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <disk_initialize+0x48>)
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	79fa      	ldrb	r2, [r7, #7]
 8005c8e:	4906      	ldr	r1, [pc, #24]	@ (8005ca8 <disk_initialize+0x48>)
 8005c90:	440a      	add	r2, r1
 8005c92:	7a12      	ldrb	r2, [r2, #8]
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
 8005c98:	4603      	mov	r3, r0
 8005c9a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000424 	.word	0x20000424

08005cac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce8 <disk_read+0x3c>)
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	689c      	ldr	r4, [r3, #8]
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <disk_read+0x3c>)
 8005ccc:	4413      	add	r3, r2
 8005cce:	7a18      	ldrb	r0, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	47a0      	blx	r4
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]
  return res;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd90      	pop	{r4, r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000424 	.word	0x20000424

08005cec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8005d28 <disk_write+0x3c>)
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	68dc      	ldr	r4, [r3, #12]
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	4a07      	ldr	r2, [pc, #28]	@ (8005d28 <disk_write+0x3c>)
 8005d0c:	4413      	add	r3, r2
 8005d0e:	7a18      	ldrb	r0, [r3, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	47a0      	blx	r4
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000424 	.word	0x20000424

08005d2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	603a      	str	r2, [r7, #0]
 8005d36:	71fb      	strb	r3, [r7, #7]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	4a09      	ldr	r2, [pc, #36]	@ (8005d64 <disk_ioctl+0x38>)
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	79fa      	ldrb	r2, [r7, #7]
 8005d4a:	4906      	ldr	r1, [pc, #24]	@ (8005d64 <disk_ioctl+0x38>)
 8005d4c:	440a      	add	r2, r1
 8005d4e:	7a10      	ldrb	r0, [r2, #8]
 8005d50:	79b9      	ldrb	r1, [r7, #6]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4798      	blx	r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000424 	.word	0x20000424

08005d68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3301      	adds	r3, #1
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005d78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	b21a      	sxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b21b      	sxth	r3, r3
 8005d8a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3303      	adds	r3, #3
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	3202      	adds	r2, #2
 8005db2:	7812      	ldrb	r2, [r2, #0]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	3201      	adds	r2, #1
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	7812      	ldrb	r2, [r2, #0]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
	return rv;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	607a      	str	r2, [r7, #4]
 8005df2:	887a      	ldrh	r2, [r7, #2]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	887a      	ldrh	r2, [r7, #2]
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e6e:	b480      	push	{r7}
 8005e70:	b087      	sub	sp, #28
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	1c53      	adds	r3, r2, #1
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	1c59      	adds	r1, r3, #1
 8005e92:	6179      	str	r1, [r7, #20]
 8005e94:	7812      	ldrb	r2, [r2, #0]
 8005e96:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f1      	bne.n	8005e88 <mem_cpy+0x1a>
	}
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	617a      	str	r2, [r7, #20]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f3      	bne.n	8005ec0 <mem_set+0x10>
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ee6:	b480      	push	{r7}
 8005ee8:	b089      	sub	sp, #36	@ 0x24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	61fa      	str	r2, [r7, #28]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	61ba      	str	r2, [r7, #24]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	1acb      	subs	r3, r1, r3
 8005f12:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <mem_cmp+0x40>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0eb      	beq.n	8005efe <mem_cmp+0x18>

	return r;
 8005f26:	697b      	ldr	r3, [r7, #20]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3724      	adds	r7, #36	@ 0x24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f3e:	e002      	b.n	8005f46 <chk_chr+0x12>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <chk_chr+0x26>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d1f2      	bne.n	8005f40 <chk_chr+0xc>
	return *str;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	e029      	b.n	8005fd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005f80:	4a27      	ldr	r2, [pc, #156]	@ (8006020 <chk_lock+0xb4>)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	4413      	add	r3, r2
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01d      	beq.n	8005fca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f8e:	4a24      	ldr	r2, [pc, #144]	@ (8006020 <chk_lock+0xb4>)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	4413      	add	r3, r2
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d116      	bne.n	8005fce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <chk_lock+0xb4>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3304      	adds	r3, #4
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d10c      	bne.n	8005fce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8006020 <chk_lock+0xb4>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	4413      	add	r3, r2
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d102      	bne.n	8005fce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fc8:	e007      	b.n	8005fda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d9d2      	bls.n	8005f80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d109      	bne.n	8005ff4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <chk_lock+0x80>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d101      	bne.n	8005ff0 <chk_lock+0x84>
 8005fec:	2300      	movs	r3, #0
 8005fee:	e010      	b.n	8006012 <chk_lock+0xa6>
 8005ff0:	2312      	movs	r3, #18
 8005ff2:	e00e      	b.n	8006012 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <chk_lock+0xa0>
 8005ffa:	4a09      	ldr	r2, [pc, #36]	@ (8006020 <chk_lock+0xb4>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4413      	add	r3, r2
 8006002:	330c      	adds	r3, #12
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800600a:	d101      	bne.n	8006010 <chk_lock+0xa4>
 800600c:	2310      	movs	r3, #16
 800600e:	e000      	b.n	8006012 <chk_lock+0xa6>
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000404 	.word	0x20000404

08006024 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	e002      	b.n	8006036 <enq_lock+0x12>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3301      	adds	r3, #1
 8006034:	607b      	str	r3, [r7, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d806      	bhi.n	800604a <enq_lock+0x26>
 800603c:	4a09      	ldr	r2, [pc, #36]	@ (8006064 <enq_lock+0x40>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	4413      	add	r3, r2
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f2      	bne.n	8006030 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b02      	cmp	r3, #2
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000404 	.word	0x20000404

08006068 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e01f      	b.n	80060b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006078:	4a41      	ldr	r2, [pc, #260]	@ (8006180 <inc_lock+0x118>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	4413      	add	r3, r2
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d113      	bne.n	80060b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800608a:	4a3d      	ldr	r2, [pc, #244]	@ (8006180 <inc_lock+0x118>)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	4413      	add	r3, r2
 8006092:	3304      	adds	r3, #4
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800609a:	429a      	cmp	r2, r3
 800609c:	d109      	bne.n	80060b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800609e:	4a38      	ldr	r2, [pc, #224]	@ (8006180 <inc_lock+0x118>)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	4413      	add	r3, r2
 80060a6:	3308      	adds	r3, #8
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d006      	beq.n	80060c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3301      	adds	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d9dc      	bls.n	8006078 <inc_lock+0x10>
 80060be:	e000      	b.n	80060c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80060c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d132      	bne.n	800612e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e002      	b.n	80060d4 <inc_lock+0x6c>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d806      	bhi.n	80060e8 <inc_lock+0x80>
 80060da:	4a29      	ldr	r2, [pc, #164]	@ (8006180 <inc_lock+0x118>)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	4413      	add	r3, r2
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f2      	bne.n	80060ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d101      	bne.n	80060f2 <inc_lock+0x8a>
 80060ee:	2300      	movs	r3, #0
 80060f0:	e040      	b.n	8006174 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4922      	ldr	r1, [pc, #136]	@ (8006180 <inc_lock+0x118>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	440b      	add	r3, r1
 80060fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	491e      	ldr	r1, [pc, #120]	@ (8006180 <inc_lock+0x118>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	440b      	add	r3, r1
 800610c:	3304      	adds	r3, #4
 800610e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695a      	ldr	r2, [r3, #20]
 8006114:	491a      	ldr	r1, [pc, #104]	@ (8006180 <inc_lock+0x118>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	440b      	add	r3, r1
 800611c:	3308      	adds	r3, #8
 800611e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006120:	4a17      	ldr	r2, [pc, #92]	@ (8006180 <inc_lock+0x118>)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	4413      	add	r3, r2
 8006128:	330c      	adds	r3, #12
 800612a:	2200      	movs	r2, #0
 800612c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <inc_lock+0xe0>
 8006134:	4a12      	ldr	r2, [pc, #72]	@ (8006180 <inc_lock+0x118>)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	330c      	adds	r3, #12
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <inc_lock+0xe0>
 8006144:	2300      	movs	r3, #0
 8006146:	e015      	b.n	8006174 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <inc_lock+0xf8>
 800614e:	4a0c      	ldr	r2, [pc, #48]	@ (8006180 <inc_lock+0x118>)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	4413      	add	r3, r2
 8006156:	330c      	adds	r3, #12
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	e001      	b.n	8006164 <inc_lock+0xfc>
 8006160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006164:	4906      	ldr	r1, [pc, #24]	@ (8006180 <inc_lock+0x118>)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	440b      	add	r3, r1
 800616c:	330c      	adds	r3, #12
 800616e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000404 	.word	0x20000404

08006184 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3b01      	subs	r3, #1
 8006190:	607b      	str	r3, [r7, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d825      	bhi.n	80061e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006198:	4a17      	ldr	r2, [pc, #92]	@ (80061f8 <dec_lock+0x74>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	4413      	add	r3, r2
 80061a0:	330c      	adds	r3, #12
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80061a6:	89fb      	ldrh	r3, [r7, #14]
 80061a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ac:	d101      	bne.n	80061b2 <dec_lock+0x2e>
 80061ae:	2300      	movs	r3, #0
 80061b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80061b2:	89fb      	ldrh	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <dec_lock+0x3a>
 80061b8:	89fb      	ldrh	r3, [r7, #14]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80061be:	4a0e      	ldr	r2, [pc, #56]	@ (80061f8 <dec_lock+0x74>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	4413      	add	r3, r2
 80061c6:	330c      	adds	r3, #12
 80061c8:	89fa      	ldrh	r2, [r7, #14]
 80061ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061cc:	89fb      	ldrh	r3, [r7, #14]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d105      	bne.n	80061de <dec_lock+0x5a>
 80061d2:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <dec_lock+0x74>)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	4413      	add	r3, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	737b      	strb	r3, [r7, #13]
 80061e2:	e001      	b.n	80061e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80061e4:	2302      	movs	r3, #2
 80061e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80061e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20000404 	.word	0x20000404

080061fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e010      	b.n	800622c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800620a:	4a0d      	ldr	r2, [pc, #52]	@ (8006240 <clear_lock+0x44>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4413      	add	r3, r2
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d105      	bne.n	8006226 <clear_lock+0x2a>
 800621a:	4a09      	ldr	r2, [pc, #36]	@ (8006240 <clear_lock+0x44>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	4413      	add	r3, r2
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d9eb      	bls.n	800620a <clear_lock+0xe>
	}
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	20000404 	.word	0x20000404

08006244 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	78db      	ldrb	r3, [r3, #3]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d034      	beq.n	80062c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7858      	ldrb	r0, [r3, #1]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006268:	2301      	movs	r3, #1
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	f7ff fd3e 	bl	8005cec <disk_write>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
 800627a:	e022      	b.n	80062c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	429a      	cmp	r2, r3
 8006290:	d217      	bcs.n	80062c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	789b      	ldrb	r3, [r3, #2]
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	e010      	b.n	80062bc <sync_window+0x78>
					wsect += fs->fsize;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4413      	add	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7858      	ldrb	r0, [r3, #1]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062ae:	2301      	movs	r3, #1
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	f7ff fd1b 	bl	8005cec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d8eb      	bhi.n	800629a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d01b      	beq.n	800631c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff ffad 	bl	8006244 <sync_window>
 80062ea:	4603      	mov	r3, r0
 80062ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d113      	bne.n	800631c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7858      	ldrb	r0, [r3, #1]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062fe:	2301      	movs	r3, #1
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	f7ff fcd3 	bl	8005cac <disk_read>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800630c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006310:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006312:	2301      	movs	r3, #1
 8006314:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff87 	bl	8006244 <sync_window>
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d158      	bne.n	80063f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d148      	bne.n	80063da <sync_fs+0xb2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	791b      	ldrb	r3, [r3, #4]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d144      	bne.n	80063da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3330      	adds	r3, #48	@ 0x30
 8006354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fda8 	bl	8005eb0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3330      	adds	r3, #48	@ 0x30
 8006364:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006368:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fd37 	bl	8005de0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3330      	adds	r3, #48	@ 0x30
 8006376:	4921      	ldr	r1, [pc, #132]	@ (80063fc <sync_fs+0xd4>)
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fd4c 	bl	8005e16 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3330      	adds	r3, #48	@ 0x30
 8006382:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006386:	491e      	ldr	r1, [pc, #120]	@ (8006400 <sync_fs+0xd8>)
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fd44 	bl	8005e16 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3330      	adds	r3, #48	@ 0x30
 8006392:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7ff fd3a 	bl	8005e16 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3330      	adds	r3, #48	@ 0x30
 80063a6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f7ff fd30 	bl	8005e16 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7858      	ldrb	r0, [r3, #1]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ce:	2301      	movs	r3, #1
 80063d0:	f7ff fc8c 	bl	8005cec <disk_write>
			fs->fsi_flag = 0;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	2200      	movs	r2, #0
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fca2 	bl	8005d2c <disk_ioctl>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <sync_fs+0xca>
 80063ee:	2301      	movs	r3, #1
 80063f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	41615252 	.word	0x41615252
 8006400:	61417272 	.word	0x61417272

08006404 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	3b02      	subs	r3, #2
 8006412:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	3b02      	subs	r3, #2
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d301      	bcc.n	8006424 <clust2sect+0x20>
 8006420:	2300      	movs	r3, #0
 8006422:	e008      	b.n	8006436 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	895b      	ldrh	r3, [r3, #10]
 8006428:	461a      	mov	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	fb03 f202 	mul.w	r2, r3, r2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	4413      	add	r3, r2
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d904      	bls.n	8006462 <get_fat+0x20>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e08e      	b.n	8006586 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800646c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b03      	cmp	r3, #3
 8006474:	d061      	beq.n	800653a <get_fat+0xf8>
 8006476:	2b03      	cmp	r3, #3
 8006478:	dc7b      	bgt.n	8006572 <get_fat+0x130>
 800647a:	2b01      	cmp	r3, #1
 800647c:	d002      	beq.n	8006484 <get_fat+0x42>
 800647e:	2b02      	cmp	r3, #2
 8006480:	d041      	beq.n	8006506 <get_fat+0xc4>
 8006482:	e076      	b.n	8006572 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6a1a      	ldr	r2, [r3, #32]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	0a5b      	lsrs	r3, r3, #9
 800649a:	4413      	add	r3, r2
 800649c:	4619      	mov	r1, r3
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f7ff ff14 	bl	80062cc <move_window>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d166      	bne.n	8006578 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	60fa      	str	r2, [r7, #12]
 80064b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4413      	add	r3, r2
 80064b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	0a5b      	lsrs	r3, r3, #9
 80064c6:	4413      	add	r3, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	6938      	ldr	r0, [r7, #16]
 80064cc:	f7ff fefe 	bl	80062cc <move_window>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d152      	bne.n	800657c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <get_fat+0xba>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	e002      	b.n	8006502 <get_fat+0xc0>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006502:	617b      	str	r3, [r7, #20]
			break;
 8006504:	e03f      	b.n	8006586 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	4413      	add	r3, r2
 8006510:	4619      	mov	r1, r3
 8006512:	6938      	ldr	r0, [r7, #16]
 8006514:	f7ff feda 	bl	80062cc <move_window>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d130      	bne.n	8006580 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800652c:	4413      	add	r3, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fc1a 	bl	8005d68 <ld_word>
 8006534:	4603      	mov	r3, r0
 8006536:	617b      	str	r3, [r7, #20]
			break;
 8006538:	e025      	b.n	8006586 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6a1a      	ldr	r2, [r3, #32]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	4413      	add	r3, r2
 8006544:	4619      	mov	r1, r3
 8006546:	6938      	ldr	r0, [r7, #16]
 8006548:	f7ff fec0 	bl	80062cc <move_window>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d118      	bne.n	8006584 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006560:	4413      	add	r3, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fc19 	bl	8005d9a <ld_dword>
 8006568:	4603      	mov	r3, r0
 800656a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800656e:	617b      	str	r3, [r7, #20]
			break;
 8006570:	e009      	b.n	8006586 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006572:	2301      	movs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e006      	b.n	8006586 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006584:	bf00      	nop
		}
	}

	return val;
 8006586:	697b      	ldr	r3, [r7, #20]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b089      	sub	sp, #36	@ 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800659c:	2302      	movs	r3, #2
 800659e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	f240 80d9 	bls.w	800675a <put_fat+0x1ca>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	f080 80d3 	bcs.w	800675a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	f000 8096 	beq.w	80066ea <put_fat+0x15a>
 80065be:	2b03      	cmp	r3, #3
 80065c0:	f300 80cb 	bgt.w	800675a <put_fat+0x1ca>
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d002      	beq.n	80065ce <put_fat+0x3e>
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d06e      	beq.n	80066aa <put_fat+0x11a>
 80065cc:	e0c5      	b.n	800675a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4413      	add	r3, r2
 80065da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1a      	ldr	r2, [r3, #32]
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	0a5b      	lsrs	r3, r3, #9
 80065e4:	4413      	add	r3, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7ff fe6f 	bl	80062cc <move_window>
 80065ee:	4603      	mov	r3, r0
 80065f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065f2:	7ffb      	ldrb	r3, [r7, #31]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 80a9 	bne.w	800674c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	1c59      	adds	r1, r3, #1
 8006604:	61b9      	str	r1, [r7, #24]
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	4413      	add	r3, r2
 800660c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00d      	beq.n	8006634 <put_fat+0xa4>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b25b      	sxtb	r3, r3
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	b25a      	sxtb	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	b25b      	sxtb	r3, r3
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	b25b      	sxtb	r3, r3
 800662c:	4313      	orrs	r3, r2
 800662e:	b25b      	sxtb	r3, r3
 8006630:	b2db      	uxtb	r3, r3
 8006632:	e001      	b.n	8006638 <put_fat+0xa8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1a      	ldr	r2, [r3, #32]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	0a5b      	lsrs	r3, r3, #9
 800664a:	4413      	add	r3, r2
 800664c:	4619      	mov	r1, r3
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff fe3c 	bl	80062cc <move_window>
 8006654:	4603      	mov	r3, r0
 8006656:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006658:	7ffb      	ldrb	r3, [r7, #31]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d178      	bne.n	8006750 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666a:	4413      	add	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <put_fat+0xf0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	091b      	lsrs	r3, r3, #4
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e00e      	b.n	800669e <put_fat+0x10e>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	b25b      	sxtb	r3, r3
 8006686:	f023 030f 	bic.w	r3, r3, #15
 800668a:	b25a      	sxtb	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	b25b      	sxtb	r3, r3
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	b25b      	sxtb	r3, r3
 8006698:	4313      	orrs	r3, r2
 800669a:	b25b      	sxtb	r3, r3
 800669c:	b2db      	uxtb	r3, r3
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	70da      	strb	r2, [r3, #3]
			break;
 80066a8:	e057      	b.n	800675a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	0a1b      	lsrs	r3, r3, #8
 80066b2:	4413      	add	r3, r2
 80066b4:	4619      	mov	r1, r3
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff fe08 	bl	80062cc <move_window>
 80066bc:	4603      	mov	r3, r0
 80066be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066c0:	7ffb      	ldrb	r3, [r7, #31]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d146      	bne.n	8006754 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80066d4:	4413      	add	r3, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	b292      	uxth	r2, r2
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fb7f 	bl	8005de0 <st_word>
			fs->wflag = 1;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	70da      	strb	r2, [r3, #3]
			break;
 80066e8:	e037      	b.n	800675a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1a      	ldr	r2, [r3, #32]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	09db      	lsrs	r3, r3, #7
 80066f2:	4413      	add	r3, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fde8 	bl	80062cc <move_window>
 80066fc:	4603      	mov	r3, r0
 80066fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d128      	bne.n	8006758 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800671a:	4413      	add	r3, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fb3c 	bl	8005d9a <ld_dword>
 8006722:	4603      	mov	r3, r0
 8006724:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006728:	4323      	orrs	r3, r4
 800672a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800673a:	4413      	add	r3, r2
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fb69 	bl	8005e16 <st_dword>
			fs->wflag = 1;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	70da      	strb	r2, [r3, #3]
			break;
 800674a:	e006      	b.n	800675a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800674c:	bf00      	nop
 800674e:	e004      	b.n	800675a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006750:	bf00      	nop
 8006752:	e002      	b.n	800675a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006754:	bf00      	nop
 8006756:	e000      	b.n	800675a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006758:	bf00      	nop
		}
	}
	return res;
 800675a:	7ffb      	ldrb	r3, [r7, #31]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3724      	adds	r7, #36	@ 0x24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd90      	pop	{r4, r7, pc}

08006764 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d904      	bls.n	800678a <remove_chain+0x26>
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	d301      	bcc.n	800678e <remove_chain+0x2a>
 800678a:	2302      	movs	r3, #2
 800678c:	e04b      	b.n	8006826 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00c      	beq.n	80067ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	69b8      	ldr	r0, [r7, #24]
 800679c:	f7ff fef8 	bl	8006590 <put_fat>
 80067a0:	4603      	mov	r3, r0
 80067a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80067a4:	7ffb      	ldrb	r3, [r7, #31]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <remove_chain+0x4a>
 80067aa:	7ffb      	ldrb	r3, [r7, #31]
 80067ac:	e03b      	b.n	8006826 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fe46 	bl	8006442 <get_fat>
 80067b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d031      	beq.n	8006822 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <remove_chain+0x64>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e02e      	b.n	8006826 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067ce:	d101      	bne.n	80067d4 <remove_chain+0x70>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e028      	b.n	8006826 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80067d4:	2200      	movs	r2, #0
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	69b8      	ldr	r0, [r7, #24]
 80067da:	f7ff fed9 	bl	8006590 <put_fat>
 80067de:	4603      	mov	r3, r0
 80067e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80067e2:	7ffb      	ldrb	r3, [r7, #31]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <remove_chain+0x88>
 80067e8:	7ffb      	ldrb	r3, [r7, #31]
 80067ea:	e01c      	b.n	8006826 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	3b02      	subs	r3, #2
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d20b      	bcs.n	8006812 <remove_chain+0xae>
			fs->free_clst++;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	791b      	ldrb	r3, [r3, #4]
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	429a      	cmp	r2, r3
 800681e:	d3c6      	bcc.n	80067ae <remove_chain+0x4a>
 8006820:	e000      	b.n	8006824 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006822:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3720      	adds	r7, #32
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b088      	sub	sp, #32
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10d      	bne.n	8006860 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d004      	beq.n	800685a <create_chain+0x2c>
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	429a      	cmp	r2, r3
 8006858:	d31b      	bcc.n	8006892 <create_chain+0x64>
 800685a:	2301      	movs	r3, #1
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	e018      	b.n	8006892 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fded 	bl	8006442 <get_fat>
 8006868:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d801      	bhi.n	8006874 <create_chain+0x46>
 8006870:	2301      	movs	r3, #1
 8006872:	e070      	b.n	8006956 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800687a:	d101      	bne.n	8006880 <create_chain+0x52>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	e06a      	b.n	8006956 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	429a      	cmp	r2, r3
 8006888:	d201      	bcs.n	800688e <create_chain+0x60>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	e063      	b.n	8006956 <create_chain+0x128>
		scl = clst;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3301      	adds	r3, #1
 800689a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d307      	bcc.n	80068b6 <create_chain+0x88>
				ncl = 2;
 80068a6:	2302      	movs	r3, #2
 80068a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d901      	bls.n	80068b6 <create_chain+0x88>
 80068b2:	2300      	movs	r3, #0
 80068b4:	e04f      	b.n	8006956 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068b6:	69f9      	ldr	r1, [r7, #28]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fdc2 	bl	8006442 <get_fat>
 80068be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00e      	beq.n	80068e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d003      	beq.n	80068d4 <create_chain+0xa6>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068d2:	d101      	bne.n	80068d8 <create_chain+0xaa>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	e03e      	b.n	8006956 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d1da      	bne.n	8006896 <create_chain+0x68>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e038      	b.n	8006956 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80068e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80068e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068ea:	69f9      	ldr	r1, [r7, #28]
 80068ec:	6938      	ldr	r0, [r7, #16]
 80068ee:	f7ff fe4f 	bl	8006590 <put_fat>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <create_chain+0xe2>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d006      	beq.n	8006910 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7ff fe42 	bl	8006590 <put_fat>
 800690c:	4603      	mov	r3, r0
 800690e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d116      	bne.n	8006944 <create_chain+0x116>
		fs->last_clst = ncl;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	3b02      	subs	r3, #2
 8006926:	429a      	cmp	r2, r3
 8006928:	d804      	bhi.n	8006934 <create_chain+0x106>
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	1e5a      	subs	r2, r3, #1
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	711a      	strb	r2, [r3, #4]
 8006942:	e007      	b.n	8006954 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <create_chain+0x122>
 800694a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800694e:	e000      	b.n	8006952 <create_chain+0x124>
 8006950:	2301      	movs	r3, #1
 8006952:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006954:	69fb      	ldr	r3, [r7, #28]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800695e:	b480      	push	{r7}
 8006960:	b087      	sub	sp, #28
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	3304      	adds	r3, #4
 8006974:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	0a5b      	lsrs	r3, r3, #9
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	8952      	ldrh	r2, [r2, #10]
 800697e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006982:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1d1a      	adds	r2, r3, #4
 8006988:	613a      	str	r2, [r7, #16]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <clmt_clust+0x3a>
 8006994:	2300      	movs	r3, #0
 8006996:	e010      	b.n	80069ba <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	429a      	cmp	r2, r3
 800699e:	d307      	bcc.n	80069b0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3304      	adds	r3, #4
 80069ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069ae:	e7e9      	b.n	8006984 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80069b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069dc:	d204      	bcs.n	80069e8 <dir_sdi+0x22>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <dir_sdi+0x26>
		return FR_INT_ERR;
 80069e8:	2302      	movs	r3, #2
 80069ea:	e063      	b.n	8006ab4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <dir_sdi+0x46>
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d902      	bls.n	8006a0c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10c      	bne.n	8006a2c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	8912      	ldrh	r2, [r2, #8]
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d301      	bcc.n	8006a22 <dir_sdi+0x5c>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e048      	b.n	8006ab4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	61da      	str	r2, [r3, #28]
 8006a2a:	e029      	b.n	8006a80 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	895b      	ldrh	r3, [r3, #10]
 8006a30:	025b      	lsls	r3, r3, #9
 8006a32:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a34:	e019      	b.n	8006a6a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6979      	ldr	r1, [r7, #20]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fd01 	bl	8006442 <get_fat>
 8006a40:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a48:	d101      	bne.n	8006a4e <dir_sdi+0x88>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e032      	b.n	8006ab4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d904      	bls.n	8006a5e <dir_sdi+0x98>
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d301      	bcc.n	8006a62 <dir_sdi+0x9c>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e028      	b.n	8006ab4 <dir_sdi+0xee>
			ofs -= csz;
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d2e1      	bcs.n	8006a36 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006a72:	6979      	ldr	r1, [r7, #20]
 8006a74:	6938      	ldr	r0, [r7, #16]
 8006a76:	f7ff fcc5 	bl	8006404 <clust2sect>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <dir_sdi+0xcc>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e010      	b.n	8006ab4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69da      	ldr	r2, [r3, #28]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	0a5b      	lsrs	r3, r3, #9
 8006a9a:	441a      	add	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	441a      	add	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	3320      	adds	r3, #32
 8006ad2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <dir_next+0x28>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ae2:	d301      	bcc.n	8006ae8 <dir_next+0x2c>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	e0aa      	b.n	8006c3e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 8098 	bne.w	8006c24 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	8912      	ldrh	r2, [r2, #8]
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	f0c0 8088 	bcc.w	8006c24 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	61da      	str	r2, [r3, #28]
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	e08f      	b.n	8006c3e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	0a5b      	lsrs	r3, r3, #9
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	8952      	ldrh	r2, [r2, #10]
 8006b26:	3a01      	subs	r2, #1
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d17a      	bne.n	8006c24 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f7ff fc83 	bl	8006442 <get_fat>
 8006b3c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d801      	bhi.n	8006b48 <dir_next+0x8c>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e07a      	b.n	8006c3e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4e:	d101      	bne.n	8006b54 <dir_next+0x98>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e074      	b.n	8006c3e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d358      	bcc.n	8006c10 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	61da      	str	r2, [r3, #28]
 8006b6a:	2304      	movs	r3, #4
 8006b6c:	e067      	b.n	8006c3e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f7ff fe59 	bl	800682e <create_chain>
 8006b7c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <dir_next+0xcc>
 8006b84:	2307      	movs	r3, #7
 8006b86:	e05a      	b.n	8006c3e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <dir_next+0xd6>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e055      	b.n	8006c3e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b98:	d101      	bne.n	8006b9e <dir_next+0xe2>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e04f      	b.n	8006c3e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fb50 	bl	8006244 <sync_window>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <dir_next+0xf2>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e047      	b.n	8006c3e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3330      	adds	r3, #48	@ 0x30
 8006bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f979 	bl	8005eb0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fc1d 	bl	8006404 <clust2sect>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006bd0:	e012      	b.n	8006bf8 <dir_next+0x13c>
						fs->wflag = 1;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fb33 	bl	8006244 <sync_window>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <dir_next+0x12c>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e02a      	b.n	8006c3e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	3301      	adds	r3, #1
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	895b      	ldrh	r3, [r3, #10]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d3e6      	bcc.n	8006bd2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff fbf3 	bl	8006404 <clust2sect>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c36:	441a      	add	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c56:	2100      	movs	r1, #0
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff feb4 	bl	80069c6 <dir_sdi>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d12b      	bne.n	8006cc0 <dir_alloc+0x7a>
		n = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	4619      	mov	r1, r3
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fb2a 	bl	80062cc <move_window>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d11d      	bne.n	8006cbe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2be5      	cmp	r3, #229	@ 0xe5
 8006c8a:	d004      	beq.n	8006c96 <dir_alloc+0x50>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d102      	bne.n	8006caa <dir_alloc+0x64>
 8006ca4:	e00c      	b.n	8006cc0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006caa:	2101      	movs	r1, #1
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff ff05 	bl	8006abc <dir_next>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0d7      	beq.n	8006c6c <dir_alloc+0x26>
 8006cbc:	e000      	b.n	8006cc0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006cbe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d101      	bne.n	8006cca <dir_alloc+0x84>
 8006cc6:	2307      	movs	r3, #7
 8006cc8:	75fb      	strb	r3, [r7, #23]
	return res;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	331a      	adds	r3, #26
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff f840 	bl	8005d68 <ld_word>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d109      	bne.n	8006d08 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	3314      	adds	r3, #20
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff f835 	bl	8005d68 <ld_word>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d08:	68fb      	ldr	r3, [r7, #12]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	331a      	adds	r3, #26
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	b292      	uxth	r2, r2
 8006d26:	4611      	mov	r1, r2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff f859 	bl	8005de0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d109      	bne.n	8006d4a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f103 0214 	add.w	r2, r3, #20
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0c1b      	lsrs	r3, r3, #16
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f7ff f84b 	bl	8005de0 <st_word>
	}
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b086      	sub	sp, #24
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006d66:	e03c      	b.n	8006de2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6938      	ldr	r0, [r7, #16]
 8006d70:	f7ff faac 	bl	80062cc <move_window>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d136      	bne.n	8006dec <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	75fb      	strb	r3, [r7, #23]
 8006d90:	e031      	b.n	8006df6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	330b      	adds	r3, #11
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d9e:	73bb      	strb	r3, [r7, #14]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7bba      	ldrb	r2, [r7, #14]
 8006da4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	2be5      	cmp	r3, #229	@ 0xe5
 8006daa:	d011      	beq.n	8006dd0 <dir_read+0x7e>
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8006db0:	d00e      	beq.n	8006dd0 <dir_read+0x7e>
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b0f      	cmp	r3, #15
 8006db6:	d00b      	beq.n	8006dd0 <dir_read+0x7e>
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	f023 0320 	bic.w	r3, r3, #32
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00f      	beq.n	8006df0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fe72 	bl	8006abc <dir_next>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <dir_read+0xa2>
	while (dp->sect) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1be      	bne.n	8006d68 <dir_read+0x16>
 8006dea:	e004      	b.n	8006df6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006dec:	bf00      	nop
 8006dee:	e002      	b.n	8006df6 <dir_read+0xa4>
				break;
 8006df0:	bf00      	nop
 8006df2:	e000      	b.n	8006df6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006df4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <dir_read+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	61da      	str	r2, [r3, #28]
	return res;
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fdd2 	bl	80069c6 <dir_sdi>
 8006e22:	4603      	mov	r3, r0
 8006e24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <dir_find+0x24>
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	e03e      	b.n	8006eae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6938      	ldr	r0, [r7, #16]
 8006e38:	f7ff fa48 	bl	80062cc <move_window>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d12f      	bne.n	8006ea6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <dir_find+0x4e>
 8006e54:	2304      	movs	r3, #4
 8006e56:	75fb      	strb	r3, [r7, #23]
 8006e58:	e028      	b.n	8006eac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	330b      	adds	r3, #11
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	330b      	adds	r3, #11
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <dir_find+0x86>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a18      	ldr	r0, [r3, #32]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3324      	adds	r3, #36	@ 0x24
 8006e84:	220b      	movs	r2, #11
 8006e86:	4619      	mov	r1, r3
 8006e88:	f7ff f82d 	bl	8005ee6 <mem_cmp>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff fe11 	bl	8006abc <dir_next>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0c5      	beq.n	8006e30 <dir_find+0x24>
 8006ea4:	e002      	b.n	8006eac <dir_find+0xa0>
		if (res != FR_OK) break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006eaa:	bf00      	nop

	return res;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff febd 	bl	8006c46 <dir_alloc>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11c      	bne.n	8006f10 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	4619      	mov	r1, r3
 8006edc:	68b8      	ldr	r0, [r7, #8]
 8006ede:	f7ff f9f5 	bl	80062cc <move_window>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d111      	bne.n	8006f10 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe ffdb 	bl	8005eb0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a18      	ldr	r0, [r3, #32]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3324      	adds	r3, #36	@ 0x24
 8006f02:	220b      	movs	r2, #11
 8006f04:	4619      	mov	r1, r3
 8006f06:	f7fe ffb2 	bl	8005e6e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b086      	sub	sp, #24
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2200      	movs	r2, #0
 8006f28:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d04f      	beq.n	8006fd2 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006f3a:	e022      	b.n	8006f82 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	6179      	str	r1, [r7, #20]
 8006f46:	4413      	add	r3, r2
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d016      	beq.n	8006f80 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	d101      	bne.n	8006f5c <get_fileinfo+0x42>
 8006f58:	23e5      	movs	r3, #229	@ 0xe5
 8006f5a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b09      	cmp	r3, #9
 8006f60:	d106      	bne.n	8006f70 <get_fileinfo+0x56>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	613a      	str	r2, [r7, #16]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	222e      	movs	r2, #46	@ 0x2e
 8006f6e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	613a      	str	r2, [r7, #16]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	4413      	add	r3, r2
 8006f7a:	7bfa      	ldrb	r2, [r7, #15]
 8006f7c:	725a      	strb	r2, [r3, #9]
 8006f7e:	e000      	b.n	8006f82 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006f80:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b0a      	cmp	r3, #10
 8006f86:	d9d9      	bls.n	8006f3c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3309      	adds	r3, #9
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	7ada      	ldrb	r2, [r3, #11]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	331c      	adds	r3, #28
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe fef8 	bl	8005d9a <ld_dword>
 8006faa:	4602      	mov	r2, r0
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	3316      	adds	r3, #22
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe feef 	bl	8005d9a <ld_dword>
 8006fbc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	80da      	strh	r2, [r3, #6]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	809a      	strh	r2, [r3, #4]
 8006fd0:	e000      	b.n	8006fd4 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006fd2:	bf00      	nop
}
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3324      	adds	r3, #36	@ 0x24
 8006ff0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006ff2:	220b      	movs	r2, #11
 8006ff4:	2120      	movs	r1, #32
 8006ff6:	68b8      	ldr	r0, [r7, #8]
 8006ff8:	f7fe ff5a 	bl	8005eb0 <mem_set>
	si = i = 0; ni = 8;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	2308      	movs	r3, #8
 8007006:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007016:	7efb      	ldrb	r3, [r7, #27]
 8007018:	2b20      	cmp	r3, #32
 800701a:	d94e      	bls.n	80070ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800701c:	7efb      	ldrb	r3, [r7, #27]
 800701e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007020:	d006      	beq.n	8007030 <create_name+0x54>
 8007022:	7efb      	ldrb	r3, [r7, #27]
 8007024:	2b5c      	cmp	r3, #92	@ 0x5c
 8007026:	d110      	bne.n	800704a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007028:	e002      	b.n	8007030 <create_name+0x54>
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	3301      	adds	r3, #1
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b2f      	cmp	r3, #47	@ 0x2f
 800703a:	d0f6      	beq.n	800702a <create_name+0x4e>
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b5c      	cmp	r3, #92	@ 0x5c
 8007046:	d0f0      	beq.n	800702a <create_name+0x4e>
			break;
 8007048:	e038      	b.n	80070bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800704a:	7efb      	ldrb	r3, [r7, #27]
 800704c:	2b2e      	cmp	r3, #46	@ 0x2e
 800704e:	d003      	beq.n	8007058 <create_name+0x7c>
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d30c      	bcc.n	8007072 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b0b      	cmp	r3, #11
 800705c:	d002      	beq.n	8007064 <create_name+0x88>
 800705e:	7efb      	ldrb	r3, [r7, #27]
 8007060:	2b2e      	cmp	r3, #46	@ 0x2e
 8007062:	d001      	beq.n	8007068 <create_name+0x8c>
 8007064:	2306      	movs	r3, #6
 8007066:	e044      	b.n	80070f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007068:	2308      	movs	r3, #8
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	230b      	movs	r3, #11
 800706e:	617b      	str	r3, [r7, #20]
			continue;
 8007070:	e022      	b.n	80070b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007072:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007076:	2b00      	cmp	r3, #0
 8007078:	da04      	bge.n	8007084 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800707a:	7efb      	ldrb	r3, [r7, #27]
 800707c:	3b80      	subs	r3, #128	@ 0x80
 800707e:	4a1f      	ldr	r2, [pc, #124]	@ (80070fc <create_name+0x120>)
 8007080:	5cd3      	ldrb	r3, [r2, r3]
 8007082:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007084:	7efb      	ldrb	r3, [r7, #27]
 8007086:	4619      	mov	r1, r3
 8007088:	481d      	ldr	r0, [pc, #116]	@ (8007100 <create_name+0x124>)
 800708a:	f7fe ff53 	bl	8005f34 <chk_chr>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <create_name+0xbc>
 8007094:	2306      	movs	r3, #6
 8007096:	e02c      	b.n	80070f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007098:	7efb      	ldrb	r3, [r7, #27]
 800709a:	2b60      	cmp	r3, #96	@ 0x60
 800709c:	d905      	bls.n	80070aa <create_name+0xce>
 800709e:	7efb      	ldrb	r3, [r7, #27]
 80070a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80070a2:	d802      	bhi.n	80070aa <create_name+0xce>
 80070a4:	7efb      	ldrb	r3, [r7, #27]
 80070a6:	3b20      	subs	r3, #32
 80070a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	613a      	str	r2, [r7, #16]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	4413      	add	r3, r2
 80070b4:	7efa      	ldrb	r2, [r7, #27]
 80070b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80070b8:	e7a6      	b.n	8007008 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80070ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	441a      	add	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <create_name+0xf4>
 80070cc:	2306      	movs	r3, #6
 80070ce:	e010      	b.n	80070f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2be5      	cmp	r3, #229	@ 0xe5
 80070d6:	d102      	bne.n	80070de <create_name+0x102>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2205      	movs	r2, #5
 80070dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070de:	7efb      	ldrb	r3, [r7, #27]
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d801      	bhi.n	80070e8 <create_name+0x10c>
 80070e4:	2204      	movs	r2, #4
 80070e6:	e000      	b.n	80070ea <create_name+0x10e>
 80070e8:	2200      	movs	r2, #0
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	330b      	adds	r3, #11
 80070ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80070f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3720      	adds	r7, #32
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	08009498 	.word	0x08009498
 8007100:	0800940c 	.word	0x0800940c

08007104 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007118:	e002      	b.n	8007120 <follow_path+0x1c>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b2f      	cmp	r3, #47	@ 0x2f
 8007126:	d0f8      	beq.n	800711a <follow_path+0x16>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b5c      	cmp	r3, #92	@ 0x5c
 800712e:	d0f4      	beq.n	800711a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2200      	movs	r2, #0
 8007134:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b1f      	cmp	r3, #31
 800713c:	d80a      	bhi.n	8007154 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2280      	movs	r2, #128	@ 0x80
 8007142:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007146:	2100      	movs	r1, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fc3c 	bl	80069c6 <dir_sdi>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]
 8007152:	e043      	b.n	80071dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007154:	463b      	mov	r3, r7
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff ff3f 	bl	8006fdc <create_name>
 800715e:	4603      	mov	r3, r0
 8007160:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d134      	bne.n	80071d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fe4f 	bl	8006e0c <dir_find>
 800716e:	4603      	mov	r3, r0
 8007170:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007178:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b04      	cmp	r3, #4
 8007184:	d127      	bne.n	80071d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d122      	bne.n	80071d6 <follow_path+0xd2>
 8007190:	2305      	movs	r3, #5
 8007192:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007194:	e01f      	b.n	80071d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d11c      	bne.n	80071da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	799b      	ldrb	r3, [r3, #6]
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80071ac:	2305      	movs	r3, #5
 80071ae:	75fb      	strb	r3, [r7, #23]
 80071b0:	e014      	b.n	80071dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c0:	4413      	add	r3, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fd85 	bl	8006cd4 <ld_clust>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071d0:	e7c0      	b.n	8007154 <follow_path+0x50>
			if (res != FR_OK) break;
 80071d2:	bf00      	nop
 80071d4:	e002      	b.n	80071dc <follow_path+0xd8>
				break;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071da:	bf00      	nop
			}
		}
	}

	return res;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b087      	sub	sp, #28
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80071ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d031      	beq.n	8007260 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e002      	b.n	800720a <get_ldnumber+0x24>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3301      	adds	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b20      	cmp	r3, #32
 8007210:	d903      	bls.n	800721a <get_ldnumber+0x34>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b3a      	cmp	r3, #58	@ 0x3a
 8007218:	d1f4      	bne.n	8007204 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007220:	d11c      	bne.n	800725c <get_ldnumber+0x76>
			tp = *path;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	60fa      	str	r2, [r7, #12]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	3b30      	subs	r3, #48	@ 0x30
 8007232:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b09      	cmp	r3, #9
 8007238:	d80e      	bhi.n	8007258 <get_ldnumber+0x72>
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	429a      	cmp	r2, r3
 8007240:	d10a      	bne.n	8007258 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d107      	bne.n	8007258 <get_ldnumber+0x72>
					vol = (int)i;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	3301      	adds	r3, #1
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	e002      	b.n	8007262 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800725c:	2300      	movs	r3, #0
 800725e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007260:	693b      	ldr	r3, [r7, #16]
}
 8007262:	4618      	mov	r0, r3
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	70da      	strb	r2, [r3, #3]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007286:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff f81e 	bl	80062cc <move_window>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <check_fs+0x2a>
 8007296:	2304      	movs	r3, #4
 8007298:	e038      	b.n	800730c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3330      	adds	r3, #48	@ 0x30
 800729e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fd60 	bl	8005d68 <ld_word>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <check_fs+0x48>
 80072b4:	2303      	movs	r3, #3
 80072b6:	e029      	b.n	800730c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072be:	2be9      	cmp	r3, #233	@ 0xe9
 80072c0:	d009      	beq.n	80072d6 <check_fs+0x66>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072c8:	2beb      	cmp	r3, #235	@ 0xeb
 80072ca:	d11e      	bne.n	800730a <check_fs+0x9a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80072d2:	2b90      	cmp	r3, #144	@ 0x90
 80072d4:	d119      	bne.n	800730a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3330      	adds	r3, #48	@ 0x30
 80072da:	3336      	adds	r3, #54	@ 0x36
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe fd5c 	bl	8005d9a <ld_dword>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80072e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007314 <check_fs+0xa4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d101      	bne.n	80072f2 <check_fs+0x82>
 80072ee:	2300      	movs	r3, #0
 80072f0:	e00c      	b.n	800730c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3330      	adds	r3, #48	@ 0x30
 80072f6:	3352      	adds	r3, #82	@ 0x52
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fd4e 	bl	8005d9a <ld_dword>
 80072fe:	4603      	mov	r3, r0
 8007300:	4a05      	ldr	r2, [pc, #20]	@ (8007318 <check_fs+0xa8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d101      	bne.n	800730a <check_fs+0x9a>
 8007306:	2300      	movs	r3, #0
 8007308:	e000      	b.n	800730c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800730a:	2302      	movs	r3, #2
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	00544146 	.word	0x00544146
 8007318:	33544146 	.word	0x33544146

0800731c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b096      	sub	sp, #88	@ 0x58
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff ff58 	bl	80071e6 <get_ldnumber>
 8007336:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733a:	2b00      	cmp	r3, #0
 800733c:	da01      	bge.n	8007342 <find_volume+0x26>
 800733e:	230b      	movs	r3, #11
 8007340:	e22d      	b.n	800779e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007342:	4aa1      	ldr	r2, [pc, #644]	@ (80075c8 <find_volume+0x2ac>)
 8007344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800734a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <find_volume+0x3a>
 8007352:	230c      	movs	r3, #12
 8007354:	e223      	b.n	800779e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800735a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01a      	beq.n	80073a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fc5b 	bl	8005c2c <disk_status>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800737c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10c      	bne.n	80073a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <find_volume+0x82>
 800738e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800739a:	230a      	movs	r3, #10
 800739c:	e1ff      	b.n	800779e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800739e:	2300      	movs	r3, #0
 80073a0:	e1fd      	b.n	800779e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80073a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80073b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fc53 	bl	8005c60 <disk_initialize>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80073c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80073cc:	2303      	movs	r3, #3
 80073ce:	e1e6      	b.n	800779e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <find_volume+0xca>
 80073d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80073e2:	230a      	movs	r3, #10
 80073e4:	e1db      	b.n	800779e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80073ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073ee:	f7ff ff3f 	bl	8007270 <check_fs>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80073f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d149      	bne.n	8007494 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007400:	2300      	movs	r3, #0
 8007402:	643b      	str	r3, [r7, #64]	@ 0x40
 8007404:	e01e      	b.n	8007444 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800740c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007414:	4413      	add	r3, r2
 8007416:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	3304      	adds	r3, #4
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d006      	beq.n	8007430 <find_volume+0x114>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	3308      	adds	r3, #8
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fcb7 	bl	8005d9a <ld_dword>
 800742c:	4602      	mov	r2, r0
 800742e:	e000      	b.n	8007432 <find_volume+0x116>
 8007430:	2200      	movs	r2, #0
 8007432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	3358      	adds	r3, #88	@ 0x58
 8007438:	443b      	add	r3, r7
 800743a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800743e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007440:	3301      	adds	r3, #1
 8007442:	643b      	str	r3, [r7, #64]	@ 0x40
 8007444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007446:	2b03      	cmp	r3, #3
 8007448:	d9dd      	bls.n	8007406 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800744a:	2300      	movs	r3, #0
 800744c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800744e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <find_volume+0x13e>
 8007454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007456:	3b01      	subs	r3, #1
 8007458:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800745a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	3358      	adds	r3, #88	@ 0x58
 8007460:	443b      	add	r3, r7
 8007462:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007466:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <find_volume+0x15e>
 800746e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007470:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007472:	f7ff fefd 	bl	8007270 <check_fs>
 8007476:	4603      	mov	r3, r0
 8007478:	e000      	b.n	800747c <find_volume+0x160>
 800747a:	2303      	movs	r3, #3
 800747c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007480:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007484:	2b01      	cmp	r3, #1
 8007486:	d905      	bls.n	8007494 <find_volume+0x178>
 8007488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800748a:	3301      	adds	r3, #1
 800748c:	643b      	str	r3, [r7, #64]	@ 0x40
 800748e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007490:	2b03      	cmp	r3, #3
 8007492:	d9e2      	bls.n	800745a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007494:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007498:	2b04      	cmp	r3, #4
 800749a:	d101      	bne.n	80074a0 <find_volume+0x184>
 800749c:	2301      	movs	r3, #1
 800749e:	e17e      	b.n	800779e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80074a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d901      	bls.n	80074ac <find_volume+0x190>
 80074a8:	230d      	movs	r3, #13
 80074aa:	e178      	b.n	800779e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	3330      	adds	r3, #48	@ 0x30
 80074b0:	330b      	adds	r3, #11
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fc58 	bl	8005d68 <ld_word>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074be:	d001      	beq.n	80074c4 <find_volume+0x1a8>
 80074c0:	230d      	movs	r3, #13
 80074c2:	e16c      	b.n	800779e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80074c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c6:	3330      	adds	r3, #48	@ 0x30
 80074c8:	3316      	adds	r3, #22
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fc4c 	bl	8005d68 <ld_word>
 80074d0:	4603      	mov	r3, r0
 80074d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80074d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <find_volume+0x1cc>
 80074da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074dc:	3330      	adds	r3, #48	@ 0x30
 80074de:	3324      	adds	r3, #36	@ 0x24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe fc5a 	bl	8005d9a <ld_dword>
 80074e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80074ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80074f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	789b      	ldrb	r3, [r3, #2]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d005      	beq.n	800750c <find_volume+0x1f0>
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	789b      	ldrb	r3, [r3, #2]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d001      	beq.n	800750c <find_volume+0x1f0>
 8007508:	230d      	movs	r3, #13
 800750a:	e148      	b.n	800779e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	461a      	mov	r2, r3
 8007512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800751a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007520:	461a      	mov	r2, r3
 8007522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007524:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	895b      	ldrh	r3, [r3, #10]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <find_volume+0x224>
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	895b      	ldrh	r3, [r3, #10]
 8007532:	461a      	mov	r2, r3
 8007534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007536:	895b      	ldrh	r3, [r3, #10]
 8007538:	3b01      	subs	r3, #1
 800753a:	4013      	ands	r3, r2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <find_volume+0x228>
 8007540:	230d      	movs	r3, #13
 8007542:	e12c      	b.n	800779e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007546:	3330      	adds	r3, #48	@ 0x30
 8007548:	3311      	adds	r3, #17
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fc0c 	bl	8005d68 <ld_word>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007556:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	891b      	ldrh	r3, [r3, #8]
 800755c:	f003 030f 	and.w	r3, r3, #15
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <find_volume+0x24e>
 8007566:	230d      	movs	r3, #13
 8007568:	e119      	b.n	800779e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756c:	3330      	adds	r3, #48	@ 0x30
 800756e:	3313      	adds	r3, #19
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe fbf9 	bl	8005d68 <ld_word>
 8007576:	4603      	mov	r3, r0
 8007578:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800757a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <find_volume+0x272>
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	3330      	adds	r3, #48	@ 0x30
 8007584:	3320      	adds	r3, #32
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fc07 	bl	8005d9a <ld_dword>
 800758c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	3330      	adds	r3, #48	@ 0x30
 8007592:	330e      	adds	r3, #14
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fbe7 	bl	8005d68 <ld_word>
 800759a:	4603      	mov	r3, r0
 800759c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800759e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <find_volume+0x28c>
 80075a4:	230d      	movs	r3, #13
 80075a6:	e0fa      	b.n	800779e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80075a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80075aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ac:	4413      	add	r3, r2
 80075ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075b0:	8912      	ldrh	r2, [r2, #8]
 80075b2:	0912      	lsrs	r2, r2, #4
 80075b4:	b292      	uxth	r2, r2
 80075b6:	4413      	add	r3, r2
 80075b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80075ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	429a      	cmp	r2, r3
 80075c0:	d204      	bcs.n	80075cc <find_volume+0x2b0>
 80075c2:	230d      	movs	r3, #13
 80075c4:	e0eb      	b.n	800779e <find_volume+0x482>
 80075c6:	bf00      	nop
 80075c8:	200003fc 	.word	0x200003fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80075cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075d4:	8952      	ldrh	r2, [r2, #10]
 80075d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80075da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <find_volume+0x2ca>
 80075e2:	230d      	movs	r3, #13
 80075e4:	e0db      	b.n	800779e <find_volume+0x482>
		fmt = FS_FAT32;
 80075e6:	2303      	movs	r3, #3
 80075e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d802      	bhi.n	80075fc <find_volume+0x2e0>
 80075f6:	2302      	movs	r3, #2
 80075f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007602:	4293      	cmp	r3, r2
 8007604:	d802      	bhi.n	800760c <find_volume+0x2f0>
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007612:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007618:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800761a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800761c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800761e:	441a      	add	r2, r3
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007624:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	441a      	add	r2, r3
 800762a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800762e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007632:	2b03      	cmp	r3, #3
 8007634:	d11e      	bne.n	8007674 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007638:	3330      	adds	r3, #48	@ 0x30
 800763a:	332a      	adds	r3, #42	@ 0x2a
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe fb93 	bl	8005d68 <ld_word>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <find_volume+0x330>
 8007648:	230d      	movs	r3, #13
 800764a:	e0a8      	b.n	800779e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800764c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764e:	891b      	ldrh	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <find_volume+0x33c>
 8007654:	230d      	movs	r3, #13
 8007656:	e0a2      	b.n	800779e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765a:	3330      	adds	r3, #48	@ 0x30
 800765c:	332c      	adds	r3, #44	@ 0x2c
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fb9b 	bl	8005d9a <ld_dword>
 8007664:	4602      	mov	r2, r0
 8007666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007668:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800766a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	647b      	str	r3, [r7, #68]	@ 0x44
 8007672:	e01f      	b.n	80076b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007676:	891b      	ldrh	r3, [r3, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <find_volume+0x364>
 800767c:	230d      	movs	r3, #13
 800767e:	e08e      	b.n	800779e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007682:	6a1a      	ldr	r2, [r3, #32]
 8007684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007686:	441a      	add	r2, r3
 8007688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800768c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007690:	2b02      	cmp	r3, #2
 8007692:	d103      	bne.n	800769c <find_volume+0x380>
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	e00a      	b.n	80076b2 <find_volume+0x396>
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	4613      	mov	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	085a      	lsrs	r2, r3, #1
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80076b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80076be:	0a5b      	lsrs	r3, r3, #9
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d201      	bcs.n	80076c8 <find_volume+0x3ac>
 80076c4:	230d      	movs	r3, #13
 80076c6:	e06a      	b.n	800779e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80076c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076ce:	611a      	str	r2, [r3, #16]
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80076d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076da:	2280      	movs	r2, #128	@ 0x80
 80076dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80076de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d149      	bne.n	800777a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	3330      	adds	r3, #48	@ 0x30
 80076ea:	3330      	adds	r3, #48	@ 0x30
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fb3b 	bl	8005d68 <ld_word>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d140      	bne.n	800777a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80076f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076fa:	3301      	adds	r3, #1
 80076fc:	4619      	mov	r1, r3
 80076fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007700:	f7fe fde4 	bl	80062cc <move_window>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d137      	bne.n	800777a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	2200      	movs	r2, #0
 800770e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	3330      	adds	r3, #48	@ 0x30
 8007714:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fb25 	bl	8005d68 <ld_word>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007726:	429a      	cmp	r2, r3
 8007728:	d127      	bne.n	800777a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800772a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772c:	3330      	adds	r3, #48	@ 0x30
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fb33 	bl	8005d9a <ld_dword>
 8007734:	4603      	mov	r3, r0
 8007736:	4a1c      	ldr	r2, [pc, #112]	@ (80077a8 <find_volume+0x48c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d11e      	bne.n	800777a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	3330      	adds	r3, #48	@ 0x30
 8007740:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe fb28 	bl	8005d9a <ld_dword>
 800774a:	4603      	mov	r3, r0
 800774c:	4a17      	ldr	r2, [pc, #92]	@ (80077ac <find_volume+0x490>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d113      	bne.n	800777a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	3330      	adds	r3, #48	@ 0x30
 8007756:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fb1d 	bl	8005d9a <ld_dword>
 8007760:	4602      	mov	r2, r0
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	3330      	adds	r3, #48	@ 0x30
 800776a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fb13 	bl	8005d9a <ld_dword>
 8007774:	4602      	mov	r2, r0
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007780:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007782:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <find_volume+0x494>)
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	3301      	adds	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	4b09      	ldr	r3, [pc, #36]	@ (80077b0 <find_volume+0x494>)
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	4b08      	ldr	r3, [pc, #32]	@ (80077b0 <find_volume+0x494>)
 8007790:	881a      	ldrh	r2, [r3, #0]
 8007792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007794:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007796:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007798:	f7fe fd30 	bl	80061fc <clear_lock>
#endif
	return FR_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3758      	adds	r7, #88	@ 0x58
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	41615252 	.word	0x41615252
 80077ac:	61417272 	.word	0x61417272
 80077b0:	20000400 	.word	0x20000400

080077b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80077be:	2309      	movs	r3, #9
 80077c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01c      	beq.n	8007802 <validate+0x4e>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d018      	beq.n	8007802 <validate+0x4e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <validate+0x4e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	889a      	ldrh	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	88db      	ldrh	r3, [r3, #6]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d10c      	bne.n	8007802 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fa1c 	bl	8005c2c <disk_status>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <validate+0x4e>
			res = FR_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <validate+0x5a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	e000      	b.n	8007810 <validate+0x5c>
 800780e:	2300      	movs	r3, #0
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	6013      	str	r3, [r2, #0]
	return res;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff fcd5 	bl	80071e6 <get_ldnumber>
 800783c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	2b00      	cmp	r3, #0
 8007842:	da01      	bge.n	8007848 <f_mount+0x28>
 8007844:	230b      	movs	r3, #11
 8007846:	e02b      	b.n	80078a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007848:	4a17      	ldr	r2, [pc, #92]	@ (80078a8 <f_mount+0x88>)
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007858:	69b8      	ldr	r0, [r7, #24]
 800785a:	f7fe fccf 	bl	80061fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	490d      	ldr	r1, [pc, #52]	@ (80078a8 <f_mount+0x88>)
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <f_mount+0x66>
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d001      	beq.n	800788a <f_mount+0x6a>
 8007886:	2300      	movs	r3, #0
 8007888:	e00a      	b.n	80078a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800788a:	f107 010c 	add.w	r1, r7, #12
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	2200      	movs	r2, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fd41 	bl	800731c <find_volume>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800789e:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3720      	adds	r7, #32
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	200003fc 	.word	0x200003fc

080078ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b098      	sub	sp, #96	@ 0x60
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <f_open+0x18>
 80078c0:	2309      	movs	r3, #9
 80078c2:	e1a9      	b.n	8007c18 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	f107 0110 	add.w	r1, r7, #16
 80078d2:	f107 0308 	add.w	r3, r7, #8
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fd20 	bl	800731c <find_volume>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80078e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 818d 	bne.w	8007c06 <f_open+0x35a>
		dj.obj.fs = fs;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	f107 0314 	add.w	r3, r7, #20
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fc03 	bl	8007104 <follow_path>
 80078fe:	4603      	mov	r3, r0
 8007900:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007904:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007908:	2b00      	cmp	r3, #0
 800790a:	d118      	bne.n	800793e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800790c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007910:	b25b      	sxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	da03      	bge.n	800791e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007916:	2306      	movs	r3, #6
 8007918:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800791c:	e00f      	b.n	800793e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	2b01      	cmp	r3, #1
 8007922:	bf8c      	ite	hi
 8007924:	2301      	movhi	r3, #1
 8007926:	2300      	movls	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	f107 0314 	add.w	r3, r7, #20
 8007930:	4611      	mov	r1, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fb1a 	bl	8005f6c <chk_lock>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	f003 031c 	and.w	r3, r3, #28
 8007944:	2b00      	cmp	r3, #0
 8007946:	d07f      	beq.n	8007a48 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007948:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800794c:	2b00      	cmp	r3, #0
 800794e:	d017      	beq.n	8007980 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007950:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007954:	2b04      	cmp	r3, #4
 8007956:	d10e      	bne.n	8007976 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007958:	f7fe fb64 	bl	8006024 <enq_lock>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d006      	beq.n	8007970 <f_open+0xc4>
 8007962:	f107 0314 	add.w	r3, r7, #20
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff faa5 	bl	8006eb6 <dir_register>
 800796c:	4603      	mov	r3, r0
 800796e:	e000      	b.n	8007972 <f_open+0xc6>
 8007970:	2312      	movs	r3, #18
 8007972:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	f043 0308 	orr.w	r3, r3, #8
 800797c:	71fb      	strb	r3, [r7, #7]
 800797e:	e010      	b.n	80079a2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007980:	7ebb      	ldrb	r3, [r7, #26]
 8007982:	f003 0311 	and.w	r3, r3, #17
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <f_open+0xe6>
					res = FR_DENIED;
 800798a:	2307      	movs	r3, #7
 800798c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007990:	e007      	b.n	80079a2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <f_open+0xf6>
 800799c:	2308      	movs	r3, #8
 800799e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80079a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d168      	bne.n	8007a7c <f_open+0x1d0>
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d063      	beq.n	8007a7c <f_open+0x1d0>
				dw = GET_FATTIME();
 80079b4:	f7fe f8da 	bl	8005b6c <get_fattime>
 80079b8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80079ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079bc:	330e      	adds	r3, #14
 80079be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fa28 	bl	8005e16 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80079c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c8:	3316      	adds	r3, #22
 80079ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fa22 	bl	8005e16 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80079d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d4:	330b      	adds	r3, #11
 80079d6:	2220      	movs	r2, #32
 80079d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff f977 	bl	8006cd4 <ld_clust>
 80079e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80079ec:	2200      	movs	r2, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff f98f 	bl	8006d12 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80079f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f6:	331c      	adds	r3, #28
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fe fa0b 	bl	8005e16 <st_dword>
					fs->wflag = 1;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2201      	movs	r2, #1
 8007a04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d037      	beq.n	8007a7c <f_open+0x1d0>
						dw = fs->winsect;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a10:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007a12:	f107 0314 	add.w	r3, r7, #20
 8007a16:	2200      	movs	r2, #0
 8007a18:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe fea2 	bl	8006764 <remove_chain>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007a26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d126      	bne.n	8007a7c <f_open+0x1d0>
							res = move_window(fs, dw);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fc4a 	bl	80062cc <move_window>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a42:	3a01      	subs	r2, #1
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	e019      	b.n	8007a7c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007a48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d115      	bne.n	8007a7c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007a50:	7ebb      	ldrb	r3, [r7, #26]
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007a5a:	2304      	movs	r3, #4
 8007a5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a60:	e00c      	b.n	8007a7c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <f_open+0x1d0>
 8007a6c:	7ebb      	ldrb	r3, [r7, #26]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <f_open+0x1d0>
						res = FR_DENIED;
 8007a76:	2307      	movs	r3, #7
 8007a78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d126      	bne.n	8007ad2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007a9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	bf8c      	ite	hi
 8007aaa:	2301      	movhi	r3, #1
 8007aac:	2300      	movls	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f107 0314 	add.w	r3, r7, #20
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe fad5 	bl	8006068 <inc_lock>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <f_open+0x226>
 8007acc:	2302      	movs	r3, #2
 8007ace:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 8095 	bne.w	8007c06 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff f8f6 	bl	8006cd4 <ld_clust>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af0:	331c      	adds	r3, #28
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe f951 	bl	8005d9a <ld_dword>
 8007af8:	4602      	mov	r2, r0
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	88da      	ldrh	r2, [r3, #6]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	79fa      	ldrb	r2, [r7, #7]
 8007b16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3330      	adds	r3, #48	@ 0x30
 8007b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b32:	2100      	movs	r1, #0
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe f9bb 	bl	8005eb0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d060      	beq.n	8007c06 <f_open+0x35a>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d05c      	beq.n	8007c06 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	895b      	ldrh	r3, [r3, #10]
 8007b58:	025b      	lsls	r3, r3, #9
 8007b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b68:	e016      	b.n	8007b98 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fc67 	bl	8006442 <get_fat>
 8007b74:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d802      	bhi.n	8007b82 <f_open+0x2d6>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b88:	d102      	bne.n	8007b90 <f_open+0x2e4>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <f_open+0x2fc>
 8007ba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d8e0      	bhi.n	8007b6a <f_open+0x2be>
				}
				fp->clust = clst;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007bae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d127      	bne.n	8007c06 <f_open+0x35a>
 8007bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d022      	beq.n	8007c06 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fc1d 	bl	8006404 <clust2sect>
 8007bca:	6478      	str	r0, [r7, #68]	@ 0x44
 8007bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d103      	bne.n	8007bda <f_open+0x32e>
						res = FR_INT_ERR;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007bd8:	e015      	b.n	8007c06 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bdc:	0a5a      	lsrs	r2, r3, #9
 8007bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	7858      	ldrb	r0, [r3, #1]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a1a      	ldr	r2, [r3, #32]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f7fe f859 	bl	8005cac <disk_read>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <f_open+0x35a>
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <f_open+0x368>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3760      	adds	r7, #96	@ 0x60
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08e      	sub	sp, #56	@ 0x38
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f107 0214 	add.w	r2, r7, #20
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fdb7 	bl	80077b4 <validate>
 8007c46:	4603      	mov	r3, r0
 8007c48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d107      	bne.n	8007c64 <f_read+0x44>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	7d5b      	ldrb	r3, [r3, #21]
 8007c58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <f_read+0x4a>
 8007c64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c68:	e115      	b.n	8007e96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	7d1b      	ldrb	r3, [r3, #20]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <f_read+0x5a>
 8007c76:	2307      	movs	r3, #7
 8007c78:	e10d      	b.n	8007e96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	f240 80fe 	bls.w	8007e8c <f_read+0x26c>
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c94:	e0fa      	b.n	8007e8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 80c6 	bne.w	8007e30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	0a5b      	lsrs	r3, r3, #9
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	8952      	ldrh	r2, [r2, #10]
 8007cae:	3a01      	subs	r2, #1
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d12f      	bne.n	8007d1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d103      	bne.n	8007cca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cc8:	e013      	b.n	8007cf2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d007      	beq.n	8007ce2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7fe fe40 	bl	800695e <clmt_clust>
 8007cde:	6338      	str	r0, [r7, #48]	@ 0x30
 8007ce0:	e007      	b.n	8007cf2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f7fe fba9 	bl	8006442 <get_fat>
 8007cf0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d804      	bhi.n	8007d02 <f_read+0xe2>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	755a      	strb	r2, [r3, #21]
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e0c9      	b.n	8007e96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d08:	d104      	bne.n	8007d14 <f_read+0xf4>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	755a      	strb	r2, [r3, #21]
 8007d10:	2301      	movs	r3, #1
 8007d12:	e0c0      	b.n	8007e96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fe fb6e 	bl	8006404 <clust2sect>
 8007d28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <f_read+0x11a>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2202      	movs	r2, #2
 8007d34:	755a      	strb	r2, [r3, #21]
 8007d36:	2302      	movs	r3, #2
 8007d38:	e0ad      	b.n	8007e96 <f_read+0x276>
			sect += csect;
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	4413      	add	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	0a5b      	lsrs	r3, r3, #9
 8007d46:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d039      	beq.n	8007dc2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	4413      	add	r3, r2
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	8952      	ldrh	r2, [r2, #10]
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d905      	bls.n	8007d68 <f_read+0x148>
					cc = fs->csize - csect;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	895b      	ldrh	r3, [r3, #10]
 8007d60:	461a      	mov	r2, r3
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	7858      	ldrb	r0, [r3, #1]
 8007d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d72:	f7fd ff9b 	bl	8005cac <disk_read>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <f_read+0x166>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	755a      	strb	r2, [r3, #21]
 8007d82:	2301      	movs	r3, #1
 8007d84:	e087      	b.n	8007e96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	7d1b      	ldrb	r3, [r3, #20]
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da14      	bge.n	8007dba <f_read+0x19a>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a1a      	ldr	r2, [r3, #32]
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d90d      	bls.n	8007dba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	025b      	lsls	r3, r3, #9
 8007da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007daa:	18d0      	adds	r0, r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3330      	adds	r3, #48	@ 0x30
 8007db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007db4:	4619      	mov	r1, r3
 8007db6:	f7fe f85a 	bl	8005e6e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	025b      	lsls	r3, r3, #9
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007dc0:	e050      	b.n	8007e64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d02e      	beq.n	8007e2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	7d1b      	ldrb	r3, [r3, #20]
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da18      	bge.n	8007e08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	7858      	ldrb	r0, [r3, #1]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a1a      	ldr	r2, [r3, #32]
 8007de4:	2301      	movs	r3, #1
 8007de6:	f7fd ff81 	bl	8005cec <disk_write>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <f_read+0x1da>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	755a      	strb	r2, [r3, #21]
 8007df6:	2301      	movs	r3, #1
 8007df8:	e04d      	b.n	8007e96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	7d1b      	ldrb	r3, [r3, #20]
 8007dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	7858      	ldrb	r0, [r3, #1]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e12:	2301      	movs	r3, #1
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	f7fd ff49 	bl	8005cac <disk_read>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <f_read+0x20a>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	755a      	strb	r2, [r3, #21]
 8007e26:	2301      	movs	r3, #1
 8007e28:	e035      	b.n	8007e96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d901      	bls.n	8007e4a <f_read+0x22a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e58:	4413      	add	r3, r2
 8007e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e60:	f7fe f805 	bl	8005e6e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e68:	4413      	add	r3, r2
 8007e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e72:	441a      	add	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	619a      	str	r2, [r3, #24]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7e:	441a      	add	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f47f af01 	bne.w	8007c96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3738      	adds	r7, #56	@ 0x38
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f107 0208 	add.w	r2, r7, #8
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fc80 	bl	80077b4 <validate>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d168      	bne.n	8007f90 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7d1b      	ldrb	r3, [r3, #20]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d062      	beq.n	8007f90 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	7d1b      	ldrb	r3, [r3, #20]
 8007ece:	b25b      	sxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	da15      	bge.n	8007f00 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	7858      	ldrb	r0, [r3, #1]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1a      	ldr	r2, [r3, #32]
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f7fd ff02 	bl	8005cec <disk_write>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <f_sync+0x54>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e04f      	b.n	8007f92 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	7d1b      	ldrb	r3, [r3, #20]
 8007ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f00:	f7fd fe34 	bl	8005b6c <get_fattime>
 8007f04:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f7fe f9dc 	bl	80062cc <move_window>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d138      	bne.n	8007f90 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f22:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	330b      	adds	r3, #11
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	330b      	adds	r3, #11
 8007f2e:	f042 0220 	orr.w	r2, r2, #32
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68f9      	ldr	r1, [r7, #12]
 8007f42:	f7fe fee6 	bl	8006d12 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f103 021c 	add.w	r2, r3, #28
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	f7fd ff5f 	bl	8005e16 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3316      	adds	r3, #22
 8007f5c:	6939      	ldr	r1, [r7, #16]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd ff59 	bl	8005e16 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3312      	adds	r3, #18
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fd ff38 	bl	8005de0 <st_word>
					fs->wflag = 1;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2201      	movs	r2, #1
 8007f74:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe f9d5 	bl	8006328 <sync_fs>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7d1b      	ldrb	r3, [r3, #20]
 8007f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff ff7b 	bl	8007e9e <f_sync>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d118      	bne.n	8007fe4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f107 0208 	add.w	r2, r7, #8
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff fbfa 	bl	80077b4 <validate>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10c      	bne.n	8007fe4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe f8d8 	bl	8006184 <dec_lock>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d102      	bne.n	8007fe4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b090      	sub	sp, #64	@ 0x40
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f107 0208 	add.w	r2, r7, #8
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fbd7 	bl	80077b4 <validate>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800800c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008010:	2b00      	cmp	r3, #0
 8008012:	d103      	bne.n	800801c <f_lseek+0x2e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7d5b      	ldrb	r3, [r3, #21]
 8008018:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800801c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <f_lseek+0x3c>
 8008024:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008028:	e1e6      	b.n	80083f8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80d1 	beq.w	80081d6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803a:	d15a      	bne.n	80080f2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008044:	1d1a      	adds	r2, r3, #4
 8008046:	627a      	str	r2, [r7, #36]	@ 0x24
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	2302      	movs	r3, #2
 800804e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	2b00      	cmp	r3, #0
 800805a:	d03a      	beq.n	80080d2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	2300      	movs	r3, #0
 8008062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008066:	3302      	adds	r3, #2
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008070:	3301      	adds	r3, #1
 8008072:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe f9e2 	bl	8006442 <get_fat>
 800807e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	2b01      	cmp	r3, #1
 8008084:	d804      	bhi.n	8008090 <f_lseek+0xa2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	755a      	strb	r2, [r3, #21]
 800808c:	2302      	movs	r3, #2
 800808e:	e1b3      	b.n	80083f8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008096:	d104      	bne.n	80080a2 <f_lseek+0xb4>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	755a      	strb	r2, [r3, #21]
 800809e:	2301      	movs	r3, #1
 80080a0:	e1aa      	b.n	80083f8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d0de      	beq.n	800806a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80080ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d809      	bhi.n	80080c8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80080ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	1d1a      	adds	r2, r3, #4
 80080c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d3c4      	bcc.n	800805c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080d8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80080da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d803      	bhi.n	80080ea <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	e184      	b.n	80083f4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80080ea:	2311      	movs	r3, #17
 80080ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80080f0:	e180      	b.n	80083f4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d902      	bls.n	8008102 <f_lseek+0x114>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 8172 	beq.w	80083f4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	3b01      	subs	r3, #1
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fe fc21 	bl	800695e <clmt_clust>
 800811c:	4602      	mov	r2, r0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	4619      	mov	r1, r3
 800812a:	4610      	mov	r0, r2
 800812c:	f7fe f96a 	bl	8006404 <clust2sect>
 8008130:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <f_lseek+0x154>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	755a      	strb	r2, [r3, #21]
 800813e:	2302      	movs	r3, #2
 8008140:	e15a      	b.n	80083f8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	3b01      	subs	r3, #1
 8008146:	0a5b      	lsrs	r3, r3, #9
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	8952      	ldrh	r2, [r2, #10]
 800814c:	3a01      	subs	r2, #1
 800814e:	4013      	ands	r3, r2
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	4413      	add	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8148 	beq.w	80083f4 <f_lseek+0x406>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	429a      	cmp	r2, r3
 800816c:	f000 8142 	beq.w	80083f4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7d1b      	ldrb	r3, [r3, #20]
 8008174:	b25b      	sxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	da18      	bge.n	80081ac <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	7858      	ldrb	r0, [r3, #1]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1a      	ldr	r2, [r3, #32]
 8008188:	2301      	movs	r3, #1
 800818a:	f7fd fdaf 	bl	8005cec <disk_write>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <f_lseek+0x1b0>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	755a      	strb	r2, [r3, #21]
 800819a:	2301      	movs	r3, #1
 800819c:	e12c      	b.n	80083f8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7d1b      	ldrb	r3, [r3, #20]
 80081a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	7858      	ldrb	r0, [r3, #1]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081b6:	2301      	movs	r3, #1
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	f7fd fd77 	bl	8005cac <disk_read>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d004      	beq.n	80081ce <f_lseek+0x1e0>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	755a      	strb	r2, [r3, #21]
 80081ca:	2301      	movs	r3, #1
 80081cc:	e114      	b.n	80083f8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	621a      	str	r2, [r3, #32]
 80081d4:	e10e      	b.n	80083f4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d908      	bls.n	80081f2 <f_lseek+0x204>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	7d1b      	ldrb	r3, [r3, #20]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008200:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80a7 	beq.w	8008358 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	895b      	ldrh	r3, [r3, #10]
 800820e:	025b      	lsls	r3, r3, #9
 8008210:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01b      	beq.n	8008250 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	1e5a      	subs	r2, r3, #1
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	1e59      	subs	r1, r3, #1
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800822c:	429a      	cmp	r2, r3
 800822e:	d30f      	bcc.n	8008250 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	1e5a      	subs	r2, r3, #1
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	425b      	negs	r3, r3
 8008238:	401a      	ands	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800824e:	e022      	b.n	8008296 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d119      	bne.n	8008290 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2100      	movs	r1, #0
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe fae4 	bl	800682e <create_chain>
 8008266:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826a:	2b01      	cmp	r3, #1
 800826c:	d104      	bne.n	8008278 <f_lseek+0x28a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	755a      	strb	r2, [r3, #21]
 8008274:	2302      	movs	r3, #2
 8008276:	e0bf      	b.n	80083f8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800827e:	d104      	bne.n	800828a <f_lseek+0x29c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	755a      	strb	r2, [r3, #21]
 8008286:	2301      	movs	r3, #1
 8008288:	e0b6      	b.n	80083f8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800828e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008294:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	2b00      	cmp	r3, #0
 800829a:	d05d      	beq.n	8008358 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800829c:	e03a      	b.n	8008314 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	603b      	str	r3, [r7, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	441a      	add	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7d1b      	ldrb	r3, [r3, #20]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fab3 	bl	800682e <create_chain>
 80082c8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80082ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d108      	bne.n	80082e2 <f_lseek+0x2f4>
							ofs = 0; break;
 80082d0:	2300      	movs	r3, #0
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	e022      	b.n	800831c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe f8b1 	bl	8006442 <get_fat>
 80082e0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082e8:	d104      	bne.n	80082f4 <f_lseek+0x306>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	755a      	strb	r2, [r3, #21]
 80082f0:	2301      	movs	r3, #1
 80082f2:	e081      	b.n	80083f8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80082f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d904      	bls.n	8008304 <f_lseek+0x316>
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008300:	429a      	cmp	r2, r3
 8008302:	d304      	bcc.n	800830e <f_lseek+0x320>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	755a      	strb	r2, [r3, #21]
 800830a:	2302      	movs	r3, #2
 800830c:	e074      	b.n	80083f8 <f_lseek+0x40a>
					fp->clust = clst;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008312:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	429a      	cmp	r2, r3
 800831a:	d8c0      	bhi.n	800829e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	441a      	add	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832e:	2b00      	cmp	r3, #0
 8008330:	d012      	beq.n	8008358 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe f864 	bl	8006404 <clust2sect>
 800833c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800833e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <f_lseek+0x360>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	755a      	strb	r2, [r3, #21]
 800834a:	2302      	movs	r3, #2
 800834c:	e054      	b.n	80083f8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	0a5b      	lsrs	r3, r3, #9
 8008352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008354:	4413      	add	r3, r2
 8008356:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699a      	ldr	r2, [r3, #24]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	429a      	cmp	r2, r3
 8008362:	d90a      	bls.n	800837a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699a      	ldr	r2, [r3, #24]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	7d1b      	ldrb	r3, [r3, #20]
 8008370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008374:	b2da      	uxtb	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	2b00      	cmp	r3, #0
 8008384:	d036      	beq.n	80083f4 <f_lseek+0x406>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800838c:	429a      	cmp	r2, r3
 800838e:	d031      	beq.n	80083f4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7d1b      	ldrb	r3, [r3, #20]
 8008394:	b25b      	sxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	da18      	bge.n	80083cc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	7858      	ldrb	r0, [r3, #1]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1a      	ldr	r2, [r3, #32]
 80083a8:	2301      	movs	r3, #1
 80083aa:	f7fd fc9f 	bl	8005cec <disk_write>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <f_lseek+0x3d0>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	755a      	strb	r2, [r3, #21]
 80083ba:	2301      	movs	r3, #1
 80083bc:	e01c      	b.n	80083f8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	7d1b      	ldrb	r3, [r3, #20]
 80083c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	7858      	ldrb	r0, [r3, #1]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083d6:	2301      	movs	r3, #1
 80083d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083da:	f7fd fc67 	bl	8005cac <disk_read>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <f_lseek+0x400>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	755a      	strb	r2, [r3, #21]
 80083ea:	2301      	movs	r3, #1
 80083ec:	e004      	b.n	80083f8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083f2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80083f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3740      	adds	r7, #64	@ 0x40
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <f_opendir+0x14>
 8008410:	2309      	movs	r3, #9
 8008412:	e064      	b.n	80084de <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008418:	f107 010c 	add.w	r1, r7, #12
 800841c:	463b      	mov	r3, r7
 800841e:	2200      	movs	r2, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe ff7b 	bl	800731c <find_volume>
 8008426:	4603      	mov	r3, r0
 8008428:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d14f      	bne.n	80084d0 <f_opendir+0xd0>
		obj->fs = fs;
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe fe62 	bl	8007104 <follow_path>
 8008440:	4603      	mov	r3, r0
 8008442:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d13d      	bne.n	80084c6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008450:	b25b      	sxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	db12      	blt.n	800847c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	799b      	ldrb	r3, [r3, #6]
 800845a:	f003 0310 	and.w	r3, r3, #16
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7fe fc32 	bl	8006cd4 <ld_clust>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	609a      	str	r2, [r3, #8]
 8008476:	e001      	b.n	800847c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008478:	2305      	movs	r3, #5
 800847a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d121      	bne.n	80084c6 <f_opendir+0xc6>
				obj->id = fs->id;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	88da      	ldrh	r2, [r3, #6]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800848a:	2100      	movs	r1, #0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7fe fa9a 	bl	80069c6 <dir_sdi>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d114      	bne.n	80084c6 <f_opendir+0xc6>
					if (obj->sclust) {
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00d      	beq.n	80084c0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fd fdde 	bl	8006068 <inc_lock>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <f_opendir+0xc6>
 80084ba:	2312      	movs	r3, #18
 80084bc:	75fb      	strb	r3, [r7, #23]
 80084be:	e002      	b.n	80084c6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2200      	movs	r2, #0
 80084c4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d101      	bne.n	80084d0 <f_opendir+0xd0>
 80084cc:	2305      	movs	r3, #5
 80084ce:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <f_opendir+0xdc>
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f107 0208 	add.w	r2, r7, #8
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff f95c 	bl	80077b4 <validate>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d110      	bne.n	8008528 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d006      	beq.n	800851c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	4618      	mov	r0, r3
 8008514:	f7fd fe36 	bl	8006184 <dec_lock>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d102      	bne.n	8008528 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f107 0208 	add.w	r2, r7, #8
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff f935 	bl	80077b4 <validate>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d126      	bne.n	80085a2 <f_readdir+0x70>
		if (!fno) {
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d106      	bne.n	8008568 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7fe fa32 	bl	80069c6 <dir_sdi>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]
 8008566:	e01c      	b.n	80085a2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008568:	2100      	movs	r1, #0
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7fe fbf1 	bl	8006d52 <dir_read>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	2b04      	cmp	r3, #4
 8008578:	d101      	bne.n	800857e <f_readdir+0x4c>
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10e      	bne.n	80085a2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fe fcc7 	bl	8006f1a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800858c:	2100      	movs	r1, #0
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fe fa94 	bl	8006abc <dir_next>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	2b04      	cmp	r3, #4
 800859c:	d101      	bne.n	80085a2 <f_readdir+0x70>
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80085c0:	e01c      	b.n	80085fc <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80085c2:	f107 0310 	add.w	r3, r7, #16
 80085c6:	f107 0114 	add.w	r1, r7, #20
 80085ca:	2201      	movs	r2, #1
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff fb27 	bl	8007c20 <f_read>
		if (rc != 1) break;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d117      	bne.n	8008608 <f_gets+0x5c>
		c = s[0];
 80085d8:	7d3b      	ldrb	r3, [r7, #20]
 80085da:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	2b0d      	cmp	r3, #13
 80085e0:	d00b      	beq.n	80085fa <f_gets+0x4e>
		*p++ = c;
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	61ba      	str	r2, [r7, #24]
 80085e8:	7dfa      	ldrb	r2, [r7, #23]
 80085ea:	701a      	strb	r2, [r3, #0]
		n++;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	3301      	adds	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	2b0a      	cmp	r3, #10
 80085f6:	d009      	beq.n	800860c <f_gets+0x60>
 80085f8:	e000      	b.n	80085fc <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80085fa:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	3b01      	subs	r3, #1
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	429a      	cmp	r2, r3
 8008604:	dbdd      	blt.n	80085c2 <f_gets+0x16>
 8008606:	e002      	b.n	800860e <f_gets+0x62>
		if (rc != 1) break;
 8008608:	bf00      	nop
 800860a:	e000      	b.n	800860e <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800860c:	bf00      	nop
	}
	*p = 0;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	2200      	movs	r2, #0
 8008612:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <f_gets+0x72>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	e000      	b.n	8008620 <f_gets+0x74>
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008636:	2301      	movs	r3, #1
 8008638:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800863e:	4b1f      	ldr	r3, [pc, #124]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 8008640:	7a5b      	ldrb	r3, [r3, #9]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d131      	bne.n	80086ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008648:	4b1c      	ldr	r3, [pc, #112]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 800864a:	7a5b      	ldrb	r3, [r3, #9]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	461a      	mov	r2, r3
 8008650:	4b1a      	ldr	r3, [pc, #104]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 8008652:	2100      	movs	r1, #0
 8008654:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008656:	4b19      	ldr	r3, [pc, #100]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 8008658:	7a5b      	ldrb	r3, [r3, #9]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	4a17      	ldr	r2, [pc, #92]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008666:	4b15      	ldr	r3, [pc, #84]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 8008668:	7a5b      	ldrb	r3, [r3, #9]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	4b13      	ldr	r3, [pc, #76]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 8008670:	4413      	add	r3, r2
 8008672:	79fa      	ldrb	r2, [r7, #7]
 8008674:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008676:	4b11      	ldr	r3, [pc, #68]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 8008678:	7a5b      	ldrb	r3, [r3, #9]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	b2d1      	uxtb	r1, r2
 8008680:	4a0e      	ldr	r2, [pc, #56]	@ (80086bc <FATFS_LinkDriverEx+0x94>)
 8008682:	7251      	strb	r1, [r2, #9]
 8008684:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008686:	7dbb      	ldrb	r3, [r7, #22]
 8008688:	3330      	adds	r3, #48	@ 0x30
 800868a:	b2da      	uxtb	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	3301      	adds	r3, #1
 8008694:	223a      	movs	r2, #58	@ 0x3a
 8008696:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	3302      	adds	r3, #2
 800869c:	222f      	movs	r2, #47	@ 0x2f
 800869e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	3303      	adds	r3, #3
 80086a4:	2200      	movs	r2, #0
 80086a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20000424 	.word	0x20000424

080086c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086ca:	2200      	movs	r2, #0
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff ffaa 	bl	8008628 <FATFS_LinkDriverEx>
 80086d4:	4603      	mov	r3, r0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <atoi>:
 80086de:	220a      	movs	r2, #10
 80086e0:	2100      	movs	r1, #0
 80086e2:	f000 b87b 	b.w	80087dc <strtol>
	...

080086e8 <_strtol_l.isra.0>:
 80086e8:	2b24      	cmp	r3, #36	@ 0x24
 80086ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ee:	4686      	mov	lr, r0
 80086f0:	4690      	mov	r8, r2
 80086f2:	d801      	bhi.n	80086f8 <_strtol_l.isra.0+0x10>
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d106      	bne.n	8008706 <_strtol_l.isra.0+0x1e>
 80086f8:	f000 f920 	bl	800893c <__errno>
 80086fc:	2316      	movs	r3, #22
 80086fe:	6003      	str	r3, [r0, #0]
 8008700:	2000      	movs	r0, #0
 8008702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008706:	4834      	ldr	r0, [pc, #208]	@ (80087d8 <_strtol_l.isra.0+0xf0>)
 8008708:	460d      	mov	r5, r1
 800870a:	462a      	mov	r2, r5
 800870c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008710:	5d06      	ldrb	r6, [r0, r4]
 8008712:	f016 0608 	ands.w	r6, r6, #8
 8008716:	d1f8      	bne.n	800870a <_strtol_l.isra.0+0x22>
 8008718:	2c2d      	cmp	r4, #45	@ 0x2d
 800871a:	d110      	bne.n	800873e <_strtol_l.isra.0+0x56>
 800871c:	782c      	ldrb	r4, [r5, #0]
 800871e:	2601      	movs	r6, #1
 8008720:	1c95      	adds	r5, r2, #2
 8008722:	f033 0210 	bics.w	r2, r3, #16
 8008726:	d115      	bne.n	8008754 <_strtol_l.isra.0+0x6c>
 8008728:	2c30      	cmp	r4, #48	@ 0x30
 800872a:	d10d      	bne.n	8008748 <_strtol_l.isra.0+0x60>
 800872c:	782a      	ldrb	r2, [r5, #0]
 800872e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008732:	2a58      	cmp	r2, #88	@ 0x58
 8008734:	d108      	bne.n	8008748 <_strtol_l.isra.0+0x60>
 8008736:	786c      	ldrb	r4, [r5, #1]
 8008738:	3502      	adds	r5, #2
 800873a:	2310      	movs	r3, #16
 800873c:	e00a      	b.n	8008754 <_strtol_l.isra.0+0x6c>
 800873e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008740:	bf04      	itt	eq
 8008742:	782c      	ldrbeq	r4, [r5, #0]
 8008744:	1c95      	addeq	r5, r2, #2
 8008746:	e7ec      	b.n	8008722 <_strtol_l.isra.0+0x3a>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1f6      	bne.n	800873a <_strtol_l.isra.0+0x52>
 800874c:	2c30      	cmp	r4, #48	@ 0x30
 800874e:	bf14      	ite	ne
 8008750:	230a      	movne	r3, #10
 8008752:	2308      	moveq	r3, #8
 8008754:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008758:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800875c:	2200      	movs	r2, #0
 800875e:	fbbc f9f3 	udiv	r9, ip, r3
 8008762:	4610      	mov	r0, r2
 8008764:	fb03 ca19 	mls	sl, r3, r9, ip
 8008768:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800876c:	2f09      	cmp	r7, #9
 800876e:	d80f      	bhi.n	8008790 <_strtol_l.isra.0+0xa8>
 8008770:	463c      	mov	r4, r7
 8008772:	42a3      	cmp	r3, r4
 8008774:	dd1b      	ble.n	80087ae <_strtol_l.isra.0+0xc6>
 8008776:	1c57      	adds	r7, r2, #1
 8008778:	d007      	beq.n	800878a <_strtol_l.isra.0+0xa2>
 800877a:	4581      	cmp	r9, r0
 800877c:	d314      	bcc.n	80087a8 <_strtol_l.isra.0+0xc0>
 800877e:	d101      	bne.n	8008784 <_strtol_l.isra.0+0x9c>
 8008780:	45a2      	cmp	sl, r4
 8008782:	db11      	blt.n	80087a8 <_strtol_l.isra.0+0xc0>
 8008784:	fb00 4003 	mla	r0, r0, r3, r4
 8008788:	2201      	movs	r2, #1
 800878a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800878e:	e7eb      	b.n	8008768 <_strtol_l.isra.0+0x80>
 8008790:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008794:	2f19      	cmp	r7, #25
 8008796:	d801      	bhi.n	800879c <_strtol_l.isra.0+0xb4>
 8008798:	3c37      	subs	r4, #55	@ 0x37
 800879a:	e7ea      	b.n	8008772 <_strtol_l.isra.0+0x8a>
 800879c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80087a0:	2f19      	cmp	r7, #25
 80087a2:	d804      	bhi.n	80087ae <_strtol_l.isra.0+0xc6>
 80087a4:	3c57      	subs	r4, #87	@ 0x57
 80087a6:	e7e4      	b.n	8008772 <_strtol_l.isra.0+0x8a>
 80087a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087ac:	e7ed      	b.n	800878a <_strtol_l.isra.0+0xa2>
 80087ae:	1c53      	adds	r3, r2, #1
 80087b0:	d108      	bne.n	80087c4 <_strtol_l.isra.0+0xdc>
 80087b2:	2322      	movs	r3, #34	@ 0x22
 80087b4:	f8ce 3000 	str.w	r3, [lr]
 80087b8:	4660      	mov	r0, ip
 80087ba:	f1b8 0f00 	cmp.w	r8, #0
 80087be:	d0a0      	beq.n	8008702 <_strtol_l.isra.0+0x1a>
 80087c0:	1e69      	subs	r1, r5, #1
 80087c2:	e006      	b.n	80087d2 <_strtol_l.isra.0+0xea>
 80087c4:	b106      	cbz	r6, 80087c8 <_strtol_l.isra.0+0xe0>
 80087c6:	4240      	negs	r0, r0
 80087c8:	f1b8 0f00 	cmp.w	r8, #0
 80087cc:	d099      	beq.n	8008702 <_strtol_l.isra.0+0x1a>
 80087ce:	2a00      	cmp	r2, #0
 80087d0:	d1f6      	bne.n	80087c0 <_strtol_l.isra.0+0xd8>
 80087d2:	f8c8 1000 	str.w	r1, [r8]
 80087d6:	e794      	b.n	8008702 <_strtol_l.isra.0+0x1a>
 80087d8:	08009519 	.word	0x08009519

080087dc <strtol>:
 80087dc:	4613      	mov	r3, r2
 80087de:	460a      	mov	r2, r1
 80087e0:	4601      	mov	r1, r0
 80087e2:	4802      	ldr	r0, [pc, #8]	@ (80087ec <strtol+0x10>)
 80087e4:	6800      	ldr	r0, [r0, #0]
 80087e6:	f7ff bf7f 	b.w	80086e8 <_strtol_l.isra.0>
 80087ea:	bf00      	nop
 80087ec:	20000020 	.word	0x20000020

080087f0 <_vsniprintf_r>:
 80087f0:	b530      	push	{r4, r5, lr}
 80087f2:	4614      	mov	r4, r2
 80087f4:	2c00      	cmp	r4, #0
 80087f6:	b09b      	sub	sp, #108	@ 0x6c
 80087f8:	4605      	mov	r5, r0
 80087fa:	461a      	mov	r2, r3
 80087fc:	da05      	bge.n	800880a <_vsniprintf_r+0x1a>
 80087fe:	238b      	movs	r3, #139	@ 0x8b
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008806:	b01b      	add	sp, #108	@ 0x6c
 8008808:	bd30      	pop	{r4, r5, pc}
 800880a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800880e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	9319      	str	r3, [sp, #100]	@ 0x64
 8008818:	bf14      	ite	ne
 800881a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800881e:	4623      	moveq	r3, r4
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	9305      	str	r3, [sp, #20]
 8008824:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008828:	9100      	str	r1, [sp, #0]
 800882a:	9104      	str	r1, [sp, #16]
 800882c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008830:	4669      	mov	r1, sp
 8008832:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008834:	f000 fa18 	bl	8008c68 <_svfiprintf_r>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	bfbc      	itt	lt
 800883c:	238b      	movlt	r3, #139	@ 0x8b
 800883e:	602b      	strlt	r3, [r5, #0]
 8008840:	2c00      	cmp	r4, #0
 8008842:	d0e0      	beq.n	8008806 <_vsniprintf_r+0x16>
 8008844:	9b00      	ldr	r3, [sp, #0]
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	e7dc      	b.n	8008806 <_vsniprintf_r+0x16>

0800884c <vsniprintf>:
 800884c:	b507      	push	{r0, r1, r2, lr}
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	4613      	mov	r3, r2
 8008852:	460a      	mov	r2, r1
 8008854:	4601      	mov	r1, r0
 8008856:	4803      	ldr	r0, [pc, #12]	@ (8008864 <vsniprintf+0x18>)
 8008858:	6800      	ldr	r0, [r0, #0]
 800885a:	f7ff ffc9 	bl	80087f0 <_vsniprintf_r>
 800885e:	b003      	add	sp, #12
 8008860:	f85d fb04 	ldr.w	pc, [sp], #4
 8008864:	20000020 	.word	0x20000020

08008868 <memcmp>:
 8008868:	b510      	push	{r4, lr}
 800886a:	3901      	subs	r1, #1
 800886c:	4402      	add	r2, r0
 800886e:	4290      	cmp	r0, r2
 8008870:	d101      	bne.n	8008876 <memcmp+0xe>
 8008872:	2000      	movs	r0, #0
 8008874:	e005      	b.n	8008882 <memcmp+0x1a>
 8008876:	7803      	ldrb	r3, [r0, #0]
 8008878:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800887c:	42a3      	cmp	r3, r4
 800887e:	d001      	beq.n	8008884 <memcmp+0x1c>
 8008880:	1b18      	subs	r0, r3, r4
 8008882:	bd10      	pop	{r4, pc}
 8008884:	3001      	adds	r0, #1
 8008886:	e7f2      	b.n	800886e <memcmp+0x6>

08008888 <memmove>:
 8008888:	4288      	cmp	r0, r1
 800888a:	b510      	push	{r4, lr}
 800888c:	eb01 0402 	add.w	r4, r1, r2
 8008890:	d902      	bls.n	8008898 <memmove+0x10>
 8008892:	4284      	cmp	r4, r0
 8008894:	4623      	mov	r3, r4
 8008896:	d807      	bhi.n	80088a8 <memmove+0x20>
 8008898:	1e43      	subs	r3, r0, #1
 800889a:	42a1      	cmp	r1, r4
 800889c:	d008      	beq.n	80088b0 <memmove+0x28>
 800889e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088a6:	e7f8      	b.n	800889a <memmove+0x12>
 80088a8:	4402      	add	r2, r0
 80088aa:	4601      	mov	r1, r0
 80088ac:	428a      	cmp	r2, r1
 80088ae:	d100      	bne.n	80088b2 <memmove+0x2a>
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ba:	e7f7      	b.n	80088ac <memmove+0x24>

080088bc <memset>:
 80088bc:	4402      	add	r2, r0
 80088be:	4603      	mov	r3, r0
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d100      	bne.n	80088c6 <memset+0xa>
 80088c4:	4770      	bx	lr
 80088c6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ca:	e7f9      	b.n	80088c0 <memset+0x4>

080088cc <strncat>:
 80088cc:	b530      	push	{r4, r5, lr}
 80088ce:	4604      	mov	r4, r0
 80088d0:	7825      	ldrb	r5, [r4, #0]
 80088d2:	4623      	mov	r3, r4
 80088d4:	3401      	adds	r4, #1
 80088d6:	2d00      	cmp	r5, #0
 80088d8:	d1fa      	bne.n	80088d0 <strncat+0x4>
 80088da:	3a01      	subs	r2, #1
 80088dc:	d304      	bcc.n	80088e8 <strncat+0x1c>
 80088de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e2:	f803 4b01 	strb.w	r4, [r3], #1
 80088e6:	b904      	cbnz	r4, 80088ea <strncat+0x1e>
 80088e8:	bd30      	pop	{r4, r5, pc}
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	d1f5      	bne.n	80088da <strncat+0xe>
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e7f3      	b.n	80088da <strncat+0xe>

080088f2 <strncmp>:
 80088f2:	b510      	push	{r4, lr}
 80088f4:	b16a      	cbz	r2, 8008912 <strncmp+0x20>
 80088f6:	3901      	subs	r1, #1
 80088f8:	1884      	adds	r4, r0, r2
 80088fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008902:	429a      	cmp	r2, r3
 8008904:	d103      	bne.n	800890e <strncmp+0x1c>
 8008906:	42a0      	cmp	r0, r4
 8008908:	d001      	beq.n	800890e <strncmp+0x1c>
 800890a:	2a00      	cmp	r2, #0
 800890c:	d1f5      	bne.n	80088fa <strncmp+0x8>
 800890e:	1ad0      	subs	r0, r2, r3
 8008910:	bd10      	pop	{r4, pc}
 8008912:	4610      	mov	r0, r2
 8008914:	e7fc      	b.n	8008910 <strncmp+0x1e>

08008916 <strncpy>:
 8008916:	b510      	push	{r4, lr}
 8008918:	3901      	subs	r1, #1
 800891a:	4603      	mov	r3, r0
 800891c:	b132      	cbz	r2, 800892c <strncpy+0x16>
 800891e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008922:	f803 4b01 	strb.w	r4, [r3], #1
 8008926:	3a01      	subs	r2, #1
 8008928:	2c00      	cmp	r4, #0
 800892a:	d1f7      	bne.n	800891c <strncpy+0x6>
 800892c:	441a      	add	r2, r3
 800892e:	2100      	movs	r1, #0
 8008930:	4293      	cmp	r3, r2
 8008932:	d100      	bne.n	8008936 <strncpy+0x20>
 8008934:	bd10      	pop	{r4, pc}
 8008936:	f803 1b01 	strb.w	r1, [r3], #1
 800893a:	e7f9      	b.n	8008930 <strncpy+0x1a>

0800893c <__errno>:
 800893c:	4b01      	ldr	r3, [pc, #4]	@ (8008944 <__errno+0x8>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000020 	.word	0x20000020

08008948 <__libc_init_array>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4d0d      	ldr	r5, [pc, #52]	@ (8008980 <__libc_init_array+0x38>)
 800894c:	4c0d      	ldr	r4, [pc, #52]	@ (8008984 <__libc_init_array+0x3c>)
 800894e:	1b64      	subs	r4, r4, r5
 8008950:	10a4      	asrs	r4, r4, #2
 8008952:	2600      	movs	r6, #0
 8008954:	42a6      	cmp	r6, r4
 8008956:	d109      	bne.n	800896c <__libc_init_array+0x24>
 8008958:	4d0b      	ldr	r5, [pc, #44]	@ (8008988 <__libc_init_array+0x40>)
 800895a:	4c0c      	ldr	r4, [pc, #48]	@ (800898c <__libc_init_array+0x44>)
 800895c:	f000 fc52 	bl	8009204 <_init>
 8008960:	1b64      	subs	r4, r4, r5
 8008962:	10a4      	asrs	r4, r4, #2
 8008964:	2600      	movs	r6, #0
 8008966:	42a6      	cmp	r6, r4
 8008968:	d105      	bne.n	8008976 <__libc_init_array+0x2e>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008970:	4798      	blx	r3
 8008972:	3601      	adds	r6, #1
 8008974:	e7ee      	b.n	8008954 <__libc_init_array+0xc>
 8008976:	f855 3b04 	ldr.w	r3, [r5], #4
 800897a:	4798      	blx	r3
 800897c:	3601      	adds	r6, #1
 800897e:	e7f2      	b.n	8008966 <__libc_init_array+0x1e>
 8008980:	08009654 	.word	0x08009654
 8008984:	08009654 	.word	0x08009654
 8008988:	08009654 	.word	0x08009654
 800898c:	08009658 	.word	0x08009658

08008990 <__retarget_lock_acquire_recursive>:
 8008990:	4770      	bx	lr

08008992 <__retarget_lock_release_recursive>:
 8008992:	4770      	bx	lr

08008994 <strcpy>:
 8008994:	4603      	mov	r3, r0
 8008996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800899a:	f803 2b01 	strb.w	r2, [r3], #1
 800899e:	2a00      	cmp	r2, #0
 80089a0:	d1f9      	bne.n	8008996 <strcpy+0x2>
 80089a2:	4770      	bx	lr

080089a4 <memcpy>:
 80089a4:	440a      	add	r2, r1
 80089a6:	4291      	cmp	r1, r2
 80089a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80089ac:	d100      	bne.n	80089b0 <memcpy+0xc>
 80089ae:	4770      	bx	lr
 80089b0:	b510      	push	{r4, lr}
 80089b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ba:	4291      	cmp	r1, r2
 80089bc:	d1f9      	bne.n	80089b2 <memcpy+0xe>
 80089be:	bd10      	pop	{r4, pc}

080089c0 <_free_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4605      	mov	r5, r0
 80089c4:	2900      	cmp	r1, #0
 80089c6:	d041      	beq.n	8008a4c <_free_r+0x8c>
 80089c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089cc:	1f0c      	subs	r4, r1, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	18e4      	addlt	r4, r4, r3
 80089d4:	f000 f8e0 	bl	8008b98 <__malloc_lock>
 80089d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a50 <_free_r+0x90>)
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	b933      	cbnz	r3, 80089ec <_free_r+0x2c>
 80089de:	6063      	str	r3, [r4, #4]
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	4628      	mov	r0, r5
 80089e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e8:	f000 b8dc 	b.w	8008ba4 <__malloc_unlock>
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d908      	bls.n	8008a02 <_free_r+0x42>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	1821      	adds	r1, r4, r0
 80089f4:	428b      	cmp	r3, r1
 80089f6:	bf01      	itttt	eq
 80089f8:	6819      	ldreq	r1, [r3, #0]
 80089fa:	685b      	ldreq	r3, [r3, #4]
 80089fc:	1809      	addeq	r1, r1, r0
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	e7ed      	b.n	80089de <_free_r+0x1e>
 8008a02:	461a      	mov	r2, r3
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b10b      	cbz	r3, 8008a0c <_free_r+0x4c>
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	d9fa      	bls.n	8008a02 <_free_r+0x42>
 8008a0c:	6811      	ldr	r1, [r2, #0]
 8008a0e:	1850      	adds	r0, r2, r1
 8008a10:	42a0      	cmp	r0, r4
 8008a12:	d10b      	bne.n	8008a2c <_free_r+0x6c>
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	4401      	add	r1, r0
 8008a18:	1850      	adds	r0, r2, r1
 8008a1a:	4283      	cmp	r3, r0
 8008a1c:	6011      	str	r1, [r2, #0]
 8008a1e:	d1e0      	bne.n	80089e2 <_free_r+0x22>
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	6053      	str	r3, [r2, #4]
 8008a26:	4408      	add	r0, r1
 8008a28:	6010      	str	r0, [r2, #0]
 8008a2a:	e7da      	b.n	80089e2 <_free_r+0x22>
 8008a2c:	d902      	bls.n	8008a34 <_free_r+0x74>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	e7d6      	b.n	80089e2 <_free_r+0x22>
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	1821      	adds	r1, r4, r0
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	bf04      	itt	eq
 8008a3c:	6819      	ldreq	r1, [r3, #0]
 8008a3e:	685b      	ldreq	r3, [r3, #4]
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	bf04      	itt	eq
 8008a44:	1809      	addeq	r1, r1, r0
 8008a46:	6021      	streq	r1, [r4, #0]
 8008a48:	6054      	str	r4, [r2, #4]
 8008a4a:	e7ca      	b.n	80089e2 <_free_r+0x22>
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000574 	.word	0x20000574

08008a54 <sbrk_aligned>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4e0f      	ldr	r6, [pc, #60]	@ (8008a94 <sbrk_aligned+0x40>)
 8008a58:	460c      	mov	r4, r1
 8008a5a:	6831      	ldr	r1, [r6, #0]
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	b911      	cbnz	r1, 8008a66 <sbrk_aligned+0x12>
 8008a60:	f000 fb8a 	bl	8009178 <_sbrk_r>
 8008a64:	6030      	str	r0, [r6, #0]
 8008a66:	4621      	mov	r1, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 fb85 	bl	8009178 <_sbrk_r>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	d103      	bne.n	8008a7a <sbrk_aligned+0x26>
 8008a72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008a76:	4620      	mov	r0, r4
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	1cc4      	adds	r4, r0, #3
 8008a7c:	f024 0403 	bic.w	r4, r4, #3
 8008a80:	42a0      	cmp	r0, r4
 8008a82:	d0f8      	beq.n	8008a76 <sbrk_aligned+0x22>
 8008a84:	1a21      	subs	r1, r4, r0
 8008a86:	4628      	mov	r0, r5
 8008a88:	f000 fb76 	bl	8009178 <_sbrk_r>
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d1f2      	bne.n	8008a76 <sbrk_aligned+0x22>
 8008a90:	e7ef      	b.n	8008a72 <sbrk_aligned+0x1e>
 8008a92:	bf00      	nop
 8008a94:	20000570 	.word	0x20000570

08008a98 <_malloc_r>:
 8008a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	1ccd      	adds	r5, r1, #3
 8008a9e:	f025 0503 	bic.w	r5, r5, #3
 8008aa2:	3508      	adds	r5, #8
 8008aa4:	2d0c      	cmp	r5, #12
 8008aa6:	bf38      	it	cc
 8008aa8:	250c      	movcc	r5, #12
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	4606      	mov	r6, r0
 8008aae:	db01      	blt.n	8008ab4 <_malloc_r+0x1c>
 8008ab0:	42a9      	cmp	r1, r5
 8008ab2:	d904      	bls.n	8008abe <_malloc_r+0x26>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b94 <_malloc_r+0xfc>
 8008ac2:	f000 f869 	bl	8008b98 <__malloc_lock>
 8008ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aca:	461c      	mov	r4, r3
 8008acc:	bb44      	cbnz	r4, 8008b20 <_malloc_r+0x88>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7ff ffbf 	bl	8008a54 <sbrk_aligned>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	4604      	mov	r4, r0
 8008ada:	d158      	bne.n	8008b8e <_malloc_r+0xf6>
 8008adc:	f8d8 4000 	ldr.w	r4, [r8]
 8008ae0:	4627      	mov	r7, r4
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	d143      	bne.n	8008b6e <_malloc_r+0xd6>
 8008ae6:	2c00      	cmp	r4, #0
 8008ae8:	d04b      	beq.n	8008b82 <_malloc_r+0xea>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	4639      	mov	r1, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	eb04 0903 	add.w	r9, r4, r3
 8008af4:	f000 fb40 	bl	8009178 <_sbrk_r>
 8008af8:	4581      	cmp	r9, r0
 8008afa:	d142      	bne.n	8008b82 <_malloc_r+0xea>
 8008afc:	6821      	ldr	r1, [r4, #0]
 8008afe:	1a6d      	subs	r5, r5, r1
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff ffa6 	bl	8008a54 <sbrk_aligned>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d03a      	beq.n	8008b82 <_malloc_r+0xea>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	442b      	add	r3, r5
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	f8d8 3000 	ldr.w	r3, [r8]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	bb62      	cbnz	r2, 8008b74 <_malloc_r+0xdc>
 8008b1a:	f8c8 7000 	str.w	r7, [r8]
 8008b1e:	e00f      	b.n	8008b40 <_malloc_r+0xa8>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	1b52      	subs	r2, r2, r5
 8008b24:	d420      	bmi.n	8008b68 <_malloc_r+0xd0>
 8008b26:	2a0b      	cmp	r2, #11
 8008b28:	d917      	bls.n	8008b5a <_malloc_r+0xc2>
 8008b2a:	1961      	adds	r1, r4, r5
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	6025      	str	r5, [r4, #0]
 8008b30:	bf18      	it	ne
 8008b32:	6059      	strne	r1, [r3, #4]
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	bf08      	it	eq
 8008b38:	f8c8 1000 	streq.w	r1, [r8]
 8008b3c:	5162      	str	r2, [r4, r5]
 8008b3e:	604b      	str	r3, [r1, #4]
 8008b40:	4630      	mov	r0, r6
 8008b42:	f000 f82f 	bl	8008ba4 <__malloc_unlock>
 8008b46:	f104 000b 	add.w	r0, r4, #11
 8008b4a:	1d23      	adds	r3, r4, #4
 8008b4c:	f020 0007 	bic.w	r0, r0, #7
 8008b50:	1ac2      	subs	r2, r0, r3
 8008b52:	bf1c      	itt	ne
 8008b54:	1a1b      	subne	r3, r3, r0
 8008b56:	50a3      	strne	r3, [r4, r2]
 8008b58:	e7af      	b.n	8008aba <_malloc_r+0x22>
 8008b5a:	6862      	ldr	r2, [r4, #4]
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	bf0c      	ite	eq
 8008b60:	f8c8 2000 	streq.w	r2, [r8]
 8008b64:	605a      	strne	r2, [r3, #4]
 8008b66:	e7eb      	b.n	8008b40 <_malloc_r+0xa8>
 8008b68:	4623      	mov	r3, r4
 8008b6a:	6864      	ldr	r4, [r4, #4]
 8008b6c:	e7ae      	b.n	8008acc <_malloc_r+0x34>
 8008b6e:	463c      	mov	r4, r7
 8008b70:	687f      	ldr	r7, [r7, #4]
 8008b72:	e7b6      	b.n	8008ae2 <_malloc_r+0x4a>
 8008b74:	461a      	mov	r2, r3
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	d1fb      	bne.n	8008b74 <_malloc_r+0xdc>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	6053      	str	r3, [r2, #4]
 8008b80:	e7de      	b.n	8008b40 <_malloc_r+0xa8>
 8008b82:	230c      	movs	r3, #12
 8008b84:	6033      	str	r3, [r6, #0]
 8008b86:	4630      	mov	r0, r6
 8008b88:	f000 f80c 	bl	8008ba4 <__malloc_unlock>
 8008b8c:	e794      	b.n	8008ab8 <_malloc_r+0x20>
 8008b8e:	6005      	str	r5, [r0, #0]
 8008b90:	e7d6      	b.n	8008b40 <_malloc_r+0xa8>
 8008b92:	bf00      	nop
 8008b94:	20000574 	.word	0x20000574

08008b98 <__malloc_lock>:
 8008b98:	4801      	ldr	r0, [pc, #4]	@ (8008ba0 <__malloc_lock+0x8>)
 8008b9a:	f7ff bef9 	b.w	8008990 <__retarget_lock_acquire_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	2000056c 	.word	0x2000056c

08008ba4 <__malloc_unlock>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	@ (8008bac <__malloc_unlock+0x8>)
 8008ba6:	f7ff bef4 	b.w	8008992 <__retarget_lock_release_recursive>
 8008baa:	bf00      	nop
 8008bac:	2000056c 	.word	0x2000056c

08008bb0 <__ssputs_r>:
 8008bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	688e      	ldr	r6, [r1, #8]
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	42be      	cmp	r6, r7
 8008bba:	680b      	ldr	r3, [r1, #0]
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	4690      	mov	r8, r2
 8008bc2:	d82d      	bhi.n	8008c20 <__ssputs_r+0x70>
 8008bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008bcc:	d026      	beq.n	8008c1c <__ssputs_r+0x6c>
 8008bce:	6965      	ldr	r5, [r4, #20]
 8008bd0:	6909      	ldr	r1, [r1, #16]
 8008bd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bd6:	eba3 0901 	sub.w	r9, r3, r1
 8008bda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bde:	1c7b      	adds	r3, r7, #1
 8008be0:	444b      	add	r3, r9
 8008be2:	106d      	asrs	r5, r5, #1
 8008be4:	429d      	cmp	r5, r3
 8008be6:	bf38      	it	cc
 8008be8:	461d      	movcc	r5, r3
 8008bea:	0553      	lsls	r3, r2, #21
 8008bec:	d527      	bpl.n	8008c3e <__ssputs_r+0x8e>
 8008bee:	4629      	mov	r1, r5
 8008bf0:	f7ff ff52 	bl	8008a98 <_malloc_r>
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	b360      	cbz	r0, 8008c52 <__ssputs_r+0xa2>
 8008bf8:	6921      	ldr	r1, [r4, #16]
 8008bfa:	464a      	mov	r2, r9
 8008bfc:	f7ff fed2 	bl	80089a4 <memcpy>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	6126      	str	r6, [r4, #16]
 8008c0e:	6165      	str	r5, [r4, #20]
 8008c10:	444e      	add	r6, r9
 8008c12:	eba5 0509 	sub.w	r5, r5, r9
 8008c16:	6026      	str	r6, [r4, #0]
 8008c18:	60a5      	str	r5, [r4, #8]
 8008c1a:	463e      	mov	r6, r7
 8008c1c:	42be      	cmp	r6, r7
 8008c1e:	d900      	bls.n	8008c22 <__ssputs_r+0x72>
 8008c20:	463e      	mov	r6, r7
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	4632      	mov	r2, r6
 8008c26:	4641      	mov	r1, r8
 8008c28:	f7ff fe2e 	bl	8008888 <memmove>
 8008c2c:	68a3      	ldr	r3, [r4, #8]
 8008c2e:	1b9b      	subs	r3, r3, r6
 8008c30:	60a3      	str	r3, [r4, #8]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	4433      	add	r3, r6
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	2000      	movs	r0, #0
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	462a      	mov	r2, r5
 8008c40:	f000 faaa 	bl	8009198 <_realloc_r>
 8008c44:	4606      	mov	r6, r0
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d1e0      	bne.n	8008c0c <__ssputs_r+0x5c>
 8008c4a:	6921      	ldr	r1, [r4, #16]
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	f7ff feb7 	bl	80089c0 <_free_r>
 8008c52:	230c      	movs	r3, #12
 8008c54:	f8ca 3000 	str.w	r3, [sl]
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c64:	e7e9      	b.n	8008c3a <__ssputs_r+0x8a>
	...

08008c68 <_svfiprintf_r>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	4698      	mov	r8, r3
 8008c6e:	898b      	ldrh	r3, [r1, #12]
 8008c70:	061b      	lsls	r3, r3, #24
 8008c72:	b09d      	sub	sp, #116	@ 0x74
 8008c74:	4607      	mov	r7, r0
 8008c76:	460d      	mov	r5, r1
 8008c78:	4614      	mov	r4, r2
 8008c7a:	d510      	bpl.n	8008c9e <_svfiprintf_r+0x36>
 8008c7c:	690b      	ldr	r3, [r1, #16]
 8008c7e:	b973      	cbnz	r3, 8008c9e <_svfiprintf_r+0x36>
 8008c80:	2140      	movs	r1, #64	@ 0x40
 8008c82:	f7ff ff09 	bl	8008a98 <_malloc_r>
 8008c86:	6028      	str	r0, [r5, #0]
 8008c88:	6128      	str	r0, [r5, #16]
 8008c8a:	b930      	cbnz	r0, 8008c9a <_svfiprintf_r+0x32>
 8008c8c:	230c      	movs	r3, #12
 8008c8e:	603b      	str	r3, [r7, #0]
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c94:	b01d      	add	sp, #116	@ 0x74
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	2340      	movs	r3, #64	@ 0x40
 8008c9c:	616b      	str	r3, [r5, #20]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca2:	2320      	movs	r3, #32
 8008ca4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cac:	2330      	movs	r3, #48	@ 0x30
 8008cae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e4c <_svfiprintf_r+0x1e4>
 8008cb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cb6:	f04f 0901 	mov.w	r9, #1
 8008cba:	4623      	mov	r3, r4
 8008cbc:	469a      	mov	sl, r3
 8008cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cc2:	b10a      	cbz	r2, 8008cc8 <_svfiprintf_r+0x60>
 8008cc4:	2a25      	cmp	r2, #37	@ 0x25
 8008cc6:	d1f9      	bne.n	8008cbc <_svfiprintf_r+0x54>
 8008cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8008ccc:	d00b      	beq.n	8008ce6 <_svfiprintf_r+0x7e>
 8008cce:	465b      	mov	r3, fp
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f7ff ff6b 	bl	8008bb0 <__ssputs_r>
 8008cda:	3001      	adds	r0, #1
 8008cdc:	f000 80a7 	beq.w	8008e2e <_svfiprintf_r+0x1c6>
 8008ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ce2:	445a      	add	r2, fp
 8008ce4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 809f 	beq.w	8008e2e <_svfiprintf_r+0x1c6>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cfa:	f10a 0a01 	add.w	sl, sl, #1
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	9307      	str	r3, [sp, #28]
 8008d02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d08:	4654      	mov	r4, sl
 8008d0a:	2205      	movs	r2, #5
 8008d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d10:	484e      	ldr	r0, [pc, #312]	@ (8008e4c <_svfiprintf_r+0x1e4>)
 8008d12:	f7f7 fa75 	bl	8000200 <memchr>
 8008d16:	9a04      	ldr	r2, [sp, #16]
 8008d18:	b9d8      	cbnz	r0, 8008d52 <_svfiprintf_r+0xea>
 8008d1a:	06d0      	lsls	r0, r2, #27
 8008d1c:	bf44      	itt	mi
 8008d1e:	2320      	movmi	r3, #32
 8008d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d24:	0711      	lsls	r1, r2, #28
 8008d26:	bf44      	itt	mi
 8008d28:	232b      	movmi	r3, #43	@ 0x2b
 8008d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d34:	d015      	beq.n	8008d62 <_svfiprintf_r+0xfa>
 8008d36:	9a07      	ldr	r2, [sp, #28]
 8008d38:	4654      	mov	r4, sl
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f04f 0c0a 	mov.w	ip, #10
 8008d40:	4621      	mov	r1, r4
 8008d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d46:	3b30      	subs	r3, #48	@ 0x30
 8008d48:	2b09      	cmp	r3, #9
 8008d4a:	d94b      	bls.n	8008de4 <_svfiprintf_r+0x17c>
 8008d4c:	b1b0      	cbz	r0, 8008d7c <_svfiprintf_r+0x114>
 8008d4e:	9207      	str	r2, [sp, #28]
 8008d50:	e014      	b.n	8008d7c <_svfiprintf_r+0x114>
 8008d52:	eba0 0308 	sub.w	r3, r0, r8
 8008d56:	fa09 f303 	lsl.w	r3, r9, r3
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	46a2      	mov	sl, r4
 8008d60:	e7d2      	b.n	8008d08 <_svfiprintf_r+0xa0>
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	1d19      	adds	r1, r3, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	9103      	str	r1, [sp, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bfbb      	ittet	lt
 8008d6e:	425b      	neglt	r3, r3
 8008d70:	f042 0202 	orrlt.w	r2, r2, #2
 8008d74:	9307      	strge	r3, [sp, #28]
 8008d76:	9307      	strlt	r3, [sp, #28]
 8008d78:	bfb8      	it	lt
 8008d7a:	9204      	strlt	r2, [sp, #16]
 8008d7c:	7823      	ldrb	r3, [r4, #0]
 8008d7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d80:	d10a      	bne.n	8008d98 <_svfiprintf_r+0x130>
 8008d82:	7863      	ldrb	r3, [r4, #1]
 8008d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d86:	d132      	bne.n	8008dee <_svfiprintf_r+0x186>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d1a      	adds	r2, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9203      	str	r2, [sp, #12]
 8008d90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d94:	3402      	adds	r4, #2
 8008d96:	9305      	str	r3, [sp, #20]
 8008d98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e5c <_svfiprintf_r+0x1f4>
 8008d9c:	7821      	ldrb	r1, [r4, #0]
 8008d9e:	2203      	movs	r2, #3
 8008da0:	4650      	mov	r0, sl
 8008da2:	f7f7 fa2d 	bl	8000200 <memchr>
 8008da6:	b138      	cbz	r0, 8008db8 <_svfiprintf_r+0x150>
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	eba0 000a 	sub.w	r0, r0, sl
 8008dae:	2240      	movs	r2, #64	@ 0x40
 8008db0:	4082      	lsls	r2, r0
 8008db2:	4313      	orrs	r3, r2
 8008db4:	3401      	adds	r4, #1
 8008db6:	9304      	str	r3, [sp, #16]
 8008db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dbc:	4824      	ldr	r0, [pc, #144]	@ (8008e50 <_svfiprintf_r+0x1e8>)
 8008dbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dc2:	2206      	movs	r2, #6
 8008dc4:	f7f7 fa1c 	bl	8000200 <memchr>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d036      	beq.n	8008e3a <_svfiprintf_r+0x1d2>
 8008dcc:	4b21      	ldr	r3, [pc, #132]	@ (8008e54 <_svfiprintf_r+0x1ec>)
 8008dce:	bb1b      	cbnz	r3, 8008e18 <_svfiprintf_r+0x1b0>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	3307      	adds	r3, #7
 8008dd4:	f023 0307 	bic.w	r3, r3, #7
 8008dd8:	3308      	adds	r3, #8
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dde:	4433      	add	r3, r6
 8008de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008de2:	e76a      	b.n	8008cba <_svfiprintf_r+0x52>
 8008de4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de8:	460c      	mov	r4, r1
 8008dea:	2001      	movs	r0, #1
 8008dec:	e7a8      	b.n	8008d40 <_svfiprintf_r+0xd8>
 8008dee:	2300      	movs	r3, #0
 8008df0:	3401      	adds	r4, #1
 8008df2:	9305      	str	r3, [sp, #20]
 8008df4:	4619      	mov	r1, r3
 8008df6:	f04f 0c0a 	mov.w	ip, #10
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e00:	3a30      	subs	r2, #48	@ 0x30
 8008e02:	2a09      	cmp	r2, #9
 8008e04:	d903      	bls.n	8008e0e <_svfiprintf_r+0x1a6>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0c6      	beq.n	8008d98 <_svfiprintf_r+0x130>
 8008e0a:	9105      	str	r1, [sp, #20]
 8008e0c:	e7c4      	b.n	8008d98 <_svfiprintf_r+0x130>
 8008e0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e12:	4604      	mov	r4, r0
 8008e14:	2301      	movs	r3, #1
 8008e16:	e7f0      	b.n	8008dfa <_svfiprintf_r+0x192>
 8008e18:	ab03      	add	r3, sp, #12
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	462a      	mov	r2, r5
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e58 <_svfiprintf_r+0x1f0>)
 8008e20:	a904      	add	r1, sp, #16
 8008e22:	4638      	mov	r0, r7
 8008e24:	f3af 8000 	nop.w
 8008e28:	1c42      	adds	r2, r0, #1
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	d1d6      	bne.n	8008ddc <_svfiprintf_r+0x174>
 8008e2e:	89ab      	ldrh	r3, [r5, #12]
 8008e30:	065b      	lsls	r3, r3, #25
 8008e32:	f53f af2d 	bmi.w	8008c90 <_svfiprintf_r+0x28>
 8008e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e38:	e72c      	b.n	8008c94 <_svfiprintf_r+0x2c>
 8008e3a:	ab03      	add	r3, sp, #12
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <_svfiprintf_r+0x1f0>)
 8008e42:	a904      	add	r1, sp, #16
 8008e44:	4638      	mov	r0, r7
 8008e46:	f000 f879 	bl	8008f3c <_printf_i>
 8008e4a:	e7ed      	b.n	8008e28 <_svfiprintf_r+0x1c0>
 8008e4c:	08009619 	.word	0x08009619
 8008e50:	08009623 	.word	0x08009623
 8008e54:	00000000 	.word	0x00000000
 8008e58:	08008bb1 	.word	0x08008bb1
 8008e5c:	0800961f 	.word	0x0800961f

08008e60 <_printf_common>:
 8008e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e64:	4616      	mov	r6, r2
 8008e66:	4698      	mov	r8, r3
 8008e68:	688a      	ldr	r2, [r1, #8]
 8008e6a:	690b      	ldr	r3, [r1, #16]
 8008e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	bfb8      	it	lt
 8008e74:	4613      	movlt	r3, r2
 8008e76:	6033      	str	r3, [r6, #0]
 8008e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b10a      	cbz	r2, 8008e86 <_printf_common+0x26>
 8008e82:	3301      	adds	r3, #1
 8008e84:	6033      	str	r3, [r6, #0]
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	0699      	lsls	r1, r3, #26
 8008e8a:	bf42      	ittt	mi
 8008e8c:	6833      	ldrmi	r3, [r6, #0]
 8008e8e:	3302      	addmi	r3, #2
 8008e90:	6033      	strmi	r3, [r6, #0]
 8008e92:	6825      	ldr	r5, [r4, #0]
 8008e94:	f015 0506 	ands.w	r5, r5, #6
 8008e98:	d106      	bne.n	8008ea8 <_printf_common+0x48>
 8008e9a:	f104 0a19 	add.w	sl, r4, #25
 8008e9e:	68e3      	ldr	r3, [r4, #12]
 8008ea0:	6832      	ldr	r2, [r6, #0]
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	42ab      	cmp	r3, r5
 8008ea6:	dc26      	bgt.n	8008ef6 <_printf_common+0x96>
 8008ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008eac:	6822      	ldr	r2, [r4, #0]
 8008eae:	3b00      	subs	r3, #0
 8008eb0:	bf18      	it	ne
 8008eb2:	2301      	movne	r3, #1
 8008eb4:	0692      	lsls	r2, r2, #26
 8008eb6:	d42b      	bmi.n	8008f10 <_printf_common+0xb0>
 8008eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	47c8      	blx	r9
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d01e      	beq.n	8008f04 <_printf_common+0xa4>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	6922      	ldr	r2, [r4, #16]
 8008eca:	f003 0306 	and.w	r3, r3, #6
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	bf02      	ittt	eq
 8008ed2:	68e5      	ldreq	r5, [r4, #12]
 8008ed4:	6833      	ldreq	r3, [r6, #0]
 8008ed6:	1aed      	subeq	r5, r5, r3
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	bf0c      	ite	eq
 8008edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee0:	2500      	movne	r5, #0
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	bfc4      	itt	gt
 8008ee6:	1a9b      	subgt	r3, r3, r2
 8008ee8:	18ed      	addgt	r5, r5, r3
 8008eea:	2600      	movs	r6, #0
 8008eec:	341a      	adds	r4, #26
 8008eee:	42b5      	cmp	r5, r6
 8008ef0:	d11a      	bne.n	8008f28 <_printf_common+0xc8>
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e008      	b.n	8008f08 <_printf_common+0xa8>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	4652      	mov	r2, sl
 8008efa:	4641      	mov	r1, r8
 8008efc:	4638      	mov	r0, r7
 8008efe:	47c8      	blx	r9
 8008f00:	3001      	adds	r0, #1
 8008f02:	d103      	bne.n	8008f0c <_printf_common+0xac>
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	e7c6      	b.n	8008e9e <_printf_common+0x3e>
 8008f10:	18e1      	adds	r1, r4, r3
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	2030      	movs	r0, #48	@ 0x30
 8008f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f1a:	4422      	add	r2, r4
 8008f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f24:	3302      	adds	r3, #2
 8008f26:	e7c7      	b.n	8008eb8 <_printf_common+0x58>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	4638      	mov	r0, r7
 8008f30:	47c8      	blx	r9
 8008f32:	3001      	adds	r0, #1
 8008f34:	d0e6      	beq.n	8008f04 <_printf_common+0xa4>
 8008f36:	3601      	adds	r6, #1
 8008f38:	e7d9      	b.n	8008eee <_printf_common+0x8e>
	...

08008f3c <_printf_i>:
 8008f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	7e0f      	ldrb	r7, [r1, #24]
 8008f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f44:	2f78      	cmp	r7, #120	@ 0x78
 8008f46:	4691      	mov	r9, r2
 8008f48:	4680      	mov	r8, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	469a      	mov	sl, r3
 8008f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f52:	d807      	bhi.n	8008f64 <_printf_i+0x28>
 8008f54:	2f62      	cmp	r7, #98	@ 0x62
 8008f56:	d80a      	bhi.n	8008f6e <_printf_i+0x32>
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	f000 80d1 	beq.w	8009100 <_printf_i+0x1c4>
 8008f5e:	2f58      	cmp	r7, #88	@ 0x58
 8008f60:	f000 80b8 	beq.w	80090d4 <_printf_i+0x198>
 8008f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f6c:	e03a      	b.n	8008fe4 <_printf_i+0xa8>
 8008f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f72:	2b15      	cmp	r3, #21
 8008f74:	d8f6      	bhi.n	8008f64 <_printf_i+0x28>
 8008f76:	a101      	add	r1, pc, #4	@ (adr r1, 8008f7c <_printf_i+0x40>)
 8008f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f7c:	08008fd5 	.word	0x08008fd5
 8008f80:	08008fe9 	.word	0x08008fe9
 8008f84:	08008f65 	.word	0x08008f65
 8008f88:	08008f65 	.word	0x08008f65
 8008f8c:	08008f65 	.word	0x08008f65
 8008f90:	08008f65 	.word	0x08008f65
 8008f94:	08008fe9 	.word	0x08008fe9
 8008f98:	08008f65 	.word	0x08008f65
 8008f9c:	08008f65 	.word	0x08008f65
 8008fa0:	08008f65 	.word	0x08008f65
 8008fa4:	08008f65 	.word	0x08008f65
 8008fa8:	080090e7 	.word	0x080090e7
 8008fac:	08009013 	.word	0x08009013
 8008fb0:	080090a1 	.word	0x080090a1
 8008fb4:	08008f65 	.word	0x08008f65
 8008fb8:	08008f65 	.word	0x08008f65
 8008fbc:	08009109 	.word	0x08009109
 8008fc0:	08008f65 	.word	0x08008f65
 8008fc4:	08009013 	.word	0x08009013
 8008fc8:	08008f65 	.word	0x08008f65
 8008fcc:	08008f65 	.word	0x08008f65
 8008fd0:	080090a9 	.word	0x080090a9
 8008fd4:	6833      	ldr	r3, [r6, #0]
 8008fd6:	1d1a      	adds	r2, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6032      	str	r2, [r6, #0]
 8008fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e09c      	b.n	8009122 <_printf_i+0x1e6>
 8008fe8:	6833      	ldr	r3, [r6, #0]
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	1d19      	adds	r1, r3, #4
 8008fee:	6031      	str	r1, [r6, #0]
 8008ff0:	0606      	lsls	r6, r0, #24
 8008ff2:	d501      	bpl.n	8008ff8 <_printf_i+0xbc>
 8008ff4:	681d      	ldr	r5, [r3, #0]
 8008ff6:	e003      	b.n	8009000 <_printf_i+0xc4>
 8008ff8:	0645      	lsls	r5, r0, #25
 8008ffa:	d5fb      	bpl.n	8008ff4 <_printf_i+0xb8>
 8008ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009000:	2d00      	cmp	r5, #0
 8009002:	da03      	bge.n	800900c <_printf_i+0xd0>
 8009004:	232d      	movs	r3, #45	@ 0x2d
 8009006:	426d      	negs	r5, r5
 8009008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800900c:	4858      	ldr	r0, [pc, #352]	@ (8009170 <_printf_i+0x234>)
 800900e:	230a      	movs	r3, #10
 8009010:	e011      	b.n	8009036 <_printf_i+0xfa>
 8009012:	6821      	ldr	r1, [r4, #0]
 8009014:	6833      	ldr	r3, [r6, #0]
 8009016:	0608      	lsls	r0, r1, #24
 8009018:	f853 5b04 	ldr.w	r5, [r3], #4
 800901c:	d402      	bmi.n	8009024 <_printf_i+0xe8>
 800901e:	0649      	lsls	r1, r1, #25
 8009020:	bf48      	it	mi
 8009022:	b2ad      	uxthmi	r5, r5
 8009024:	2f6f      	cmp	r7, #111	@ 0x6f
 8009026:	4852      	ldr	r0, [pc, #328]	@ (8009170 <_printf_i+0x234>)
 8009028:	6033      	str	r3, [r6, #0]
 800902a:	bf14      	ite	ne
 800902c:	230a      	movne	r3, #10
 800902e:	2308      	moveq	r3, #8
 8009030:	2100      	movs	r1, #0
 8009032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009036:	6866      	ldr	r6, [r4, #4]
 8009038:	60a6      	str	r6, [r4, #8]
 800903a:	2e00      	cmp	r6, #0
 800903c:	db05      	blt.n	800904a <_printf_i+0x10e>
 800903e:	6821      	ldr	r1, [r4, #0]
 8009040:	432e      	orrs	r6, r5
 8009042:	f021 0104 	bic.w	r1, r1, #4
 8009046:	6021      	str	r1, [r4, #0]
 8009048:	d04b      	beq.n	80090e2 <_printf_i+0x1a6>
 800904a:	4616      	mov	r6, r2
 800904c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009050:	fb03 5711 	mls	r7, r3, r1, r5
 8009054:	5dc7      	ldrb	r7, [r0, r7]
 8009056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800905a:	462f      	mov	r7, r5
 800905c:	42bb      	cmp	r3, r7
 800905e:	460d      	mov	r5, r1
 8009060:	d9f4      	bls.n	800904c <_printf_i+0x110>
 8009062:	2b08      	cmp	r3, #8
 8009064:	d10b      	bne.n	800907e <_printf_i+0x142>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	07df      	lsls	r7, r3, #31
 800906a:	d508      	bpl.n	800907e <_printf_i+0x142>
 800906c:	6923      	ldr	r3, [r4, #16]
 800906e:	6861      	ldr	r1, [r4, #4]
 8009070:	4299      	cmp	r1, r3
 8009072:	bfde      	ittt	le
 8009074:	2330      	movle	r3, #48	@ 0x30
 8009076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800907a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800907e:	1b92      	subs	r2, r2, r6
 8009080:	6122      	str	r2, [r4, #16]
 8009082:	f8cd a000 	str.w	sl, [sp]
 8009086:	464b      	mov	r3, r9
 8009088:	aa03      	add	r2, sp, #12
 800908a:	4621      	mov	r1, r4
 800908c:	4640      	mov	r0, r8
 800908e:	f7ff fee7 	bl	8008e60 <_printf_common>
 8009092:	3001      	adds	r0, #1
 8009094:	d14a      	bne.n	800912c <_printf_i+0x1f0>
 8009096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800909a:	b004      	add	sp, #16
 800909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	f043 0320 	orr.w	r3, r3, #32
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	4832      	ldr	r0, [pc, #200]	@ (8009174 <_printf_i+0x238>)
 80090aa:	2778      	movs	r7, #120	@ 0x78
 80090ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	6831      	ldr	r1, [r6, #0]
 80090b4:	061f      	lsls	r7, r3, #24
 80090b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80090ba:	d402      	bmi.n	80090c2 <_printf_i+0x186>
 80090bc:	065f      	lsls	r7, r3, #25
 80090be:	bf48      	it	mi
 80090c0:	b2ad      	uxthmi	r5, r5
 80090c2:	6031      	str	r1, [r6, #0]
 80090c4:	07d9      	lsls	r1, r3, #31
 80090c6:	bf44      	itt	mi
 80090c8:	f043 0320 	orrmi.w	r3, r3, #32
 80090cc:	6023      	strmi	r3, [r4, #0]
 80090ce:	b11d      	cbz	r5, 80090d8 <_printf_i+0x19c>
 80090d0:	2310      	movs	r3, #16
 80090d2:	e7ad      	b.n	8009030 <_printf_i+0xf4>
 80090d4:	4826      	ldr	r0, [pc, #152]	@ (8009170 <_printf_i+0x234>)
 80090d6:	e7e9      	b.n	80090ac <_printf_i+0x170>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	f023 0320 	bic.w	r3, r3, #32
 80090de:	6023      	str	r3, [r4, #0]
 80090e0:	e7f6      	b.n	80090d0 <_printf_i+0x194>
 80090e2:	4616      	mov	r6, r2
 80090e4:	e7bd      	b.n	8009062 <_printf_i+0x126>
 80090e6:	6833      	ldr	r3, [r6, #0]
 80090e8:	6825      	ldr	r5, [r4, #0]
 80090ea:	6961      	ldr	r1, [r4, #20]
 80090ec:	1d18      	adds	r0, r3, #4
 80090ee:	6030      	str	r0, [r6, #0]
 80090f0:	062e      	lsls	r6, r5, #24
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	d501      	bpl.n	80090fa <_printf_i+0x1be>
 80090f6:	6019      	str	r1, [r3, #0]
 80090f8:	e002      	b.n	8009100 <_printf_i+0x1c4>
 80090fa:	0668      	lsls	r0, r5, #25
 80090fc:	d5fb      	bpl.n	80090f6 <_printf_i+0x1ba>
 80090fe:	8019      	strh	r1, [r3, #0]
 8009100:	2300      	movs	r3, #0
 8009102:	6123      	str	r3, [r4, #16]
 8009104:	4616      	mov	r6, r2
 8009106:	e7bc      	b.n	8009082 <_printf_i+0x146>
 8009108:	6833      	ldr	r3, [r6, #0]
 800910a:	1d1a      	adds	r2, r3, #4
 800910c:	6032      	str	r2, [r6, #0]
 800910e:	681e      	ldr	r6, [r3, #0]
 8009110:	6862      	ldr	r2, [r4, #4]
 8009112:	2100      	movs	r1, #0
 8009114:	4630      	mov	r0, r6
 8009116:	f7f7 f873 	bl	8000200 <memchr>
 800911a:	b108      	cbz	r0, 8009120 <_printf_i+0x1e4>
 800911c:	1b80      	subs	r0, r0, r6
 800911e:	6060      	str	r0, [r4, #4]
 8009120:	6863      	ldr	r3, [r4, #4]
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	2300      	movs	r3, #0
 8009126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800912a:	e7aa      	b.n	8009082 <_printf_i+0x146>
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	4632      	mov	r2, r6
 8009130:	4649      	mov	r1, r9
 8009132:	4640      	mov	r0, r8
 8009134:	47d0      	blx	sl
 8009136:	3001      	adds	r0, #1
 8009138:	d0ad      	beq.n	8009096 <_printf_i+0x15a>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	079b      	lsls	r3, r3, #30
 800913e:	d413      	bmi.n	8009168 <_printf_i+0x22c>
 8009140:	68e0      	ldr	r0, [r4, #12]
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	4298      	cmp	r0, r3
 8009146:	bfb8      	it	lt
 8009148:	4618      	movlt	r0, r3
 800914a:	e7a6      	b.n	800909a <_printf_i+0x15e>
 800914c:	2301      	movs	r3, #1
 800914e:	4632      	mov	r2, r6
 8009150:	4649      	mov	r1, r9
 8009152:	4640      	mov	r0, r8
 8009154:	47d0      	blx	sl
 8009156:	3001      	adds	r0, #1
 8009158:	d09d      	beq.n	8009096 <_printf_i+0x15a>
 800915a:	3501      	adds	r5, #1
 800915c:	68e3      	ldr	r3, [r4, #12]
 800915e:	9903      	ldr	r1, [sp, #12]
 8009160:	1a5b      	subs	r3, r3, r1
 8009162:	42ab      	cmp	r3, r5
 8009164:	dcf2      	bgt.n	800914c <_printf_i+0x210>
 8009166:	e7eb      	b.n	8009140 <_printf_i+0x204>
 8009168:	2500      	movs	r5, #0
 800916a:	f104 0619 	add.w	r6, r4, #25
 800916e:	e7f5      	b.n	800915c <_printf_i+0x220>
 8009170:	0800962a 	.word	0x0800962a
 8009174:	0800963b 	.word	0x0800963b

08009178 <_sbrk_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	@ (8009194 <_sbrk_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 fb22 	bl	80017cc <_sbrk>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_sbrk_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_sbrk_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000568 	.word	0x20000568

08009198 <_realloc_r>:
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	4607      	mov	r7, r0
 800919e:	4614      	mov	r4, r2
 80091a0:	460d      	mov	r5, r1
 80091a2:	b921      	cbnz	r1, 80091ae <_realloc_r+0x16>
 80091a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091a8:	4611      	mov	r1, r2
 80091aa:	f7ff bc75 	b.w	8008a98 <_malloc_r>
 80091ae:	b92a      	cbnz	r2, 80091bc <_realloc_r+0x24>
 80091b0:	f7ff fc06 	bl	80089c0 <_free_r>
 80091b4:	4625      	mov	r5, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091bc:	f000 f81a 	bl	80091f4 <_malloc_usable_size_r>
 80091c0:	4284      	cmp	r4, r0
 80091c2:	4606      	mov	r6, r0
 80091c4:	d802      	bhi.n	80091cc <_realloc_r+0x34>
 80091c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ca:	d8f4      	bhi.n	80091b6 <_realloc_r+0x1e>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4638      	mov	r0, r7
 80091d0:	f7ff fc62 	bl	8008a98 <_malloc_r>
 80091d4:	4680      	mov	r8, r0
 80091d6:	b908      	cbnz	r0, 80091dc <_realloc_r+0x44>
 80091d8:	4645      	mov	r5, r8
 80091da:	e7ec      	b.n	80091b6 <_realloc_r+0x1e>
 80091dc:	42b4      	cmp	r4, r6
 80091de:	4622      	mov	r2, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	bf28      	it	cs
 80091e4:	4632      	movcs	r2, r6
 80091e6:	f7ff fbdd 	bl	80089a4 <memcpy>
 80091ea:	4629      	mov	r1, r5
 80091ec:	4638      	mov	r0, r7
 80091ee:	f7ff fbe7 	bl	80089c0 <_free_r>
 80091f2:	e7f1      	b.n	80091d8 <_realloc_r+0x40>

080091f4 <_malloc_usable_size_r>:
 80091f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f8:	1f18      	subs	r0, r3, #4
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	bfbc      	itt	lt
 80091fe:	580b      	ldrlt	r3, [r1, r0]
 8009200:	18c0      	addlt	r0, r0, r3
 8009202:	4770      	bx	lr

08009204 <_init>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr

08009210 <_fini>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr
