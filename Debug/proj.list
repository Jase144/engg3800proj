
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c78  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e04  08002e04  00003e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e44  08002e44  0000406c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002e44  08002e44  0000406c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002e44  08002e44  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e44  08002e44  00003e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002e4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001938  2000006c  08002eb8  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019a4  08002eb8  000049a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad36  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e74  00000000  00000000  0000edd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00010c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000940  00000000  00000000  00011860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021820  00000000  00000000  000121a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d746  00000000  00000000  000339c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8fc  00000000  00000000  00041106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010da02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c0  00000000  00000000  0010da48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00110b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000006c 	.word	0x2000006c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002dec 	.word	0x08002dec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000070 	.word	0x20000070
 80001c8:	08002dec 	.word	0x08002dec

080001cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000204 <MX_DMA_Init+0x38>)
 80001d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80001d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000204 <MX_DMA_Init+0x38>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80001de:	4b09      	ldr	r3, [pc, #36]	@ (8000204 <MX_DMA_Init+0x38>)
 80001e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80001e2:	f003 0301 	and.w	r3, r3, #1
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2100      	movs	r1, #0
 80001ee:	200f      	movs	r0, #15
 80001f0:	f000 fc59 	bl	8000aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80001f4:	200f      	movs	r0, #15
 80001f6:	f000 fc72 	bl	8000ade <HAL_NVIC_EnableIRQ>

}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40021000 	.word	0x40021000

08000208 <opSystemClock_Config>:
#include "intern_sysclock.h"
#include "stm32l4xx_hal_rcc.h"
void sysclock_lib_error_handler(void);
// c source file for the source clock
void opSystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	@ 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2244      	movs	r2, #68	@ 0x44
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fdbc 	bl	8002d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800022e:	f000 ffd3 	bl	80011d8 <HAL_PWREx_ControlVoltageScaling>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <opSystemClock_Config+0x34>
  {
    sysclock_lib_error_handler();
 8000238:	f000 f82c 	bl	8000294 <sysclock_lib_error_handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800023c:	2310      	movs	r3, #16
 800023e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000248:	2390      	movs	r3, #144	@ 0x90
 800024a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024c:	2300      	movs	r3, #0
 800024e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	4618      	mov	r0, r3
 8000256:	f001 f815 	bl	8001284 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <opSystemClock_Config+0x5c>
  {
    sysclock_lib_error_handler();
 8000260:	f000 f818 	bl	8000294 <sysclock_lib_error_handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000268:	2300      	movs	r3, #0
 800026a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000278:	463b      	mov	r3, r7
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fc15 	bl	8001aac <HAL_RCC_ClockConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <opSystemClock_Config+0x84>
  {
    sysclock_lib_error_handler();
 8000288:	f000 f804 	bl	8000294 <sysclock_lib_error_handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3758      	adds	r7, #88	@ 0x58
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <sysclock_lib_error_handler>:
void sysclock_lib_error_handler(void) {
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000298:	b672      	cpsid	i
}
 800029a:	bf00      	nop
  /* USER CODE BEGIN sysclock_lib_error_handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800029c:	bf00      	nop
 800029e:	e7fd      	b.n	800029c <sysclock_lib_error_handler+0x8>

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 faaf 	bl	8000806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  opSystemClock_Config();
 80002a8:	f7ff ffae 	bl	8000208 <opSystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80002ac:	f7ff ff8e 	bl	80001cc <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  reg_64ledmatrix_init_external();
 80002b0:	f000 f810 	bl	80002d4 <reg_64ledmatrix_init_external>

  //transferComplete = 1;
  transferComplete = 1;
 80002b4:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <main+0x24>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
  reg_64ledmatrix_senddata(0);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f93a 	bl	8000534 <reg_64ledmatrix_senddata>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <main+0x20>
 80002c4:	20000088 	.word	0x20000088

080002c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80002cc:	b672      	cpsid	i
}
 80002ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <Error_Handler+0x8>

080002d4 <reg_64ledmatrix_init_external>:

void ledmatrix64_lib_error_handler(void);
void* transfer_complete_callback(struct __DMA_HandleTypeDef* dma);
uint8_t transferComplete = 0;

void reg_64ledmatrix_init_external(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0


    // GPIO config - each instruction does both clear and set the pins
    reg_64ledmatrix_initgpio_internal();
 80002d8:	f000 f804 	bl	80002e4 <reg_64ledmatrix_initgpio_internal>



    reg_64ledmatrix_inittim2_internal();
 80002dc:	f000 f846 	bl	800036c <reg_64ledmatrix_inittim2_internal>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <reg_64ledmatrix_initgpio_internal>:


void reg_64ledmatrix_initgpio_internal(void) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000368 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000368 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000368 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
    GPIOA->MODER = ((GPIOA->MODER & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000302:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 0303 	bic.w	r3, r3, #3
 800030c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_MODER)) |
 8000310:	f043 0302 	orr.w	r3, r3, #2
    GPIOA->MODER = ((GPIOA->MODER & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000314:	6013      	str	r3, [r2, #0]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_MODER_DIN));

    GPIOA->OSPEEDR = ((GPIOA->OSPEEDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000316:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f023 0303 	bic.w	r3, r3, #3
 8000320:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_OSPEEDR)) |
 8000324:	f043 0302 	orr.w	r3, r3, #2
    GPIOA->OSPEEDR = ((GPIOA->OSPEEDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000328:	6093      	str	r3, [r2, #8]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_OSPEEDR_DIN));

    GPIOA->PUPDR = ((GPIOA->PUPDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 800032a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_PUPDR)) |
 8000334:	f023 0303 	bic.w	r3, r3, #3
    GPIOA->PUPDR = ((GPIOA->PUPDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000338:	60d3      	str	r3, [r2, #12]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_PUPDR_DIN));

    GPIOA->OTYPER = ((GPIOA->OTYPER & ~PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK,
 800033a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_OTYPER)) |
 8000344:	f023 0301 	bic.w	r3, r3, #1
    GPIOA->OTYPER = ((GPIOA->OTYPER & ~PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK,
 8000348:	6053      	str	r3, [r2, #4]
                    PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK, PINSET_GPIO_OTYPER_DIN));

    GPIOA -> AFR[0] |= (1 << 0*4);
 800034a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6213      	str	r3, [r2, #32]

}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <reg_64ledmatrix_inittim2_internal>:
TIM_ClockConfigTypeDef sClockSourceConfig = {0};
TIM_MasterConfigTypeDef sMasterConfig = {0};
TIM_OC_InitTypeDef sConfigOC = {0};
static uint32_t pink_values[24] = {7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 14, 7, 7, 14, 14};
uint32_t ccr1_values[1536] = {0};
void reg_64ledmatrix_inittim2_internal(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0

    __HAL_RCC_DMA1_CLK_ENABLE();
 8000372:	4b64      	ldr	r3, [pc, #400]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 8000374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000376:	4a63      	ldr	r2, [pc, #396]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6493      	str	r3, [r2, #72]	@ 0x48
 800037e:	4b61      	ldr	r3, [pc, #388]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 8000380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800038a:	4b5e      	ldr	r3, [pc, #376]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800038e:	4a5d      	ldr	r2, [pc, #372]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6593      	str	r3, [r2, #88]	@ 0x58
 8000396:	4b5b      	ldr	r3, [pc, #364]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 8000398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

    tim2Struct.Instance = TIM2;
 80003a2:	4b59      	ldr	r3, [pc, #356]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a8:	601a      	str	r2, [r3, #0]
    tim2Struct.Init.Prescaler = 0;
 80003aa:	4b57      	ldr	r3, [pc, #348]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
    tim2Struct.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b55      	ldr	r3, [pc, #340]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
    tim2Struct.Init.Period = 21;
 80003b6:	4b54      	ldr	r3, [pc, #336]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003b8:	2215      	movs	r2, #21
 80003ba:	60da      	str	r2, [r3, #12]
    tim2Struct.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b52      	ldr	r3, [pc, #328]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
    tim2Struct.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b51      	ldr	r3, [pc, #324]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]

    HAL_TIM_Base_Init(&tim2Struct);
 80003c8:	484f      	ldr	r0, [pc, #316]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003ca:	f001 fd5b 	bl	8001e84 <HAL_TIM_Base_Init>



    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ce:	4b4f      	ldr	r3, [pc, #316]	@ (800050c <reg_64ledmatrix_inittim2_internal+0x1a0>)
 80003d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003d4:	601a      	str	r2, [r3, #0]
    HAL_TIM_ConfigClockSource(&tim2Struct, &sClockSourceConfig);
 80003d6:	494d      	ldr	r1, [pc, #308]	@ (800050c <reg_64ledmatrix_inittim2_internal+0x1a0>)
 80003d8:	484b      	ldr	r0, [pc, #300]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003da:	f001 fffd 	bl	80023d8 <HAL_TIM_ConfigClockSource>

    HAL_TIM_PWM_Init(&tim2Struct);
 80003de:	484a      	ldr	r0, [pc, #296]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80003e0:	f001 fda7 	bl	8001f32 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000510 <reg_64ledmatrix_inittim2_internal+0x1a4>)
 80003e6:	2260      	movs	r2, #96	@ 0x60
 80003e8:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 80003ea:	4b49      	ldr	r3, [pc, #292]	@ (8000510 <reg_64ledmatrix_inittim2_internal+0x1a4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f0:	4b47      	ldr	r3, [pc, #284]	@ (8000510 <reg_64ledmatrix_inittim2_internal+0x1a4>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f6:	4b46      	ldr	r3, [pc, #280]	@ (8000510 <reg_64ledmatrix_inittim2_internal+0x1a4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_ConfigChannel(&tim2Struct, &sConfigOC, TIM_CHANNEL_1);
 80003fc:	2200      	movs	r2, #0
 80003fe:	4944      	ldr	r1, [pc, #272]	@ (8000510 <reg_64ledmatrix_inittim2_internal+0x1a4>)
 8000400:	4841      	ldr	r0, [pc, #260]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 8000402:	f001 fed5 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>


    HAL_TIM_MspPostInit(&tim2Struct);
 8000406:	4840      	ldr	r0, [pc, #256]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 8000408:	f000 f9a0 	bl	800074c <HAL_TIM_MspPostInit>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	4b41      	ldr	r3, [pc, #260]	@ (8000514 <reg_64ledmatrix_inittim2_internal+0x1a8>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000412:	4b40      	ldr	r3, [pc, #256]	@ (8000514 <reg_64ledmatrix_inittim2_internal+0x1a8>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
    HAL_TIMEx_MasterConfigSynchronization(&tim2Struct, &sMasterConfig);
 8000418:	493e      	ldr	r1, [pc, #248]	@ (8000514 <reg_64ledmatrix_inittim2_internal+0x1a8>)
 800041a:	483b      	ldr	r0, [pc, #236]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 800041c:	f002 fc54 	bl	8002cc8 <HAL_TIMEx_MasterConfigSynchronization>

// DMA config
__HAL_LINKDMA(&tim2Struct, hdma[TIM_DMA_ID_UPDATE], hdma_tim2_up);
 8000420:	4b39      	ldr	r3, [pc, #228]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 8000422:	4a3d      	ldr	r2, [pc, #244]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000424:	621a      	str	r2, [r3, #32]
 8000426:	4b3c      	ldr	r3, [pc, #240]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000428:	4a37      	ldr	r2, [pc, #220]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 800042a:	629a      	str	r2, [r3, #40]	@ 0x28
hdma_tim2_up.Instance = DMA1_Channel2;
 800042c:	4b3a      	ldr	r3, [pc, #232]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 800042e:	4a3b      	ldr	r2, [pc, #236]	@ (800051c <reg_64ledmatrix_inittim2_internal+0x1b0>)
 8000430:	601a      	str	r2, [r3, #0]

hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000432:	4b39      	ldr	r3, [pc, #228]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000434:	2210      	movs	r2, #16
 8000436:	609a      	str	r2, [r3, #8]
hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000438:	4b37      	ldr	r3, [pc, #220]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800043e:	4b36      	ldr	r3, [pc, #216]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	611a      	str	r2, [r3, #16]
hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000444:	4b34      	ldr	r3, [pc, #208]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800044a:	615a      	str	r2, [r3, #20]
hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800044c:	4b32      	ldr	r3, [pc, #200]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 800044e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000452:	619a      	str	r2, [r3, #24]
hdma_tim2_up.Init.Mode = DMA_NORMAL; // stop after last
 8000454:	4b30      	ldr	r3, [pc, #192]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 800045a:	4b2f      	ldr	r3, [pc, #188]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
//hdma_tim2_up.XferCpltCallback = (*transfer_complete_callback)(struct __DMA_HandleTypeDef*);
hdma_tim2_up.XferCpltCallback = (transfer_complete_callback)(&hdma_tim2_up);
 8000460:	482d      	ldr	r0, [pc, #180]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000462:	f000 f8a9 	bl	80005b8 <transfer_complete_callback>
 8000466:	4603      	mov	r3, r0
 8000468:	461a      	mov	r2, r3
 800046a:	4b2b      	ldr	r3, [pc, #172]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 800046c:	62da      	str	r2, [r3, #44]	@ 0x2c
HAL_DMA_Init(&hdma_tim2_up);
 800046e:	482a      	ldr	r0, [pc, #168]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 8000470:	f000 fb50 	bl	8000b14 <HAL_DMA_Init>

DMA1_CSELR->CSELR = (DMA1_CSELR->CSELR & ~(0xF << (DMA_CSELR_C2S_Pos))) | (4 << DMA_CSELR_C2S_Pos);
 8000474:	4b2a      	ldr	r3, [pc, #168]	@ (8000520 <reg_64ledmatrix_inittim2_internal+0x1b4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800047c:	4a28      	ldr	r2, [pc, #160]	@ (8000520 <reg_64ledmatrix_inittim2_internal+0x1b4>)
 800047e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000482:	6013      	str	r3, [r2, #0]
DMA1_Channel1->CMAR =(uint32_t)(ccr1_values);
DMA1_Channel1->CPAR =(uint32_t)&(TIM2->CCR1);
DMA1_Channel1->CNDTR = 4;
*/

HAL_TIM_PWM_Start(&tim2Struct, TIM_CHANNEL_1);
 8000484:	2100      	movs	r1, #0
 8000486:	4820      	ldr	r0, [pc, #128]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 8000488:	f001 fdb4 	bl	8001ff4 <HAL_TIM_PWM_Start>


    for (uint16_t i = 0; i < 1536; i++) {
 800048c:	2300      	movs	r3, #0
 800048e:	81fb      	strh	r3, [r7, #14]
 8000490:	e015      	b.n	80004be <reg_64ledmatrix_inittim2_internal+0x152>
        ccr1_values[i] = pink_values[i%24];
 8000492:	89fa      	ldrh	r2, [r7, #14]
 8000494:	4b23      	ldr	r3, [pc, #140]	@ (8000524 <reg_64ledmatrix_inittim2_internal+0x1b8>)
 8000496:	fba3 1302 	umull	r1, r3, r3, r2
 800049a:	0919      	lsrs	r1, r3, #4
 800049c:	460b      	mov	r3, r1
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	440b      	add	r3, r1
 80004a2:	00db      	lsls	r3, r3, #3
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	89fb      	ldrh	r3, [r7, #14]
 80004ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000528 <reg_64ledmatrix_inittim2_internal+0x1bc>)
 80004ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80004b2:	491e      	ldr	r1, [pc, #120]	@ (800052c <reg_64ledmatrix_inittim2_internal+0x1c0>)
 80004b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = 0; i < 1536; i++) {
 80004b8:	89fb      	ldrh	r3, [r7, #14]
 80004ba:	3301      	adds	r3, #1
 80004bc:	81fb      	strh	r3, [r7, #14]
 80004be:	89fb      	ldrh	r3, [r7, #14]
 80004c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80004c4:	d3e5      	bcc.n	8000492 <reg_64ledmatrix_inittim2_internal+0x126>
    }

HAL_DMA_Start(&hdma_tim2_up,
 80004c6:	4919      	ldr	r1, [pc, #100]	@ (800052c <reg_64ledmatrix_inittim2_internal+0x1c0>)
 80004c8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80004cc:	4a18      	ldr	r2, [pc, #96]	@ (8000530 <reg_64ledmatrix_inittim2_internal+0x1c4>)
 80004ce:	4812      	ldr	r0, [pc, #72]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 80004d0:	f000 fbd8 	bl	8000c84 <HAL_DMA_Start>
              (uint32_t)(ccr1_values),
              (uint32_t)&(TIM2->CCR1),
              1536);
DMA1_Channel2->CCR |= (DMA_CCR_TCIE_Msk);
 80004d4:	4b11      	ldr	r3, [pc, #68]	@ (800051c <reg_64ledmatrix_inittim2_internal+0x1b0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a10      	ldr	r2, [pc, #64]	@ (800051c <reg_64ledmatrix_inittim2_internal+0x1b0>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6013      	str	r3, [r2, #0]
DMA1_Channel2->CCR |= (DMA_CCR_TCIE_Msk);
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <reg_64ledmatrix_inittim2_internal+0x1b0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <reg_64ledmatrix_inittim2_internal+0x1b0>)
 80004e6:	f043 0302 	orr.w	r3, r3, #2
 80004ea:	6013      	str	r3, [r2, #0]
__HAL_TIM_ENABLE_DMA(&tim2Struct, TIM_DMA_UPDATE);
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68da      	ldr	r2, [r3, #12]
 80004f2:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004fa:	60da      	str	r2, [r3, #12]
//TIM2->DIER |= (1 << TIM_DIER_UDE_Pos);


}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	200000d4 	.word	0x200000d4
 800050c:	20000120 	.word	0x20000120
 8000510:	2000013c 	.word	0x2000013c
 8000514:	20000130 	.word	0x20000130
 8000518:	2000008c 	.word	0x2000008c
 800051c:	4002001c 	.word	0x4002001c
 8000520:	400200a8 	.word	0x400200a8
 8000524:	aaaaaaab 	.word	0xaaaaaaab
 8000528:	20000000 	.word	0x20000000
 800052c:	20000158 	.word	0x20000158
 8000530:	40000034 	.word	0x40000034

08000534 <reg_64ledmatrix_senddata>:
    {
    }
    /* USER CODE END ledmatrix64_lib_error_handler_Debug */
}

void reg_64ledmatrix_senddata(uint8_t rgbMatrix) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
    // check if dma is ready for the mem arr to be modified, by checking if
    // transfer is complete and if the DMA is enabled
    if (transferComplete && (DMA1_Channel2->CCR & (DMA_CCR_EN_Msk))) {
 800053e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <reg_64ledmatrix_senddata+0x78>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d02b      	beq.n	800059e <reg_64ledmatrix_senddata+0x6a>
 8000546:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <reg_64ledmatrix_senddata+0x7c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d025      	beq.n	800059e <reg_64ledmatrix_senddata+0x6a>
        TIM2->CR1 &= ~(TIM_CR1_CEN_Msk);
 8000552:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800055c:	f023 0301 	bic.w	r3, r3, #1
 8000560:	6013      	str	r3, [r2, #0]
        TIM2->CNT = 0;
 8000562:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	@ 0x24
        transferComplete = 0;
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <reg_64ledmatrix_senddata+0x78>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
        // turn off DMA transfers whilst changing mem arr

        for (uint16_t i = 0; i < 1536; i++) {
 8000570:	2300      	movs	r3, #0
 8000572:	81fb      	strh	r3, [r7, #14]
 8000574:	e007      	b.n	8000586 <reg_64ledmatrix_senddata+0x52>
            ccr1_values[i] = 7;
 8000576:	89fb      	ldrh	r3, [r7, #14]
 8000578:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <reg_64ledmatrix_senddata+0x80>)
 800057a:	2107      	movs	r1, #7
 800057c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint16_t i = 0; i < 1536; i++) {
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	3301      	adds	r3, #1
 8000584:	81fb      	strh	r3, [r7, #14]
 8000586:	89fb      	ldrh	r3, [r7, #14]
 8000588:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800058c:	d3f3      	bcc.n	8000576 <reg_64ledmatrix_senddata+0x42>
        }
        TIM2->CR1 |= (TIM_CR1_CEN_Msk);
 800058e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6013      	str	r3, [r2, #0]

    }

}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088
 80005b0:	4002001c 	.word	0x4002001c
 80005b4:	20000158 	.word	0x20000158

080005b8 <transfer_complete_callback>:

void* transfer_complete_callback(struct __DMA_HandleTypeDef* dma) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    transferComplete = 1;
 80005c0:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <transfer_complete_callback+0x1c>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]

}
 80005c6:	bf00      	nop
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	20000088 	.word	0x20000088

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <HAL_MspInit+0x44>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <HAL_MspInit+0x44>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <HAL_MspInit+0x44>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005fa:	4a08      	ldr	r2, [pc, #32]	@ (800061c <HAL_MspInit+0x44>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000600:	6593      	str	r3, [r2, #88]	@ 0x58
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_MspInit+0x44>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <NMI_Handler+0x4>

08000628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <MemManage_Handler+0x4>

08000638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <UsageFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000676:	f000 f91b 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000684:	4802      	ldr	r0, [pc, #8]	@ (8000690 <DMA1_Channel5_IRQHandler+0x10>)
 8000686:	f000 fb40 	bl	8000d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20001958 	.word	0x20001958

08000694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <SystemInit+0x20>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800069e:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <SystemInit+0x20>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim2);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006c8:	d136      	bne.n	8000738 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <HAL_TIM_Base_MspInit+0x88>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <HAL_TIM_Base_MspInit+0x88>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <HAL_TIM_Base_MspInit+0x88>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 80006e4:	4a18      	ldr	r2, [pc, #96]	@ (8000748 <HAL_TIM_Base_MspInit+0x90>)
 80006e6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 80006f0:	2210      	movs	r2, #16
 80006f2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 8000702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000706:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 800070a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800070e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 800071e:	f000 f9f9 	bl	8000b14 <HAL_DMA_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000728:	f7ff fdce 	bl	80002c8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
 8000732:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <HAL_TIM_Base_MspInit+0x8c>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	20001958 	.word	0x20001958
 8000748:	40020058 	.word	0x40020058

0800074c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d11c      	bne.n	80007a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <HAL_TIM_MspPostInit+0x64>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <HAL_TIM_MspPostInit+0x64>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <HAL_TIM_MspPostInit+0x64>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	2301      	movs	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000796:	2301      	movs	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f000 fb90 	bl	8000ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000

080007b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b8:	f7ff ff6c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	@ (80007f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000800 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f002 fadf 	bl	8002da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007e6:	f7ff fd5b 	bl	80002a0 <main>

080007ea <LoopForever>:

LoopForever:
    b LoopForever
 80007ea:	e7fe      	b.n	80007ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007ec:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80007f8:	08002e4c 	.word	0x08002e4c
  ldr r2, =_sbss
 80007fc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000800:	200019a4 	.word	0x200019a4

08000804 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_IRQHandler>

08000806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f93d 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f80e 	bl	8000838 <HAL_InitTick>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	e001      	b.n	800082c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000828:	f7ff fed6 	bl	80005d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800082c:	79fb      	ldrb	r3, [r7, #7]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <HAL_InitTick+0x6c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d023      	beq.n	8000894 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <HAL_InitTick+0x70>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <HAL_InitTick+0x6c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f949 	bl	8000afa <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10f      	bne.n	800088e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d809      	bhi.n	8000888 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800087c:	f000 f913 	bl	8000aa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000880:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <HAL_InitTick+0x74>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e007      	b.n	8000898 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e004      	b.n	8000898 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e001      	b.n	8000898 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000068 	.word	0x20000068
 80008a8:	20000060 	.word	0x20000060
 80008ac:	20000064 	.word	0x20000064

080008b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_IncTick+0x20>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_IncTick+0x24>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_IncTick+0x24>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000068 	.word	0x20000068
 80008d4:	200019a0 	.word	0x200019a0

080008d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <HAL_GetTick+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	200019a0 	.word	0x200019a0

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db0b      	blt.n	800097e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f003 021f 	and.w	r2, r3, #31
 800096c:	4907      	ldr	r1, [pc, #28]	@ (800098c <__NVIC_EnableIRQ+0x38>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	2001      	movs	r0, #1
 8000976:	fa00 f202 	lsl.w	r2, r0, r2
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	@ (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	@ (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	@ 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	@ 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff29 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff3e 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff8e 	bl	80009e4 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5d 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff31 	bl	8000954 <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffa2 	bl	8000a4c <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e098      	b.n	8000c58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c64 <HAL_DMA_Init+0x150>)
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d80f      	bhi.n	8000b52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b4b      	ldr	r3, [pc, #300]	@ (8000c68 <HAL_DMA_Init+0x154>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8000c6c <HAL_DMA_Init+0x158>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	009a      	lsls	r2, r3, #2
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a48      	ldr	r2, [pc, #288]	@ (8000c70 <HAL_DMA_Init+0x15c>)
 8000b4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b50:	e00e      	b.n	8000b70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b46      	ldr	r3, [pc, #280]	@ (8000c74 <HAL_DMA_Init+0x160>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a43      	ldr	r2, [pc, #268]	@ (8000c6c <HAL_DMA_Init+0x158>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	009a      	lsls	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a42      	ldr	r2, [pc, #264]	@ (8000c78 <HAL_DMA_Init+0x164>)
 8000b6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2202      	movs	r2, #2
 8000b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000bca:	d039      	beq.n	8000c40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	4a27      	ldr	r2, [pc, #156]	@ (8000c70 <HAL_DMA_Init+0x15c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d11a      	bne.n	8000c0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000bd6:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <HAL_DMA_Init+0x168>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f003 031c 	and.w	r3, r3, #28
 8000be2:	210f      	movs	r1, #15
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4924      	ldr	r1, [pc, #144]	@ (8000c7c <HAL_DMA_Init+0x168>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <HAL_DMA_Init+0x168>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6859      	ldr	r1, [r3, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfc:	f003 031c 	and.w	r3, r3, #28
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	491d      	ldr	r1, [pc, #116]	@ (8000c7c <HAL_DMA_Init+0x168>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
 8000c0a:	e019      	b.n	8000c40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <HAL_DMA_Init+0x16c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c14:	f003 031c 	and.w	r3, r3, #28
 8000c18:	210f      	movs	r1, #15
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4917      	ldr	r1, [pc, #92]	@ (8000c80 <HAL_DMA_Init+0x16c>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_DMA_Init+0x16c>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6859      	ldr	r1, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f003 031c 	and.w	r3, r3, #28
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	4911      	ldr	r1, [pc, #68]	@ (8000c80 <HAL_DMA_Init+0x16c>)
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40020407 	.word	0x40020407
 8000c68:	bffdfff8 	.word	0xbffdfff8
 8000c6c:	cccccccd 	.word	0xcccccccd
 8000c70:	40020000 	.word	0x40020000
 8000c74:	bffdfbf8 	.word	0xbffdfbf8
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	400200a8 	.word	0x400200a8
 8000c80:	400204a8 	.word	0x400204a8

08000c84 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <HAL_DMA_Start+0x20>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e02e      	b.n	8000d02 <HAL_DMA_Start+0x7e>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d11d      	bne.n	8000cf4 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0201 	bic.w	r2, r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f000 f8c3 	bl	8000e68 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0201 	orr.w	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e005      	b.n	8000d00 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f003 031c 	and.w	r3, r3, #28
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4013      	ands	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d026      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x7a>
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d021      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d107      	bne.n	8000d5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0204 	bic.w	r2, r2, #4
 8000d5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f003 021c 	and.w	r2, r3, #28
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d071      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d82:	e06c      	b.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d88:	f003 031c 	and.w	r3, r3, #28
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02e      	beq.n	8000df6 <HAL_DMA_IRQHandler+0xec>
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d029      	beq.n	8000df6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0320 	and.w	r3, r3, #32
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10b      	bne.n	8000dc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 020a 	bic.w	r2, r2, #10
 8000dbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dcc:	f003 021c 	and.w	r2, r3, #28
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d038      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000df4:	e033      	b.n	8000e5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f003 031c 	and.w	r3, r3, #28
 8000dfe:	2208      	movs	r2, #8
 8000e00:	409a      	lsls	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d02a      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x156>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d025      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 020e 	bic.w	r2, r2, #14
 8000e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	f003 021c 	and.w	r2, r3, #28
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	2101      	movs	r1, #1
 8000e32:	fa01 f202 	lsl.w	r2, r1, r2
 8000e36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
}
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f003 021c 	and.w	r2, r3, #28
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f202 	lsl.w	r2, r1, r2
 8000e88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b10      	cmp	r3, #16
 8000e98:	d108      	bne.n	8000eac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000eaa:	e007      	b.n	8000ebc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	60da      	str	r2, [r3, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e154      	b.n	8001182 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8146 	beq.w	800117c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d005      	beq.n	8000f08 <HAL_GPIO_Init+0x40>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d130      	bne.n	8000f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	f003 0201 	and.w	r2, r3, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d017      	beq.n	8000fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	6939      	ldr	r1, [r7, #16]
 8000ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0203 	and.w	r2, r3, #3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80a0 	beq.w	800117c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	4b58      	ldr	r3, [pc, #352]	@ (80011a0 <HAL_GPIO_Init+0x2d8>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001040:	4a57      	ldr	r2, [pc, #348]	@ (80011a0 <HAL_GPIO_Init+0x2d8>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6613      	str	r3, [r2, #96]	@ 0x60
 8001048:	4b55      	ldr	r3, [pc, #340]	@ (80011a0 <HAL_GPIO_Init+0x2d8>)
 800104a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001054:	4a53      	ldr	r2, [pc, #332]	@ (80011a4 <HAL_GPIO_Init+0x2dc>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800107e:	d019      	beq.n	80010b4 <HAL_GPIO_Init+0x1ec>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a49      	ldr	r2, [pc, #292]	@ (80011a8 <HAL_GPIO_Init+0x2e0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d013      	beq.n	80010b0 <HAL_GPIO_Init+0x1e8>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a48      	ldr	r2, [pc, #288]	@ (80011ac <HAL_GPIO_Init+0x2e4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d00d      	beq.n	80010ac <HAL_GPIO_Init+0x1e4>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a47      	ldr	r2, [pc, #284]	@ (80011b0 <HAL_GPIO_Init+0x2e8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0x1e0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a46      	ldr	r2, [pc, #280]	@ (80011b4 <HAL_GPIO_Init+0x2ec>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d101      	bne.n	80010a4 <HAL_GPIO_Init+0x1dc>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e008      	b.n	80010b6 <HAL_GPIO_Init+0x1ee>
 80010a4:	2307      	movs	r3, #7
 80010a6:	e006      	b.n	80010b6 <HAL_GPIO_Init+0x1ee>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e004      	b.n	80010b6 <HAL_GPIO_Init+0x1ee>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e002      	b.n	80010b6 <HAL_GPIO_Init+0x1ee>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <HAL_GPIO_Init+0x1ee>
 80010b4:	2300      	movs	r3, #0
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	f002 0203 	and.w	r2, r2, #3
 80010bc:	0092      	lsls	r2, r2, #2
 80010be:	4093      	lsls	r3, r2
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c6:	4937      	ldr	r1, [pc, #220]	@ (80011a4 <HAL_GPIO_Init+0x2dc>)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d4:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f8:	4a2f      	ldr	r2, [pc, #188]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001122:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114c:	4a1a      	ldr	r2, [pc, #104]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001176:	4a10      	ldr	r2, [pc, #64]	@ (80011b8 <HAL_GPIO_Init+0x2f0>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	f47f aea3 	bne.w	8000ed8 <HAL_GPIO_Init+0x10>
  }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000800 	.word	0x48000800
 80011b0:	48000c00 	.word	0x48000c00
 80011b4:	48001000 	.word	0x48001000
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40007000 	.word	0x40007000

080011d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011e6:	d130      	bne.n	800124a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e8:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f4:	d038      	beq.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001204:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2232      	movs	r2, #50	@ 0x32
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	3301      	adds	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121c:	e002      	b.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3b01      	subs	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001230:	d102      	bne.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f2      	bne.n	800121e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001244:	d110      	bne.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e00f      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001256:	d007      	beq.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001260:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001266:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40007000 	.word	0x40007000
 800127c:	20000060 	.word	0x20000060
 8001280:	431bde83 	.word	0x431bde83

08001284 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f000 bc02 	b.w	8001a9c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001298:	4b96      	ldr	r3, [pc, #600]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a2:	4b94      	ldr	r3, [pc, #592]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80e4 	beq.w	8001482 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <HAL_RCC_OscConfig+0x4c>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b0c      	cmp	r3, #12
 80012c4:	f040 808b 	bne.w	80013de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	f040 8087 	bne.w	80013de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d0:	4b88      	ldr	r3, [pc, #544]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_OscConfig+0x64>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e3d9      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	4b81      	ldr	r3, [pc, #516]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <HAL_RCC_OscConfig+0x7e>
 80012f8:	4b7e      	ldr	r3, [pc, #504]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001300:	e005      	b.n	800130e <HAL_RCC_OscConfig+0x8a>
 8001302:	4b7c      	ldr	r3, [pc, #496]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800130e:	4293      	cmp	r3, r2
 8001310:	d223      	bcs.n	800135a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fd54 	bl	8001dc4 <RCC_SetFlashLatencyFromMSIRange>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e3ba      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001326:	4b73      	ldr	r3, [pc, #460]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a72      	ldr	r2, [pc, #456]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b70      	ldr	r3, [pc, #448]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	496d      	ldr	r1, [pc, #436]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001344:	4b6b      	ldr	r3, [pc, #428]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	4968      	ldr	r1, [pc, #416]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e025      	b.n	80013a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800135a:	4b66      	ldr	r3, [pc, #408]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a65      	ldr	r2, [pc, #404]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b63      	ldr	r3, [pc, #396]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4960      	ldr	r1, [pc, #384]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001378:	4b5e      	ldr	r3, [pc, #376]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	495b      	ldr	r1, [pc, #364]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fd14 	bl	8001dc4 <RCC_SetFlashLatencyFromMSIRange>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e37a      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013a6:	f000 fc81 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4950      	ldr	r1, [pc, #320]	@ (80014f8 <HAL_RCC_OscConfig+0x274>)
 80013b8:	5ccb      	ldrb	r3, [r1, r3]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	4a4e      	ldr	r2, [pc, #312]	@ (80014fc <HAL_RCC_OscConfig+0x278>)
 80013c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001500 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fa34 	bl	8000838 <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d052      	beq.n	8001480 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	e35e      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d032      	beq.n	800144c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013e6:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a42      	ldr	r2, [pc, #264]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fa71 	bl	80008d8 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013fa:	f7ff fa6d 	bl	80008d8 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e347      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140c:	4b39      	ldr	r3, [pc, #228]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001418:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a35      	ldr	r2, [pc, #212]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4930      	ldr	r1, [pc, #192]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001436:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	492b      	ldr	r1, [pc, #172]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
 800144a:	e01a      	b.n	8001482 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800144c:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a28      	ldr	r2, [pc, #160]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001458:	f7ff fa3e 	bl	80008d8 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001460:	f7ff fa3a 	bl	80008d8 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e314      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1dc>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d073      	beq.n	8001576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x21c>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d10e      	bne.n	80014b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d10b      	bne.n	80014b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d063      	beq.n	8001574 <HAL_RCC_OscConfig+0x2f0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d15f      	bne.n	8001574 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e2f1      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c0:	d106      	bne.n	80014d0 <HAL_RCC_OscConfig+0x24c>
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e025      	b.n	800151c <HAL_RCC_OscConfig+0x298>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d8:	d114      	bne.n	8001504 <HAL_RCC_OscConfig+0x280>
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a02      	ldr	r2, [pc, #8]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e013      	b.n	800151c <HAL_RCC_OscConfig+0x298>
 80014f4:	40021000 	.word	0x40021000
 80014f8:	08002e04 	.word	0x08002e04
 80014fc:	20000060 	.word	0x20000060
 8001500:	20000064 	.word	0x20000064
 8001504:	4ba0      	ldr	r3, [pc, #640]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a9f      	ldr	r2, [pc, #636]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800150a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b9d      	ldr	r3, [pc, #628]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a9c      	ldr	r2, [pc, #624]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff f9d8 	bl	80008d8 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff f9d4 	bl	80008d8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	@ 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e2ae      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153e:	4b92      	ldr	r3, [pc, #584]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x2a8>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff f9c4 	bl	80008d8 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff f9c0 	bl	80008d8 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	@ 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e29a      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001566:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x2d0>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d060      	beq.n	8001644 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d005      	beq.n	8001594 <HAL_RCC_OscConfig+0x310>
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d119      	bne.n	80015c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d116      	bne.n	80015c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	4b7c      	ldr	r3, [pc, #496]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x328>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e277      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b76      	ldr	r3, [pc, #472]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	4973      	ldr	r1, [pc, #460]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c0:	e040      	b.n	8001644 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d023      	beq.n	8001612 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff f97f 	bl	80008d8 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff f97b 	bl	80008d8 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e255      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	4b65      	ldr	r3, [pc, #404]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b62      	ldr	r3, [pc, #392]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	495f      	ldr	r1, [pc, #380]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
 8001610:	e018      	b.n	8001644 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b5d      	ldr	r3, [pc, #372]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a5c      	ldr	r2, [pc, #368]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800161c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff f95b 	bl	80008d8 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff f957 	bl	80008d8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e231      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001638:	4b53      	ldr	r3, [pc, #332]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d03c      	beq.n	80016ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01c      	beq.n	8001692 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001658:	4b4b      	ldr	r3, [pc, #300]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165e:	4a4a      	ldr	r2, [pc, #296]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff f936 	bl	80008d8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff f932 	bl	80008d8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e20c      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001682:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0ef      	beq.n	8001670 <HAL_RCC_OscConfig+0x3ec>
 8001690:	e01b      	b.n	80016ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001692:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001698:	4a3b      	ldr	r2, [pc, #236]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7ff f919 	bl	80008d8 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016aa:	f7ff f915 	bl	80008d8 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1ef      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ef      	bne.n	80016aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80a6 	beq.w	8001824 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10d      	bne.n	8001704 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	4a26      	ldr	r2, [pc, #152]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80016ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f4:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001700:	2301      	movs	r3, #1
 8001702:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001704:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_RCC_OscConfig+0x508>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d118      	bne.n	8001742 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HAL_RCC_OscConfig+0x508>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_RCC_OscConfig+0x508>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171c:	f7ff f8dc 	bl	80008d8 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001724:	f7ff f8d8 	bl	80008d8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1b2      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_RCC_OscConfig+0x508>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_RCC_OscConfig+0x4d8>
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001750:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800175a:	e029      	b.n	80017b0 <HAL_RCC_OscConfig+0x52c>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d115      	bne.n	8001790 <HAL_RCC_OscConfig+0x50c>
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	4a03      	ldr	r2, [pc, #12]	@ (8001788 <HAL_RCC_OscConfig+0x504>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x52c>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	40007000 	.word	0x40007000
 8001790:	4b9a      	ldr	r3, [pc, #616]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001796:	4a99      	ldr	r2, [pc, #612]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a0:	4b96      	ldr	r3, [pc, #600]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a6:	4a95      	ldr	r2, [pc, #596]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d016      	beq.n	80017e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff f88e 	bl	80008d8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff f88a 	bl	80008d8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e162      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d6:	4b89      	ldr	r3, [pc, #548]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ed      	beq.n	80017c0 <HAL_RCC_OscConfig+0x53c>
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff f877 	bl	80008d8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff f873 	bl	80008d8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e14b      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001804:	4b7d      	ldr	r3, [pc, #500]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ed      	bne.n	80017ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001818:	4b78      	ldr	r3, [pc, #480]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	4a77      	ldr	r2, [pc, #476]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 800181e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001822:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d03c      	beq.n	80018aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01c      	beq.n	8001872 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001838:	4b70      	ldr	r3, [pc, #448]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 800183a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800183e:	4a6f      	ldr	r2, [pc, #444]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff f846 	bl	80008d8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001850:	f7ff f842 	bl	80008d8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e11c      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001862:	4b66      	ldr	r3, [pc, #408]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ef      	beq.n	8001850 <HAL_RCC_OscConfig+0x5cc>
 8001870:	e01b      	b.n	80018aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001872:	4b62      	ldr	r3, [pc, #392]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001874:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001878:	4a60      	ldr	r2, [pc, #384]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001882:	f7ff f829 	bl	80008d8 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188a:	f7ff f825 	bl	80008d8 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0ff      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800189c:	4b57      	ldr	r3, [pc, #348]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 800189e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ef      	bne.n	800188a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80f3 	beq.w	8001a9a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 80c9 	bne.w	8001a50 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018be:	4b4f      	ldr	r3, [pc, #316]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0203 	and.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d12c      	bne.n	800192c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018dc:	3b01      	subs	r3, #1
 80018de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d123      	bne.n	800192c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d11b      	bne.n	800192c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d113      	bne.n	800192c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800190e:	085b      	lsrs	r3, r3, #1
 8001910:	3b01      	subs	r3, #1
 8001912:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d109      	bne.n	800192c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	3b01      	subs	r3, #1
 8001926:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d06b      	beq.n	8001a04 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d062      	beq.n	80019f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001932:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0ac      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001942:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800194c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800194e:	f7fe ffc3 	bl	80008d8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7fe ffbf 	bl	80008d8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e099      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <HAL_RCC_OscConfig+0x77c>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001984:	3a01      	subs	r2, #1
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800198e:	0212      	lsls	r2, r2, #8
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001996:	0852      	lsrs	r2, r2, #1
 8001998:	3a01      	subs	r2, #1
 800199a:	0552      	lsls	r2, r2, #21
 800199c:	4311      	orrs	r1, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019a2:	0852      	lsrs	r2, r2, #1
 80019a4:	3a01      	subs	r2, #1
 80019a6:	0652      	lsls	r2, r2, #25
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019ae:	06d2      	lsls	r2, r2, #27
 80019b0:	430a      	orrs	r2, r1
 80019b2:	4912      	ldr	r1, [pc, #72]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b8:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c4:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d0:	f7fe ff82 	bl	80008d8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7fe ff7e 	bl	80008d8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e058      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <HAL_RCC_OscConfig+0x778>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f6:	e050      	b.n	8001a9a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e04f      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
 80019fc:	40021000 	.word	0x40021000
 8001a00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d144      	bne.n	8001a9a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a23      	ldr	r2, [pc, #140]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a1c:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a20      	ldr	r2, [pc, #128]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a28:	f7fe ff56 	bl	80008d8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7fe ff52 	bl	80008d8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e02c      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x7ac>
 8001a4e:	e024      	b.n	8001a9a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d01f      	beq.n	8001a96 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7fe ff39 	bl	80008d8 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7fe ff35 	bl	80008d8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e00f      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	4905      	ldr	r1, [pc, #20]	@ (8001aa4 <HAL_RCC_OscConfig+0x820>)
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_RCC_OscConfig+0x824>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
 8001a94:	e001      	b.n	8001a9a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	feeefffc 	.word	0xfeeefffc

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0e7      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b75      	ldr	r3, [pc, #468]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4970      	ldr	r1, [pc, #448]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b6e      	ldr	r3, [pc, #440]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0cf      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4b66      	ldr	r3, [pc, #408]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d908      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b63      	ldr	r3, [pc, #396]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4960      	ldr	r1, [pc, #384]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d04c      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d121      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0a6      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4a:	4b54      	ldr	r3, [pc, #336]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d115      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e09a      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b62:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e08e      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b72:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e086      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b46      	ldr	r3, [pc, #280]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4943      	ldr	r1, [pc, #268]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b94:	f7fe fea0 	bl	80008d8 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe fe9c 	bl	80008d8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e06e      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d208      	bcs.n	8001bf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	492b      	ldr	r1, [pc, #172]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d210      	bcs.n	8001c22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 0207 	bic.w	r2, r3, #7
 8001c08:	4923      	ldr	r1, [pc, #140]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <HAL_RCC_ClockConfig+0x1ec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e036      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4918      	ldr	r1, [pc, #96]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4910      	ldr	r1, [pc, #64]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c60:	f000 f824 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	490b      	ldr	r1, [pc, #44]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1fc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fdd7 	bl	8000838 <HAL_InitTick>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08002e04 	.word	0x08002e04
 8001ca4:	20000060 	.word	0x20000060
 8001ca8:	20000064 	.word	0x20000064

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cba:	4b3e      	ldr	r3, [pc, #248]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d121      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d11e      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ce0:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cec:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e005      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d08:	4a2b      	ldr	r2, [pc, #172]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d24:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	e004      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d30:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d134      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d003      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0xac>
 8001d50:	e005      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d54:	617b      	str	r3, [r7, #20]
      break;
 8001d56:	e005      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d5a:	617b      	str	r3, [r7, #20]
      break;
 8001d5c:	e002      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	617b      	str	r3, [r7, #20]
      break;
 8001d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	0e5b      	lsrs	r3, r3, #25
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	3301      	adds	r3, #1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001da4:	69bb      	ldr	r3, [r7, #24]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	@ 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08002e14 	.word	0x08002e14
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	007a1200 	.word	0x007a1200

08001dc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ddc:	f7ff f9ee 	bl	80011bc <HAL_PWREx_GetVoltageRange>
 8001de0:	6178      	str	r0, [r7, #20]
 8001de2:	e014      	b.n	8001e0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	4a24      	ldr	r2, [pc, #144]	@ (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df0:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dfc:	f7ff f9de 	bl	80011bc <HAL_PWREx_GetVoltageRange>
 8001e00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b1e      	ldr	r3, [pc, #120]	@ (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	4a1d      	ldr	r2, [pc, #116]	@ (8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e14:	d10b      	bne.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b80      	cmp	r3, #128	@ 0x80
 8001e1a:	d919      	bls.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e20:	d902      	bls.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e22:	2302      	movs	r3, #2
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e013      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e28:	2301      	movs	r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e010      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d902      	bls.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e34:	2303      	movs	r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e00a      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	@ 0x80
 8001e3e:	d102      	bne.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e40:	2302      	movs	r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e004      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b70      	cmp	r3, #112	@ 0x70
 8001e4a:	d101      	bne.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 0207 	bic.w	r2, r3, #7
 8001e58:	4909      	ldr	r1, [pc, #36]	@ (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e60:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40022000 	.word	0x40022000

08001e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e049      	b.n	8001f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fc04 	bl	80006b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 fb52 	bl	800256c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e049      	b.n	8001fd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f841 	bl	8001fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f000 fafb 	bl	800256c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_TIM_PWM_Start+0x24>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e03c      	b.n	8002092 <HAL_TIM_PWM_Start+0x9e>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b04      	cmp	r3, #4
 800201c:	d109      	bne.n	8002032 <HAL_TIM_PWM_Start+0x3e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	bf14      	ite	ne
 800202a:	2301      	movne	r3, #1
 800202c:	2300      	moveq	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e02f      	b.n	8002092 <HAL_TIM_PWM_Start+0x9e>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d109      	bne.n	800204c <HAL_TIM_PWM_Start+0x58>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e022      	b.n	8002092 <HAL_TIM_PWM_Start+0x9e>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d109      	bne.n	8002066 <HAL_TIM_PWM_Start+0x72>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	e015      	b.n	8002092 <HAL_TIM_PWM_Start+0x9e>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b10      	cmp	r3, #16
 800206a:	d109      	bne.n	8002080 <HAL_TIM_PWM_Start+0x8c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e008      	b.n	8002092 <HAL_TIM_PWM_Start+0x9e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07e      	b.n	8002198 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d104      	bne.n	80020aa <HAL_TIM_PWM_Start+0xb6>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020a8:	e023      	b.n	80020f2 <HAL_TIM_PWM_Start+0xfe>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d104      	bne.n	80020ba <HAL_TIM_PWM_Start+0xc6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020b8:	e01b      	b.n	80020f2 <HAL_TIM_PWM_Start+0xfe>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d104      	bne.n	80020ca <HAL_TIM_PWM_Start+0xd6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c8:	e013      	b.n	80020f2 <HAL_TIM_PWM_Start+0xfe>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d104      	bne.n	80020da <HAL_TIM_PWM_Start+0xe6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020d8:	e00b      	b.n	80020f2 <HAL_TIM_PWM_Start+0xfe>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d104      	bne.n	80020ea <HAL_TIM_PWM_Start+0xf6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e8:	e003      	b.n	80020f2 <HAL_TIM_PWM_Start+0xfe>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fdbe 	bl	8002c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a26      	ldr	r2, [pc, #152]	@ (80021a0 <HAL_TIM_PWM_Start+0x1ac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_TIM_PWM_Start+0x12a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a25      	ldr	r2, [pc, #148]	@ (80021a4 <HAL_TIM_PWM_Start+0x1b0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_TIM_PWM_Start+0x12a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a23      	ldr	r2, [pc, #140]	@ (80021a8 <HAL_TIM_PWM_Start+0x1b4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_TIM_PWM_Start+0x12e>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_TIM_PWM_Start+0x130>
 8002122:	2300      	movs	r3, #0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a18      	ldr	r2, [pc, #96]	@ (80021a0 <HAL_TIM_PWM_Start+0x1ac>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d009      	beq.n	8002156 <HAL_TIM_PWM_Start+0x162>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214a:	d004      	beq.n	8002156 <HAL_TIM_PWM_Start+0x162>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <HAL_TIM_PWM_Start+0x1b0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d115      	bne.n	8002182 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <HAL_TIM_PWM_Start+0x1b8>)
 800215e:	4013      	ands	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b06      	cmp	r3, #6
 8002166:	d015      	beq.n	8002194 <HAL_TIM_PWM_Start+0x1a0>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800216e:	d011      	beq.n	8002194 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002180:	e008      	b.n	8002194 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e000      	b.n	8002196 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40014000 	.word	0x40014000
 80021a8:	40014400 	.word	0x40014400
 80021ac:	00010007 	.word	0x00010007

080021b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0ff      	b.n	80023ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b14      	cmp	r3, #20
 80021da:	f200 80f0 	bhi.w	80023be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80021de:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	08002239 	.word	0x08002239
 80021e8:	080023bf 	.word	0x080023bf
 80021ec:	080023bf 	.word	0x080023bf
 80021f0:	080023bf 	.word	0x080023bf
 80021f4:	08002279 	.word	0x08002279
 80021f8:	080023bf 	.word	0x080023bf
 80021fc:	080023bf 	.word	0x080023bf
 8002200:	080023bf 	.word	0x080023bf
 8002204:	080022bb 	.word	0x080022bb
 8002208:	080023bf 	.word	0x080023bf
 800220c:	080023bf 	.word	0x080023bf
 8002210:	080023bf 	.word	0x080023bf
 8002214:	080022fb 	.word	0x080022fb
 8002218:	080023bf 	.word	0x080023bf
 800221c:	080023bf 	.word	0x080023bf
 8002220:	080023bf 	.word	0x080023bf
 8002224:	0800233d 	.word	0x0800233d
 8002228:	080023bf 	.word	0x080023bf
 800222c:	080023bf 	.word	0x080023bf
 8002230:	080023bf 	.word	0x080023bf
 8002234:	0800237d 	.word	0x0800237d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fa04 	bl	800264c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0204 	bic.w	r2, r2, #4
 8002262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6999      	ldr	r1, [r3, #24]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	619a      	str	r2, [r3, #24]
      break;
 8002276:	e0a5      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fa60 	bl	8002744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6999      	ldr	r1, [r3, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	619a      	str	r2, [r3, #24]
      break;
 80022b8:	e084      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fab9 	bl	8002838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0208 	orr.w	r2, r2, #8
 80022d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0204 	bic.w	r2, r2, #4
 80022e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69d9      	ldr	r1, [r3, #28]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
      break;
 80022f8:	e064      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fb11 	bl	8002928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69d9      	ldr	r1, [r3, #28]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	61da      	str	r2, [r3, #28]
      break;
 800233a:	e043      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fb4e 	bl	80029e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0208 	orr.w	r2, r2, #8
 8002356:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0204 	bic.w	r2, r2, #4
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800237a:	e023      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fb86 	bl	8002a94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002396:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	021a      	lsls	r2, r3, #8
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80023bc:	e002      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
      break;
 80023c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop

080023d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_TIM_ConfigClockSource+0x1c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0b6      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x18a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800241e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002430:	d03e      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0xd8>
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002436:	f200 8087 	bhi.w	8002548 <HAL_TIM_ConfigClockSource+0x170>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243e:	f000 8086 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x176>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002446:	d87f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
 8002448:	2b70      	cmp	r3, #112	@ 0x70
 800244a:	d01a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0xaa>
 800244c:	2b70      	cmp	r3, #112	@ 0x70
 800244e:	d87b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
 8002450:	2b60      	cmp	r3, #96	@ 0x60
 8002452:	d050      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x11e>
 8002454:	2b60      	cmp	r3, #96	@ 0x60
 8002456:	d877      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
 8002458:	2b50      	cmp	r3, #80	@ 0x50
 800245a:	d03c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xfe>
 800245c:	2b50      	cmp	r3, #80	@ 0x50
 800245e:	d873      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d058      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x13e>
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d86f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
 8002468:	2b30      	cmp	r3, #48	@ 0x30
 800246a:	d064      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15e>
 800246c:	2b30      	cmp	r3, #48	@ 0x30
 800246e:	d86b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d060      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15e>
 8002474:	2b20      	cmp	r3, #32
 8002476:	d867      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05c      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15e>
 800247c:	2b10      	cmp	r3, #16
 800247e:	d05a      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15e>
 8002480:	e062      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	f000 fbd3 	bl	8002c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	609a      	str	r2, [r3, #8]
      break;
 80024ae:	e04f      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	f000 fbbc 	bl	8002c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024d2:	609a      	str	r2, [r3, #8]
      break;
 80024d4:	e03c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 fb30 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2150      	movs	r1, #80	@ 0x50
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fb89 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 80024f4:	e02c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	461a      	mov	r2, r3
 8002504:	f000 fb4f 	bl	8002ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2160      	movs	r1, #96	@ 0x60
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fb79 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002514:	e01c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	461a      	mov	r2, r3
 8002524:	f000 fb10 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2140      	movs	r1, #64	@ 0x40
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fb69 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002534:	e00c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f000 fb60 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002546:	e003      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e000      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800254e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a30      	ldr	r2, [pc, #192]	@ (8002640 <TIM_Base_SetConfig+0xd4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_Base_SetConfig+0x20>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800258a:	d108      	bne.n	800259e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a27      	ldr	r2, [pc, #156]	@ (8002640 <TIM_Base_SetConfig+0xd4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00b      	beq.n	80025be <TIM_Base_SetConfig+0x52>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ac:	d007      	beq.n	80025be <TIM_Base_SetConfig+0x52>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <TIM_Base_SetConfig+0xd8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d003      	beq.n	80025be <TIM_Base_SetConfig+0x52>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <TIM_Base_SetConfig+0xdc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d108      	bne.n	80025d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <TIM_Base_SetConfig+0xd4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <TIM_Base_SetConfig+0xa0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <TIM_Base_SetConfig+0xd8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_Base_SetConfig+0xa0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a10      	ldr	r2, [pc, #64]	@ (8002648 <TIM_Base_SetConfig+0xdc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d103      	bne.n	8002614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f023 0201 	bic.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]
  }
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40014000 	.word	0x40014000
 8002648:	40014400 	.word	0x40014400

0800264c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f023 0201 	bic.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800267e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f023 0302 	bic.w	r3, r3, #2
 8002698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a24      	ldr	r2, [pc, #144]	@ (8002738 <TIM_OC1_SetConfig+0xec>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <TIM_OC1_SetConfig+0x70>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a23      	ldr	r2, [pc, #140]	@ (800273c <TIM_OC1_SetConfig+0xf0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d003      	beq.n	80026bc <TIM_OC1_SetConfig+0x70>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a22      	ldr	r2, [pc, #136]	@ (8002740 <TIM_OC1_SetConfig+0xf4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10c      	bne.n	80026d6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0308 	bic.w	r3, r3, #8
 80026c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <TIM_OC1_SetConfig+0xec>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_OC1_SetConfig+0xa2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a16      	ldr	r2, [pc, #88]	@ (800273c <TIM_OC1_SetConfig+0xf0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_OC1_SetConfig+0xa2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a15      	ldr	r2, [pc, #84]	@ (8002740 <TIM_OC1_SetConfig+0xf4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d111      	bne.n	8002712 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	621a      	str	r2, [r3, #32]
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40014000 	.word	0x40014000
 8002740:	40014400 	.word	0x40014400

08002744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f023 0210 	bic.w	r2, r3, #16
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800277e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0320 	bic.w	r3, r3, #32
 8002792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a22      	ldr	r2, [pc, #136]	@ (800282c <TIM_OC2_SetConfig+0xe8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d10d      	bne.n	80027c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a19      	ldr	r2, [pc, #100]	@ (800282c <TIM_OC2_SetConfig+0xe8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_OC2_SetConfig+0x98>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <TIM_OC2_SetConfig+0xec>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_OC2_SetConfig+0x98>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a17      	ldr	r2, [pc, #92]	@ (8002834 <TIM_OC2_SetConfig+0xf0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d113      	bne.n	8002804 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	621a      	str	r2, [r3, #32]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40014000 	.word	0x40014000
 8002834:	40014400 	.word	0x40014400

08002838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a21      	ldr	r2, [pc, #132]	@ (800291c <TIM_OC3_SetConfig+0xe4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10d      	bne.n	80028b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a18      	ldr	r2, [pc, #96]	@ (800291c <TIM_OC3_SetConfig+0xe4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_OC3_SetConfig+0x96>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <TIM_OC3_SetConfig+0xe8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <TIM_OC3_SetConfig+0x96>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a16      	ldr	r2, [pc, #88]	@ (8002924 <TIM_OC3_SetConfig+0xec>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d113      	bne.n	80028f6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	621a      	str	r2, [r3, #32]
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40014000 	.word	0x40014000
 8002924:	40014400 	.word	0x40014400

08002928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800295a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	031b      	lsls	r3, r3, #12
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a14      	ldr	r2, [pc, #80]	@ (80029d8 <TIM_OC4_SetConfig+0xb0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_OC4_SetConfig+0x74>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <TIM_OC4_SetConfig+0xb4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_OC4_SetConfig+0x74>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <TIM_OC4_SetConfig+0xb8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d109      	bne.n	80029b0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400

080029e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002a28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a13      	ldr	r2, [pc, #76]	@ (8002a88 <TIM_OC5_SetConfig+0xa4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <TIM_OC5_SetConfig+0x6a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a12      	ldr	r2, [pc, #72]	@ (8002a8c <TIM_OC5_SetConfig+0xa8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_OC5_SetConfig+0x6a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <TIM_OC5_SetConfig+0xac>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d109      	bne.n	8002a62 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40014400 	.word	0x40014400

08002a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	051b      	lsls	r3, r3, #20
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <TIM_OC6_SetConfig+0xa8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <TIM_OC6_SetConfig+0x6c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a13      	ldr	r2, [pc, #76]	@ (8002b40 <TIM_OC6_SetConfig+0xac>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d003      	beq.n	8002b00 <TIM_OC6_SetConfig+0x6c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <TIM_OC6_SetConfig+0xb0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d109      	bne.n	8002b14 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	029b      	lsls	r3, r3, #10
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	621a      	str	r2, [r3, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40014000 	.word	0x40014000
 8002b44:	40014400 	.word	0x40014400

08002b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0201 	bic.w	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f023 030a 	bic.w	r3, r3, #10
 8002b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b087      	sub	sp, #28
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f023 0210 	bic.w	r2, r3, #16
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002be2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	621a      	str	r2, [r3, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f043 0307 	orr.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	021a      	lsls	r2, r3, #8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2201      	movs	r2, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e04f      	b.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a21      	ldr	r2, [pc, #132]	@ (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	@ (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d004      	beq.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a10      	ldr	r2, [pc, #64]	@ (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d10c      	bne.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40014000 	.word	0x40014000

08002d94 <memset>:
 8002d94:	4402      	add	r2, r0
 8002d96:	4603      	mov	r3, r0
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d100      	bne.n	8002d9e <memset+0xa>
 8002d9c:	4770      	bx	lr
 8002d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002da2:	e7f9      	b.n	8002d98 <memset+0x4>

08002da4 <__libc_init_array>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4d0d      	ldr	r5, [pc, #52]	@ (8002ddc <__libc_init_array+0x38>)
 8002da8:	4c0d      	ldr	r4, [pc, #52]	@ (8002de0 <__libc_init_array+0x3c>)
 8002daa:	1b64      	subs	r4, r4, r5
 8002dac:	10a4      	asrs	r4, r4, #2
 8002dae:	2600      	movs	r6, #0
 8002db0:	42a6      	cmp	r6, r4
 8002db2:	d109      	bne.n	8002dc8 <__libc_init_array+0x24>
 8002db4:	4d0b      	ldr	r5, [pc, #44]	@ (8002de4 <__libc_init_array+0x40>)
 8002db6:	4c0c      	ldr	r4, [pc, #48]	@ (8002de8 <__libc_init_array+0x44>)
 8002db8:	f000 f818 	bl	8002dec <_init>
 8002dbc:	1b64      	subs	r4, r4, r5
 8002dbe:	10a4      	asrs	r4, r4, #2
 8002dc0:	2600      	movs	r6, #0
 8002dc2:	42a6      	cmp	r6, r4
 8002dc4:	d105      	bne.n	8002dd2 <__libc_init_array+0x2e>
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
 8002dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dcc:	4798      	blx	r3
 8002dce:	3601      	adds	r6, #1
 8002dd0:	e7ee      	b.n	8002db0 <__libc_init_array+0xc>
 8002dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd6:	4798      	blx	r3
 8002dd8:	3601      	adds	r6, #1
 8002dda:	e7f2      	b.n	8002dc2 <__libc_init_array+0x1e>
 8002ddc:	08002e44 	.word	0x08002e44
 8002de0:	08002e44 	.word	0x08002e44
 8002de4:	08002e44 	.word	0x08002e44
 8002de8:	08002e48 	.word	0x08002e48

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
