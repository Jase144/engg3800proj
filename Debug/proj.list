
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c20  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002dac  08002dac  00003dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dec  08002dec  0000406c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002dec  08002dec  0000406c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002dec  08002dec  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002df0  08002df0  00003df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002df4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018f0  2000006c  08002e60  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000195c  08002e60  0000495c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a996  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d39  00000000  00000000  0000ea32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00010770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000924  00000000  00000000  00011358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a0a  00000000  00000000  00011c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca21  00000000  00000000  00013686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8a3  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec94a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a4  00000000  00000000  000ec990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000efa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000006c 	.word	0x2000006c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002d94 	.word	0x08002d94

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000070 	.word	0x20000070
 80001c8:	08002d94 	.word	0x08002d94

080001cc <opSystemClock_Config>:
#include "intern_sysclock.h"
#include "stm32l4xx_hal_rcc.h"
void sysclock_lib_error_handler(void);
// c source file for the source clock
void opSystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b096      	sub	sp, #88	@ 0x58
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	2244      	movs	r2, #68	@ 0x44
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fdae 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	463b      	mov	r3, r7
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80001ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80001f2:	f000 ffc5 	bl	8001180 <HAL_PWREx_ControlVoltageScaling>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <opSystemClock_Config+0x34>
  {
    sysclock_lib_error_handler();
 80001fc:	f000 f82c 	bl	8000258 <sysclock_lib_error_handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000200:	2310      	movs	r3, #16
 8000202:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800020c:	2390      	movs	r3, #144	@ 0x90
 800020e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000210:	2300      	movs	r3, #0
 8000212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	4618      	mov	r0, r3
 800021a:	f001 f807 	bl	800122c <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <opSystemClock_Config+0x5c>
  {
    sysclock_lib_error_handler();
 8000224:	f000 f818 	bl	8000258 <sysclock_lib_error_handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023c:	463b      	mov	r3, r7
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fc07 	bl	8001a54 <HAL_RCC_ClockConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <opSystemClock_Config+0x84>
  {
    sysclock_lib_error_handler();
 800024c:	f000 f804 	bl	8000258 <sysclock_lib_error_handler>
  }
}
 8000250:	bf00      	nop
 8000252:	3758      	adds	r7, #88	@ 0x58
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <sysclock_lib_error_handler>:
void sysclock_lib_error_handler(void) {
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800025c:	b672      	cpsid	i
}
 800025e:	bf00      	nop
  /* USER CODE BEGIN sysclock_lib_error_handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <sysclock_lib_error_handler+0x8>

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 faa1 	bl	80007ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  opSystemClock_Config();
 800026c:	f7ff ffae 	bl	80001cc <opSystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_DMA_Init();
 8000270:	f000 f80c 	bl	800028c <MX_DMA_Init>
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  reg_64ledmatrix_init_external();
 8000274:	f000 f82e 	bl	80002d4 <reg_64ledmatrix_init_external>

  reg_64ledmatrix_senddata(0);
 8000278:	2000      	movs	r0, #0
 800027a:	f000 f94f 	bl	800051c <reg_64ledmatrix_senddata>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    transferComplete = 1;
 800027e:	4b02      	ldr	r3, [pc, #8]	@ (8000288 <main+0x24>)
 8000280:	2201      	movs	r2, #1
 8000282:	701a      	strb	r2, [r3, #0]
 8000284:	e7fb      	b.n	800027e <main+0x1a>
 8000286:	bf00      	nop
 8000288:	20000088 	.word	0x20000088

0800028c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000292:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <MX_DMA_Init+0x38>)
 8000294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000296:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <MX_DMA_Init+0x38>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6493      	str	r3, [r2, #72]	@ 0x48
 800029e:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <MX_DMA_Init+0x38>)
 80002a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2100      	movs	r1, #0
 80002ae:	200c      	movs	r0, #12
 80002b0:	f000 fbcd 	bl	8000a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002b4:	200c      	movs	r0, #12
 80002b6:	f000 fbe6 	bl	8000a86 <HAL_NVIC_EnableIRQ>

}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000

080002c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80002cc:	b672      	cpsid	i
}
 80002ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <Error_Handler+0x8>

080002d4 <reg_64ledmatrix_init_external>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void ledmatrix64_lib_error_handler(void);
uint8_t transferComplete = 0;

void reg_64ledmatrix_init_external(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0


    // GPIO config - each instruction does both clear and set the pins
    reg_64ledmatrix_initgpio_internal();
 80002d8:	f000 f804 	bl	80002e4 <reg_64ledmatrix_initgpio_internal>



    reg_64ledmatrix_inittim2_internal();
 80002dc:	f000 f846 	bl	800036c <reg_64ledmatrix_inittim2_internal>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <reg_64ledmatrix_initgpio_internal>:


void reg_64ledmatrix_initgpio_internal(void) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000368 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000368 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000368 <reg_64ledmatrix_initgpio_internal+0x84>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
    GPIOA->MODER = ((GPIOA->MODER & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000302:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 0303 	bic.w	r3, r3, #3
 800030c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_MODER)) |
 8000310:	f043 0302 	orr.w	r3, r3, #2
    GPIOA->MODER = ((GPIOA->MODER & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000314:	6013      	str	r3, [r2, #0]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_MODER_DIN));

    GPIOA->OSPEEDR = ((GPIOA->OSPEEDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000316:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f023 0303 	bic.w	r3, r3, #3
 8000320:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_OSPEEDR)) |
 8000324:	f043 0302 	orr.w	r3, r3, #2
    GPIOA->OSPEEDR = ((GPIOA->OSPEEDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000328:	6093      	str	r3, [r2, #8]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_OSPEEDR_DIN));

    GPIOA->PUPDR = ((GPIOA->PUPDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 800032a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_PUPDR)) |
 8000334:	f023 0303 	bic.w	r3, r3, #3
    GPIOA->PUPDR = ((GPIOA->PUPDR & ~PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK,
 8000338:	60d3      	str	r3, [r2, #12]
                    PORTSET_GPIO_DIN(TWO_BIT_PIN_MASK, PINSET_GPIO_PUPDR_DIN));

    GPIOA->OTYPER = ((GPIOA->OTYPER & ~PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK,
 800033a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
                                                     PINHIGH_GPIO_OTYPER)) |
 8000344:	f023 0301 	bic.w	r3, r3, #1
    GPIOA->OTYPER = ((GPIOA->OTYPER & ~PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK,
 8000348:	6053      	str	r3, [r2, #4]
                    PORTSET_GPIO_DIN(ONE_BIT_PIN_MASK, PINSET_GPIO_OTYPER_DIN));

    GPIOA -> AFR[0] |= (1 << 0*4);
 800034a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6213      	str	r3, [r2, #32]

}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <reg_64ledmatrix_inittim2_internal>:
TIM_ClockConfigTypeDef sClockSourceConfig = {0};
TIM_MasterConfigTypeDef sMasterConfig = {0};
TIM_OC_InitTypeDef sConfigOC = {0};
static uint32_t pink_values[24] = {7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 14, 7, 7, 14, 14};
static uint32_t ccr1_values[1536] = {0};
void reg_64ledmatrix_inittim2_internal(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0

    __HAL_RCC_DMA1_CLK_ENABLE();
 8000372:	4b5e      	ldr	r3, [pc, #376]	@ (80004ec <reg_64ledmatrix_inittim2_internal+0x180>)
 8000374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000376:	4a5d      	ldr	r2, [pc, #372]	@ (80004ec <reg_64ledmatrix_inittim2_internal+0x180>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6493      	str	r3, [r2, #72]	@ 0x48
 800037e:	4b5b      	ldr	r3, [pc, #364]	@ (80004ec <reg_64ledmatrix_inittim2_internal+0x180>)
 8000380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800038a:	4b58      	ldr	r3, [pc, #352]	@ (80004ec <reg_64ledmatrix_inittim2_internal+0x180>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800038e:	4a57      	ldr	r2, [pc, #348]	@ (80004ec <reg_64ledmatrix_inittim2_internal+0x180>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6593      	str	r3, [r2, #88]	@ 0x58
 8000396:	4b55      	ldr	r3, [pc, #340]	@ (80004ec <reg_64ledmatrix_inittim2_internal+0x180>)
 8000398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

    tim2Struct.Instance = TIM2;
 80003a2:	4b53      	ldr	r3, [pc, #332]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a8:	601a      	str	r2, [r3, #0]
    tim2Struct.Init.Prescaler = 0;
 80003aa:	4b51      	ldr	r3, [pc, #324]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
    tim2Struct.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b4f      	ldr	r3, [pc, #316]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
    tim2Struct.Init.Period = 21;
 80003b6:	4b4e      	ldr	r3, [pc, #312]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003b8:	2215      	movs	r2, #21
 80003ba:	60da      	str	r2, [r3, #12]
    tim2Struct.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b4c      	ldr	r3, [pc, #304]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
    tim2Struct.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b4b      	ldr	r3, [pc, #300]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]

    HAL_TIM_Base_Init(&tim2Struct);
 80003c8:	4849      	ldr	r0, [pc, #292]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003ca:	f001 fd2f 	bl	8001e2c <HAL_TIM_Base_Init>



    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ce:	4b49      	ldr	r3, [pc, #292]	@ (80004f4 <reg_64ledmatrix_inittim2_internal+0x188>)
 80003d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003d4:	601a      	str	r2, [r3, #0]
    HAL_TIM_ConfigClockSource(&tim2Struct, &sClockSourceConfig);
 80003d6:	4947      	ldr	r1, [pc, #284]	@ (80004f4 <reg_64ledmatrix_inittim2_internal+0x188>)
 80003d8:	4845      	ldr	r0, [pc, #276]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003da:	f001 ffd1 	bl	8002380 <HAL_TIM_ConfigClockSource>

    HAL_TIM_PWM_Init(&tim2Struct);
 80003de:	4844      	ldr	r0, [pc, #272]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80003e0:	f001 fd7b 	bl	8001eda <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e4:	4b44      	ldr	r3, [pc, #272]	@ (80004f8 <reg_64ledmatrix_inittim2_internal+0x18c>)
 80003e6:	2260      	movs	r2, #96	@ 0x60
 80003e8:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 80003ea:	4b43      	ldr	r3, [pc, #268]	@ (80004f8 <reg_64ledmatrix_inittim2_internal+0x18c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f0:	4b41      	ldr	r3, [pc, #260]	@ (80004f8 <reg_64ledmatrix_inittim2_internal+0x18c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f6:	4b40      	ldr	r3, [pc, #256]	@ (80004f8 <reg_64ledmatrix_inittim2_internal+0x18c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_ConfigChannel(&tim2Struct, &sConfigOC, TIM_CHANNEL_1);
 80003fc:	2200      	movs	r2, #0
 80003fe:	493e      	ldr	r1, [pc, #248]	@ (80004f8 <reg_64ledmatrix_inittim2_internal+0x18c>)
 8000400:	483b      	ldr	r0, [pc, #236]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 8000402:	f001 fea9 	bl	8002158 <HAL_TIM_PWM_ConfigChannel>


    HAL_TIM_MspPostInit(&tim2Struct);
 8000406:	483a      	ldr	r0, [pc, #232]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 8000408:	f000 f928 	bl	800065c <HAL_TIM_MspPostInit>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	4b3b      	ldr	r3, [pc, #236]	@ (80004fc <reg_64ledmatrix_inittim2_internal+0x190>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000412:	4b3a      	ldr	r3, [pc, #232]	@ (80004fc <reg_64ledmatrix_inittim2_internal+0x190>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
    HAL_TIMEx_MasterConfigSynchronization(&tim2Struct, &sMasterConfig);
 8000418:	4938      	ldr	r1, [pc, #224]	@ (80004fc <reg_64ledmatrix_inittim2_internal+0x190>)
 800041a:	4835      	ldr	r0, [pc, #212]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 800041c:	f002 fc28 	bl	8002c70 <HAL_TIMEx_MasterConfigSynchronization>

// DMA config
__HAL_LINKDMA(&tim2Struct, hdma[TIM_DMA_ID_UPDATE], hdma_tim2_up);
 8000420:	4b33      	ldr	r3, [pc, #204]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 8000422:	4a37      	ldr	r2, [pc, #220]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 8000424:	621a      	str	r2, [r3, #32]
 8000426:	4b36      	ldr	r3, [pc, #216]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 8000428:	4a31      	ldr	r2, [pc, #196]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 800042a:	629a      	str	r2, [r3, #40]	@ 0x28
hdma_tim2_up.Instance = DMA1_Channel2;
 800042c:	4b34      	ldr	r3, [pc, #208]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 800042e:	4a35      	ldr	r2, [pc, #212]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 8000430:	601a      	str	r2, [r3, #0]

hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000432:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 8000434:	2210      	movs	r2, #16
 8000436:	609a      	str	r2, [r3, #8]
hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000438:	4b31      	ldr	r3, [pc, #196]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800043e:	4b30      	ldr	r3, [pc, #192]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	611a      	str	r2, [r3, #16]
hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000444:	4b2e      	ldr	r3, [pc, #184]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 8000446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800044a:	615a      	str	r2, [r3, #20]
hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800044c:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 800044e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000452:	619a      	str	r2, [r3, #24]
hdma_tim2_up.Init.Mode = DMA_NORMAL; // stop after last
 8000454:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 800045a:	4b29      	ldr	r3, [pc, #164]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
HAL_DMA_Init(&hdma_tim2_up);
 8000460:	4827      	ldr	r0, [pc, #156]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 8000462:	f000 fb2b 	bl	8000abc <HAL_DMA_Init>

DMA1_CSELR->CSELR = (DMA1_CSELR->CSELR & ~(0xF << (DMA_CSELR_C2S_Pos))) | (4 << DMA_CSELR_C2S_Pos);
 8000466:	4b28      	ldr	r3, [pc, #160]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800046e:	4a26      	ldr	r2, [pc, #152]	@ (8000508 <reg_64ledmatrix_inittim2_internal+0x19c>)
 8000470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000474:	6013      	str	r3, [r2, #0]
DMA1_Channel1->CMAR =(uint32_t)(ccr1_values);
DMA1_Channel1->CPAR =(uint32_t)&(TIM2->CCR1);
DMA1_Channel1->CNDTR = 4;
*/

HAL_TIM_PWM_Start(&tim2Struct, TIM_CHANNEL_1);
 8000476:	2100      	movs	r1, #0
 8000478:	481d      	ldr	r0, [pc, #116]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 800047a:	f001 fd8f 	bl	8001f9c <HAL_TIM_PWM_Start>


    for (uint16_t i = 0; i < 1536; i++) {
 800047e:	2300      	movs	r3, #0
 8000480:	81fb      	strh	r3, [r7, #14]
 8000482:	e015      	b.n	80004b0 <reg_64ledmatrix_inittim2_internal+0x144>
        ccr1_values[i] = pink_values[i%24];
 8000484:	89fa      	ldrh	r2, [r7, #14]
 8000486:	4b21      	ldr	r3, [pc, #132]	@ (800050c <reg_64ledmatrix_inittim2_internal+0x1a0>)
 8000488:	fba3 1302 	umull	r1, r3, r3, r2
 800048c:	0919      	lsrs	r1, r3, #4
 800048e:	460b      	mov	r3, r1
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	440b      	add	r3, r1
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	b29b      	uxth	r3, r3
 800049a:	4619      	mov	r1, r3
 800049c:	89fb      	ldrh	r3, [r7, #14]
 800049e:	4a1c      	ldr	r2, [pc, #112]	@ (8000510 <reg_64ledmatrix_inittim2_internal+0x1a4>)
 80004a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80004a4:	491b      	ldr	r1, [pc, #108]	@ (8000514 <reg_64ledmatrix_inittim2_internal+0x1a8>)
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = 0; i < 1536; i++) {
 80004aa:	89fb      	ldrh	r3, [r7, #14]
 80004ac:	3301      	adds	r3, #1
 80004ae:	81fb      	strh	r3, [r7, #14]
 80004b0:	89fb      	ldrh	r3, [r7, #14]
 80004b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80004b6:	d3e5      	bcc.n	8000484 <reg_64ledmatrix_inittim2_internal+0x118>
    }

HAL_DMA_Start(&hdma_tim2_up,
 80004b8:	4916      	ldr	r1, [pc, #88]	@ (8000514 <reg_64ledmatrix_inittim2_internal+0x1a8>)
 80004ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80004be:	4a16      	ldr	r2, [pc, #88]	@ (8000518 <reg_64ledmatrix_inittim2_internal+0x1ac>)
 80004c0:	480f      	ldr	r0, [pc, #60]	@ (8000500 <reg_64ledmatrix_inittim2_internal+0x194>)
 80004c2:	f000 fbb3 	bl	8000c2c <HAL_DMA_Start>
              (uint32_t)(ccr1_values),
              (uint32_t)&(TIM2->CCR1),
              1536);
DMA1_Channel2->CCR |= (DMA_CCR_TCIE_Msk);
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <reg_64ledmatrix_inittim2_internal+0x198>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	6013      	str	r3, [r2, #0]
__HAL_TIM_ENABLE_DMA(&tim2Struct, TIM_DMA_UPDATE);
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <reg_64ledmatrix_inittim2_internal+0x184>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004e0:	60da      	str	r2, [r3, #12]
//TIM2->DIER |= (1 << TIM_DIER_UDE_Pos);


}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	200000d4 	.word	0x200000d4
 80004f4:	20000120 	.word	0x20000120
 80004f8:	2000013c 	.word	0x2000013c
 80004fc:	20000130 	.word	0x20000130
 8000500:	2000008c 	.word	0x2000008c
 8000504:	4002001c 	.word	0x4002001c
 8000508:	400200a8 	.word	0x400200a8
 800050c:	aaaaaaab 	.word	0xaaaaaaab
 8000510:	20000000 	.word	0x20000000
 8000514:	20000158 	.word	0x20000158
 8000518:	40000034 	.word	0x40000034

0800051c <reg_64ledmatrix_senddata>:
    {
    }
    /* USER CODE END ledmatrix64_lib_error_handler_Debug */
}

void reg_64ledmatrix_senddata(uint8_t rgbMatrix) {
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
    // check if dma is ready for the mem arr to be modified, by checking if
    // transfer is complete and if the DMA is enabled
    if (transferComplete && (DMA1_Channel2->CCR & (DMA_CCR_EN_Msk))) {
 8000526:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <reg_64ledmatrix_senddata+0x5c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d01d      	beq.n	800056a <reg_64ledmatrix_senddata+0x4e>
 800052e:	4b13      	ldr	r3, [pc, #76]	@ (800057c <reg_64ledmatrix_senddata+0x60>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b00      	cmp	r3, #0
 8000538:	d017      	beq.n	800056a <reg_64ledmatrix_senddata+0x4e>
        transferComplete = 0;
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <reg_64ledmatrix_senddata+0x5c>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
        // turn off DMA transfers whilst changing mem arr
        DMA1_Channel2->CCR &= ~(DMA_CCR_EN_Msk);
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <reg_64ledmatrix_senddata+0x60>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <reg_64ledmatrix_senddata+0x60>)
 8000546:	f023 0301 	bic.w	r3, r3, #1
 800054a:	6013      	str	r3, [r2, #0]

        for (uint16_t i = 0; i < 1536; i++) {
 800054c:	2300      	movs	r3, #0
 800054e:	81fb      	strh	r3, [r7, #14]
 8000550:	e007      	b.n	8000562 <reg_64ledmatrix_senddata+0x46>
            ccr1_values[i] = 14;
 8000552:	89fb      	ldrh	r3, [r7, #14]
 8000554:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <reg_64ledmatrix_senddata+0x64>)
 8000556:	210e      	movs	r1, #14
 8000558:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint16_t i = 0; i < 1536; i++) {
 800055c:	89fb      	ldrh	r3, [r7, #14]
 800055e:	3301      	adds	r3, #1
 8000560:	81fb      	strh	r3, [r7, #14]
 8000562:	89fb      	ldrh	r3, [r7, #14]
 8000564:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000568:	d3f3      	bcc.n	8000552 <reg_64ledmatrix_senddata+0x36>
              (uint32_t)(ccr1_values),
              (uint32_t)&(TIM2->CCR1),
              1536);
    __HAL_TIM_ENABLE_DMA(&tim2Struct, TIM_DMA_UPDATE);
    */
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000088 	.word	0x20000088
 800057c:	4002001c 	.word	0x4002001c
 8000580:	20000158 	.word	0x20000158

08000584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_MspInit+0x44>)
 800058c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <HAL_MspInit+0x44>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6613      	str	r3, [r2, #96]	@ 0x60
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_MspInit+0x44>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <HAL_MspInit+0x44>)
 80005a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005a6:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <HAL_MspInit+0x44>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <HAL_MspInit+0x44>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005dc:	d134      	bne.n	8000648 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <HAL_TIM_Base_MspInit+0x84>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000650 <HAL_TIM_Base_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <HAL_TIM_Base_MspInit+0x84>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 80005f8:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <HAL_TIM_Base_MspInit+0x8c>)
 80005fa:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_4;
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 80005fe:	2204      	movs	r2, #4
 8000600:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 8000604:	2210      	movs	r2, #16
 8000606:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 800062e:	f000 fa45 	bl	8000abc <HAL_DMA_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000638:	f7ff fe46 	bl	80002c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 8000640:	621a      	str	r2, [r3, #32]
 8000642:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <HAL_TIM_Base_MspInit+0x88>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000
 8000654:	2000008c 	.word	0x2000008c
 8000658:	4002001c 	.word	0x4002001c

0800065c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800067c:	d11c      	bne.n	80006b8 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <HAL_TIM_MspPostInit+0x64>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <HAL_TIM_MspPostInit+0x64>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <HAL_TIM_MspPostInit+0x64>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000696:	2301      	movs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f000 fbdc 	bl	8000e70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <NMI_Handler+0x4>

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071a:	f000 f89d 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000728:	4802      	ldr	r0, [pc, #8]	@ (8000734 <DMA1_Channel2_IRQHandler+0x10>)
 800072a:	f000 fac2 	bl	8000cb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000008c 	.word	0x2000008c

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	@ (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000794 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000760:	f7ff ffea 	bl	8000738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	@ (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	@ (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f002 fadf 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078e:	f7ff fd69 	bl	8000264 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000794:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80007a0:	08002df4 	.word	0x08002df4
  ldr r2, =_sbss
 80007a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80007a8:	2000195c 	.word	0x2000195c

080007ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_IRQHandler>

080007ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f93d 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 f80e 	bl	80007e0 <HAL_InitTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	e001      	b.n	80007d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007d0:	f7ff fed8 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <HAL_InitTick+0x6c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d023      	beq.n	800083c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <HAL_InitTick+0x70>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <HAL_InitTick+0x6c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f949 	bl	8000aa2 <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10f      	bne.n	8000836 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d809      	bhi.n	8000830 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000824:	f000 f913 	bl	8000a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000828:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <HAL_InitTick+0x74>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e007      	b.n	8000840 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e004      	b.n	8000840 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e001      	b.n	8000840 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000068 	.word	0x20000068
 8000850:	20000060 	.word	0x20000060
 8000854:	20000064 	.word	0x20000064

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	@ (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000068 	.word	0x20000068
 800087c:	20001958 	.word	0x20001958

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20001958 	.word	0x20001958

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4907      	ldr	r1, [pc, #28]	@ (8000934 <__NVIC_EnableIRQ+0x38>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	@ (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	@ (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	@ 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	@ 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff29 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff3e 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff8e 	bl	800098c <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff31 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e098      	b.n	8000c00 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8000c0c <HAL_DMA_Init+0x150>)
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d80f      	bhi.n	8000afa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8000c10 <HAL_DMA_Init+0x154>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8000c14 <HAL_DMA_Init+0x158>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a48      	ldr	r2, [pc, #288]	@ (8000c18 <HAL_DMA_Init+0x15c>)
 8000af6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000af8:	e00e      	b.n	8000b18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b46      	ldr	r3, [pc, #280]	@ (8000c1c <HAL_DMA_Init+0x160>)
 8000b02:	4413      	add	r3, r2
 8000b04:	4a43      	ldr	r2, [pc, #268]	@ (8000c14 <HAL_DMA_Init+0x158>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	091b      	lsrs	r3, r3, #4
 8000b0c:	009a      	lsls	r2, r3, #2
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a42      	ldr	r2, [pc, #264]	@ (8000c20 <HAL_DMA_Init+0x164>)
 8000b16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b72:	d039      	beq.n	8000be8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a27      	ldr	r2, [pc, #156]	@ (8000c18 <HAL_DMA_Init+0x15c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d11a      	bne.n	8000bb4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b7e:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <HAL_DMA_Init+0x168>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f003 031c 	and.w	r3, r3, #28
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4924      	ldr	r1, [pc, #144]	@ (8000c24 <HAL_DMA_Init+0x168>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <HAL_DMA_Init+0x168>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6859      	ldr	r1, [r3, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba4:	f003 031c 	and.w	r3, r3, #28
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	491d      	ldr	r1, [pc, #116]	@ (8000c24 <HAL_DMA_Init+0x168>)
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]
 8000bb2:	e019      	b.n	8000be8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_DMA_Init+0x16c>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbc:	f003 031c 	and.w	r3, r3, #28
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4917      	ldr	r1, [pc, #92]	@ (8000c28 <HAL_DMA_Init+0x16c>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_DMA_Init+0x16c>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6859      	ldr	r1, [r3, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	f003 031c 	and.w	r3, r3, #28
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	4911      	ldr	r1, [pc, #68]	@ (8000c28 <HAL_DMA_Init+0x16c>)
 8000be4:	4313      	orrs	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40020407 	.word	0x40020407
 8000c10:	bffdfff8 	.word	0xbffdfff8
 8000c14:	cccccccd 	.word	0xcccccccd
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	bffdfbf8 	.word	0xbffdfbf8
 8000c20:	40020400 	.word	0x40020400
 8000c24:	400200a8 	.word	0x400200a8
 8000c28:	400204a8 	.word	0x400204a8

08000c2c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <HAL_DMA_Start+0x20>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e02e      	b.n	8000caa <HAL_DMA_Start+0x7e>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d11d      	bne.n	8000c9c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2202      	movs	r2, #2
 8000c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0201 	bic.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f000 f8c3 	bl	8000e10 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f042 0201 	orr.w	r2, r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e005      	b.n	8000ca8 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f003 031c 	and.w	r3, r3, #28
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d026      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x7a>
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d021      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d107      	bne.n	8000d06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0204 	bic.w	r2, r2, #4
 8000d04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f003 021c 	and.w	r2, r3, #28
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	2104      	movs	r1, #4
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d071      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d2a:	e06c      	b.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d30:	f003 031c 	and.w	r3, r3, #28
 8000d34:	2202      	movs	r2, #2
 8000d36:	409a      	lsls	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d02e      	beq.n	8000d9e <HAL_DMA_IRQHandler+0xec>
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d029      	beq.n	8000d9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0320 	and.w	r3, r3, #32
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10b      	bne.n	8000d70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 020a 	bic.w	r2, r2, #10
 8000d66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d74:	f003 021c 	and.w	r2, r3, #28
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d038      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d9c:	e033      	b.n	8000e06 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f003 031c 	and.w	r3, r3, #28
 8000da6:	2208      	movs	r2, #8
 8000da8:	409a      	lsls	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d02a      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x156>
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d025      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 020e 	bic.w	r2, r2, #14
 8000dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd0:	f003 021c 	and.w	r2, r3, #28
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
}
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	f003 021c 	and.w	r2, r3, #28
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	d108      	bne.n	8000e54 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e52:	e007      	b.n	8000e64 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	60da      	str	r2, [r3, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	e154      	b.n	800112a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8146 	beq.w	8001124 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d005      	beq.n	8000eb0 <HAL_GPIO_Init+0x40>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d130      	bne.n	8000f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	f003 0201 	and.w	r2, r3, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d017      	beq.n	8000f4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d123      	bne.n	8000fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	6939      	ldr	r1, [r7, #16]
 8000f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0203 	and.w	r2, r3, #3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80a0 	beq.w	8001124 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	4b58      	ldr	r3, [pc, #352]	@ (8001148 <HAL_GPIO_Init+0x2d8>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe8:	4a57      	ldr	r2, [pc, #348]	@ (8001148 <HAL_GPIO_Init+0x2d8>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff0:	4b55      	ldr	r3, [pc, #340]	@ (8001148 <HAL_GPIO_Init+0x2d8>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ffc:	4a53      	ldr	r2, [pc, #332]	@ (800114c <HAL_GPIO_Init+0x2dc>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001026:	d019      	beq.n	800105c <HAL_GPIO_Init+0x1ec>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a49      	ldr	r2, [pc, #292]	@ (8001150 <HAL_GPIO_Init+0x2e0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d013      	beq.n	8001058 <HAL_GPIO_Init+0x1e8>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a48      	ldr	r2, [pc, #288]	@ (8001154 <HAL_GPIO_Init+0x2e4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d00d      	beq.n	8001054 <HAL_GPIO_Init+0x1e4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a47      	ldr	r2, [pc, #284]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d007      	beq.n	8001050 <HAL_GPIO_Init+0x1e0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a46      	ldr	r2, [pc, #280]	@ (800115c <HAL_GPIO_Init+0x2ec>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d101      	bne.n	800104c <HAL_GPIO_Init+0x1dc>
 8001048:	2304      	movs	r3, #4
 800104a:	e008      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 800104c:	2307      	movs	r3, #7
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001050:	2303      	movs	r3, #3
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	@ (800114c <HAL_GPIO_Init+0x2dc>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107c:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ca:	4a25      	ldr	r2, [pc, #148]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d0:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f aea3 	bne.w	8000e80 <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <HAL_PWREx_GetVoltageRange+0x18>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40007000 	.word	0x40007000

08001180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800118e:	d130      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001190:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800119c:	d038      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2232      	movs	r2, #50	@ 0x32
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c4:	e002      	b.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d8:	d102      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f2      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ec:	d110      	bne.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e00f      	b.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fe:	d007      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001208:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800120e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000
 8001224:	20000060 	.word	0x20000060
 8001228:	431bde83 	.word	0x431bde83

0800122c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 bc02 	b.w	8001a44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001240:	4b96      	ldr	r3, [pc, #600]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124a:	4b94      	ldr	r3, [pc, #592]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80e4 	beq.w	800142a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_RCC_OscConfig+0x4c>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	f040 808b 	bne.w	8001386 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b01      	cmp	r3, #1
 8001274:	f040 8087 	bne.w	8001386 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001278:	4b88      	ldr	r3, [pc, #544]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_OscConfig+0x64>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e3d9      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	4b81      	ldr	r3, [pc, #516]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <HAL_RCC_OscConfig+0x7e>
 80012a0:	4b7e      	ldr	r3, [pc, #504]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012a8:	e005      	b.n	80012b6 <HAL_RCC_OscConfig+0x8a>
 80012aa:	4b7c      	ldr	r3, [pc, #496]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d223      	bcs.n	8001302 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fd54 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e3ba      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ce:	4b73      	ldr	r3, [pc, #460]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a72      	ldr	r2, [pc, #456]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b70      	ldr	r3, [pc, #448]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	496d      	ldr	r1, [pc, #436]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ec:	4b6b      	ldr	r3, [pc, #428]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	4968      	ldr	r1, [pc, #416]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	e025      	b.n	800134e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001302:	4b66      	ldr	r3, [pc, #408]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a65      	ldr	r2, [pc, #404]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b63      	ldr	r3, [pc, #396]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4960      	ldr	r1, [pc, #384]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001320:	4b5e      	ldr	r3, [pc, #376]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	495b      	ldr	r1, [pc, #364]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fd14 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e37a      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800134e:	f000 fc81 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001352:	4602      	mov	r2, r0
 8001354:	4b51      	ldr	r3, [pc, #324]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4950      	ldr	r1, [pc, #320]	@ (80014a0 <HAL_RCC_OscConfig+0x274>)
 8001360:	5ccb      	ldrb	r3, [r1, r3]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	4a4e      	ldr	r2, [pc, #312]	@ (80014a4 <HAL_RCC_OscConfig+0x278>)
 800136c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800136e:	4b4e      	ldr	r3, [pc, #312]	@ (80014a8 <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fa34 	bl	80007e0 <HAL_InitTick>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d052      	beq.n	8001428 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	e35e      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d032      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800138e:	4b43      	ldr	r3, [pc, #268]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a42      	ldr	r2, [pc, #264]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139a:	f7ff fa71 	bl	8000880 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a2:	f7ff fa6d 	bl	8000880 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e347      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b4:	4b39      	ldr	r3, [pc, #228]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4b36      	ldr	r3, [pc, #216]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a35      	ldr	r2, [pc, #212]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b33      	ldr	r3, [pc, #204]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4930      	ldr	r1, [pc, #192]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013de:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	492b      	ldr	r1, [pc, #172]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
 80013f2:	e01a      	b.n	800142a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f4:	4b29      	ldr	r3, [pc, #164]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a28      	ldr	r2, [pc, #160]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001400:	f7ff fa3e 	bl	8000880 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001408:	f7ff fa3a 	bl	8000880 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e314      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1dc>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d073      	beq.n	800151e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b08      	cmp	r3, #8
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x21c>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d10e      	bne.n	8001460 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d063      	beq.n	800151c <HAL_RCC_OscConfig+0x2f0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d15f      	bne.n	800151c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e2f1      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x24c>
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e025      	b.n	80014c4 <HAL_RCC_OscConfig+0x298>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001480:	d114      	bne.n	80014ac <HAL_RCC_OscConfig+0x280>
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a02      	ldr	r2, [pc, #8]	@ (800149c <HAL_RCC_OscConfig+0x270>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e013      	b.n	80014c4 <HAL_RCC_OscConfig+0x298>
 800149c:	40021000 	.word	0x40021000
 80014a0:	08002dac 	.word	0x08002dac
 80014a4:	20000060 	.word	0x20000060
 80014a8:	20000064 	.word	0x20000064
 80014ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a9f      	ldr	r2, [pc, #636]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b9d      	ldr	r3, [pc, #628]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a9c      	ldr	r2, [pc, #624]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff f9d8 	bl	8000880 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff f9d4 	bl	8000880 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e2ae      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	4b92      	ldr	r3, [pc, #584]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2a8>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff f9c4 	bl	8000880 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff f9c0 	bl	8000880 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e29a      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150e:	4b88      	ldr	r3, [pc, #544]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x2d0>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d060      	beq.n	80015ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d005      	beq.n	800153c <HAL_RCC_OscConfig+0x310>
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d119      	bne.n	800156a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d116      	bne.n	800156a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	4b7c      	ldr	r3, [pc, #496]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x328>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e277      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b76      	ldr	r3, [pc, #472]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	4973      	ldr	r1, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	e040      	b.n	80015ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d023      	beq.n	80015ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001572:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6e      	ldr	r2, [pc, #440]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff f97f 	bl	8000880 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff f97b 	bl	8000880 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e255      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	4b65      	ldr	r3, [pc, #404]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b62      	ldr	r3, [pc, #392]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	495f      	ldr	r1, [pc, #380]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e018      	b.n	80015ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5c      	ldr	r2, [pc, #368]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80015c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff f95b 	bl	8000880 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff f957 	bl	8000880 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e231      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e0:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d03c      	beq.n	8001672 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01c      	beq.n	800163a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001600:	4b4b      	ldr	r3, [pc, #300]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001606:	4a4a      	ldr	r2, [pc, #296]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff f936 	bl	8000880 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff f932 	bl	8000880 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e20c      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 800162c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ef      	beq.n	8001618 <HAL_RCC_OscConfig+0x3ec>
 8001638:	e01b      	b.n	8001672 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001640:	4a3b      	ldr	r2, [pc, #236]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff f919 	bl	8000880 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff f915 	bl	8000880 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1ef      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	4b32      	ldr	r3, [pc, #200]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ef      	bne.n	8001652 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80a6 	beq.w	80017cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	4a26      	ldr	r2, [pc, #152]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169a:	6593      	str	r3, [r2, #88]	@ 0x58
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <HAL_RCC_OscConfig+0x508>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d118      	bne.n	80016ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <HAL_RCC_OscConfig+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001734 <HAL_RCC_OscConfig+0x508>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f8dc 	bl	8000880 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7ff f8d8 	bl	8000880 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1b2      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_RCC_OscConfig+0x508>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_RCC_OscConfig+0x4d8>
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001702:	e029      	b.n	8001758 <HAL_RCC_OscConfig+0x52c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d115      	bne.n	8001738 <HAL_RCC_OscConfig+0x50c>
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001712:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171c:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a03      	ldr	r2, [pc, #12]	@ (8001730 <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x52c>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000
 8001738:	4b9a      	ldr	r3, [pc, #616]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173e:	4a99      	ldr	r2, [pc, #612]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001748:	4b96      	ldr	r3, [pc, #600]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174e:	4a95      	ldr	r2, [pc, #596]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d016      	beq.n	800178e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff f88e 	bl	8000880 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff f88a 	bl	8000880 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e162      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	4b89      	ldr	r3, [pc, #548]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ed      	beq.n	8001768 <HAL_RCC_OscConfig+0x53c>
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff f877 	bl	8000880 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff f873 	bl	8000880 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e14b      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	4b7d      	ldr	r3, [pc, #500]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ed      	bne.n	8001796 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b78      	ldr	r3, [pc, #480]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c4:	4a77      	ldr	r2, [pc, #476]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d03c      	beq.n	8001852 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01c      	beq.n	800181a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e0:	4b70      	ldr	r3, [pc, #448]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80017e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e6:	4a6f      	ldr	r2, [pc, #444]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff f846 	bl	8000880 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f8:	f7ff f842 	bl	8000880 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e11c      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180a:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 800180c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ef      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5cc>
 8001818:	e01b      	b.n	8001852 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800181a:	4b62      	ldr	r3, [pc, #392]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 800181c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001820:	4a60      	ldr	r2, [pc, #384]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff f829 	bl	8000880 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001832:	f7ff f825 	bl	8000880 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0ff      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001844:	4b57      	ldr	r3, [pc, #348]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ef      	bne.n	8001832 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80f3 	beq.w	8001a42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	2b02      	cmp	r3, #2
 8001862:	f040 80c9 	bne.w	80019f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001866:	4b4f      	ldr	r3, [pc, #316]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	429a      	cmp	r2, r3
 8001878:	d12c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	3b01      	subs	r3, #1
 8001886:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d123      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001896:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d11b      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d113      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	3b01      	subs	r3, #1
 80018ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d109      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	3b01      	subs	r3, #1
 80018ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d06b      	beq.n	80019ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d062      	beq.n	80019a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018da:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ac      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f6:	f7fe ffc3 	bl	8000880 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7fe ffbf 	bl	8000880 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e099      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001910:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191c:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <HAL_RCC_OscConfig+0x77c>)
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800192c:	3a01      	subs	r2, #1
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001936:	0212      	lsls	r2, r2, #8
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800193e:	0852      	lsrs	r2, r2, #1
 8001940:	3a01      	subs	r2, #1
 8001942:	0552      	lsls	r2, r2, #21
 8001944:	4311      	orrs	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800194a:	0852      	lsrs	r2, r2, #1
 800194c:	3a01      	subs	r2, #1
 800194e:	0652      	lsls	r2, r2, #25
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001956:	06d2      	lsls	r2, r2, #27
 8001958:	430a      	orrs	r2, r1
 800195a:	4912      	ldr	r1, [pc, #72]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 800195c:	4313      	orrs	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001960:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001976:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001978:	f7fe ff82 	bl	8000880 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7fe ff7e 	bl	8000880 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e058      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <HAL_RCC_OscConfig+0x778>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199e:	e050      	b.n	8001a42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e04f      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
 80019a4:	40021000 	.word	0x40021000
 80019a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ac:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d144      	bne.n	8001a42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b8:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a23      	ldr	r2, [pc, #140]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c4:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d0:	f7fe ff56 	bl	8000880 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7fe ff52 	bl	8000880 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e02c      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x7ac>
 80019f6:	e024      	b.n	8001a42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d01f      	beq.n	8001a3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7fe ff39 	bl	8000880 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7fe ff35 	bl	8000880 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e00f      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4905      	ldr	r1, [pc, #20]	@ (8001a4c <HAL_RCC_OscConfig+0x820>)
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_RCC_OscConfig+0x824>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e001      	b.n	8001a42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	feeefffc 	.word	0xfeeefffc

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0e7      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b75      	ldr	r3, [pc, #468]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d910      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b72      	ldr	r3, [pc, #456]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 0207 	bic.w	r2, r3, #7
 8001a7e:	4970      	ldr	r1, [pc, #448]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b6e      	ldr	r3, [pc, #440]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0cf      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d010      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d908      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4960      	ldr	r1, [pc, #384]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d04c      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	4b5a      	ldr	r3, [pc, #360]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d121      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0a6      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af2:	4b54      	ldr	r3, [pc, #336]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d115      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e09a      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e08e      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e086      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4943      	ldr	r1, [pc, #268]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3c:	f7fe fea0 	bl	8000880 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7fe fe9c 	bl	8000880 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e06e      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b31      	ldr	r3, [pc, #196]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d208      	bcs.n	8001b9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	492b      	ldr	r1, [pc, #172]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9a:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d210      	bcs.n	8001bca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 0207 	bic.w	r2, r3, #7
 8001bb0:	4923      	ldr	r1, [pc, #140]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb8:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <HAL_RCC_ClockConfig+0x1ec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e036      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	4918      	ldr	r1, [pc, #96]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4910      	ldr	r1, [pc, #64]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c08:	f000 f824 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	490b      	ldr	r1, [pc, #44]	@ (8001c48 <HAL_RCC_ClockConfig+0x1f4>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_ClockConfig+0x1fc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fdd7 	bl	80007e0 <HAL_InitTick>
 8001c32:	4603      	mov	r3, r0
 8001c34:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c36:	7afb      	ldrb	r3, [r7, #11]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40022000 	.word	0x40022000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08002dac 	.word	0x08002dac
 8001c4c:	20000060 	.word	0x20000060
 8001c50:	20000064 	.word	0x20000064

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c62:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d121      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d11e      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c88:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c94:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10d      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	e004      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d134      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0xa6>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d003      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xac>
 8001cf8:	e005      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfc:	617b      	str	r3, [r7, #20]
      break;
 8001cfe:	e005      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d02:	617b      	str	r3, [r7, #20]
      break;
 8001d04:	e002      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	617b      	str	r3, [r7, #20]
      break;
 8001d0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	3301      	adds	r3, #1
 8001d18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	fb03 f202 	mul.w	r2, r3, r2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	0e5b      	lsrs	r3, r3, #25
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08002dbc 	.word	0x08002dbc
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	007a1200 	.word	0x007a1200

08001d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d84:	f7ff f9ee 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001d88:	6178      	str	r0, [r7, #20]
 8001d8a:	e014      	b.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001da4:	f7ff f9de 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001da8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dae:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dbc:	d10b      	bne.n	8001dd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b80      	cmp	r3, #128	@ 0x80
 8001dc2:	d919      	bls.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dc8:	d902      	bls.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dca:	2302      	movs	r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e013      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	e010      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b80      	cmp	r3, #128	@ 0x80
 8001dda:	d902      	bls.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ddc:	2303      	movs	r3, #3
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e00a      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b80      	cmp	r3, #128	@ 0x80
 8001de6:	d102      	bne.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e004      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b70      	cmp	r3, #112	@ 0x70
 8001df2:	d101      	bne.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 0207 	bic.w	r2, r3, #7
 8001e00:	4909      	ldr	r1, [pc, #36]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e049      	b.n	8001ed2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fbba 	bl	80005cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 fb52 	bl	8002514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e049      	b.n	8001f80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d106      	bne.n	8001f06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f841 	bl	8001f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f000 fafb 	bl	8002514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_TIM_PWM_Start+0x24>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	e03c      	b.n	800203a <HAL_TIM_PWM_Start+0x9e>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d109      	bne.n	8001fda <HAL_TIM_PWM_Start+0x3e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	e02f      	b.n	800203a <HAL_TIM_PWM_Start+0x9e>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d109      	bne.n	8001ff4 <HAL_TIM_PWM_Start+0x58>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	e022      	b.n	800203a <HAL_TIM_PWM_Start+0x9e>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d109      	bne.n	800200e <HAL_TIM_PWM_Start+0x72>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	e015      	b.n	800203a <HAL_TIM_PWM_Start+0x9e>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b10      	cmp	r3, #16
 8002012:	d109      	bne.n	8002028 <HAL_TIM_PWM_Start+0x8c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e008      	b.n	800203a <HAL_TIM_PWM_Start+0x9e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e07e      	b.n	8002140 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d104      	bne.n	8002052 <HAL_TIM_PWM_Start+0xb6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002050:	e023      	b.n	800209a <HAL_TIM_PWM_Start+0xfe>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d104      	bne.n	8002062 <HAL_TIM_PWM_Start+0xc6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002060:	e01b      	b.n	800209a <HAL_TIM_PWM_Start+0xfe>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d104      	bne.n	8002072 <HAL_TIM_PWM_Start+0xd6>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002070:	e013      	b.n	800209a <HAL_TIM_PWM_Start+0xfe>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d104      	bne.n	8002082 <HAL_TIM_PWM_Start+0xe6>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002080:	e00b      	b.n	800209a <HAL_TIM_PWM_Start+0xfe>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b10      	cmp	r3, #16
 8002086:	d104      	bne.n	8002092 <HAL_TIM_PWM_Start+0xf6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002090:	e003      	b.n	800209a <HAL_TIM_PWM_Start+0xfe>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2201      	movs	r2, #1
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fdbe 	bl	8002c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a26      	ldr	r2, [pc, #152]	@ (8002148 <HAL_TIM_PWM_Start+0x1ac>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x12a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a25      	ldr	r2, [pc, #148]	@ (800214c <HAL_TIM_PWM_Start+0x1b0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x12a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <HAL_TIM_PWM_Start+0x1b4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_PWM_Start+0x12e>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_TIM_PWM_Start+0x130>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a18      	ldr	r2, [pc, #96]	@ (8002148 <HAL_TIM_PWM_Start+0x1ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_TIM_PWM_Start+0x162>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f2:	d004      	beq.n	80020fe <HAL_TIM_PWM_Start+0x162>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <HAL_TIM_PWM_Start+0x1b0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d115      	bne.n	800212a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <HAL_TIM_PWM_Start+0x1b8>)
 8002106:	4013      	ands	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b06      	cmp	r3, #6
 800210e:	d015      	beq.n	800213c <HAL_TIM_PWM_Start+0x1a0>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002116:	d011      	beq.n	800213c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002128:	e008      	b.n	800213c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e000      	b.n	800213e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40014000 	.word	0x40014000
 8002150:	40014400 	.word	0x40014400
 8002154:	00010007 	.word	0x00010007

08002158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002172:	2302      	movs	r3, #2
 8002174:	e0ff      	b.n	8002376 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b14      	cmp	r3, #20
 8002182:	f200 80f0 	bhi.w	8002366 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002186:	a201      	add	r2, pc, #4	@ (adr r2, 800218c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	080021e1 	.word	0x080021e1
 8002190:	08002367 	.word	0x08002367
 8002194:	08002367 	.word	0x08002367
 8002198:	08002367 	.word	0x08002367
 800219c:	08002221 	.word	0x08002221
 80021a0:	08002367 	.word	0x08002367
 80021a4:	08002367 	.word	0x08002367
 80021a8:	08002367 	.word	0x08002367
 80021ac:	08002263 	.word	0x08002263
 80021b0:	08002367 	.word	0x08002367
 80021b4:	08002367 	.word	0x08002367
 80021b8:	08002367 	.word	0x08002367
 80021bc:	080022a3 	.word	0x080022a3
 80021c0:	08002367 	.word	0x08002367
 80021c4:	08002367 	.word	0x08002367
 80021c8:	08002367 	.word	0x08002367
 80021cc:	080022e5 	.word	0x080022e5
 80021d0:	08002367 	.word	0x08002367
 80021d4:	08002367 	.word	0x08002367
 80021d8:	08002367 	.word	0x08002367
 80021dc:	08002325 	.word	0x08002325
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fa04 	bl	80025f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0208 	orr.w	r2, r2, #8
 80021fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6999      	ldr	r1, [r3, #24]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	619a      	str	r2, [r3, #24]
      break;
 800221e:	e0a5      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fa60 	bl	80026ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800223a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6999      	ldr	r1, [r3, #24]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	021a      	lsls	r2, r3, #8
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	619a      	str	r2, [r3, #24]
      break;
 8002260:	e084      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fab9 	bl	80027e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0208 	orr.w	r2, r2, #8
 800227c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0204 	bic.w	r2, r2, #4
 800228c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69d9      	ldr	r1, [r3, #28]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	61da      	str	r2, [r3, #28]
      break;
 80022a0:	e064      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fb11 	bl	80028d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69d9      	ldr	r1, [r3, #28]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	021a      	lsls	r2, r3, #8
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	61da      	str	r2, [r3, #28]
      break;
 80022e2:	e043      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fb4e 	bl	800298c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0208 	orr.w	r2, r2, #8
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002322:	e023      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fb86 	bl	8002a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	021a      	lsls	r2, r3, #8
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002364:	e002      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
      break;
 800236a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002374:	7dfb      	ldrb	r3, [r7, #23]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop

08002380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_TIM_ConfigClockSource+0x1c>
 8002398:	2302      	movs	r3, #2
 800239a:	e0b6      	b.n	800250a <HAL_TIM_ConfigClockSource+0x18a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023d8:	d03e      	beq.n	8002458 <HAL_TIM_ConfigClockSource+0xd8>
 80023da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023de:	f200 8087 	bhi.w	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 80023e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e6:	f000 8086 	beq.w	80024f6 <HAL_TIM_ConfigClockSource+0x176>
 80023ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ee:	d87f      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 80023f0:	2b70      	cmp	r3, #112	@ 0x70
 80023f2:	d01a      	beq.n	800242a <HAL_TIM_ConfigClockSource+0xaa>
 80023f4:	2b70      	cmp	r3, #112	@ 0x70
 80023f6:	d87b      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 80023f8:	2b60      	cmp	r3, #96	@ 0x60
 80023fa:	d050      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x11e>
 80023fc:	2b60      	cmp	r3, #96	@ 0x60
 80023fe:	d877      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 8002400:	2b50      	cmp	r3, #80	@ 0x50
 8002402:	d03c      	beq.n	800247e <HAL_TIM_ConfigClockSource+0xfe>
 8002404:	2b50      	cmp	r3, #80	@ 0x50
 8002406:	d873      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 8002408:	2b40      	cmp	r3, #64	@ 0x40
 800240a:	d058      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x13e>
 800240c:	2b40      	cmp	r3, #64	@ 0x40
 800240e:	d86f      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 8002410:	2b30      	cmp	r3, #48	@ 0x30
 8002412:	d064      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x15e>
 8002414:	2b30      	cmp	r3, #48	@ 0x30
 8002416:	d86b      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 8002418:	2b20      	cmp	r3, #32
 800241a:	d060      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x15e>
 800241c:	2b20      	cmp	r3, #32
 800241e:	d867      	bhi.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05c      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x15e>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d05a      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x15e>
 8002428:	e062      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800243a:	f000 fbd3 	bl	8002be4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800244c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	609a      	str	r2, [r3, #8]
      break;
 8002456:	e04f      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002468:	f000 fbbc 	bl	8002be4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800247a:	609a      	str	r2, [r3, #8]
      break;
 800247c:	e03c      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800248a:	461a      	mov	r2, r3
 800248c:	f000 fb30 	bl	8002af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2150      	movs	r1, #80	@ 0x50
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fb89 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 800249c:	e02c      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 fb4f 	bl	8002b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2160      	movs	r1, #96	@ 0x60
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fb79 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 80024bc:	e01c      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ca:	461a      	mov	r2, r3
 80024cc:	f000 fb10 	bl	8002af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2140      	movs	r1, #64	@ 0x40
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fb69 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 80024dc:	e00c      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f000 fb60 	bl	8002bae <TIM_ITRx_SetConfig>
      break;
 80024ee:	e003      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      break;
 80024f4:	e000      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80024f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a30      	ldr	r2, [pc, #192]	@ (80025e8 <TIM_Base_SetConfig+0xd4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <TIM_Base_SetConfig+0x20>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002532:	d108      	bne.n	8002546 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800253a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a27      	ldr	r2, [pc, #156]	@ (80025e8 <TIM_Base_SetConfig+0xd4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <TIM_Base_SetConfig+0x52>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002554:	d007      	beq.n	8002566 <TIM_Base_SetConfig+0x52>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a24      	ldr	r2, [pc, #144]	@ (80025ec <TIM_Base_SetConfig+0xd8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <TIM_Base_SetConfig+0x52>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a23      	ldr	r2, [pc, #140]	@ (80025f0 <TIM_Base_SetConfig+0xdc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a12      	ldr	r2, [pc, #72]	@ (80025e8 <TIM_Base_SetConfig+0xd4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <TIM_Base_SetConfig+0xa0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <TIM_Base_SetConfig+0xd8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_Base_SetConfig+0xa0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <TIM_Base_SetConfig+0xdc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d103      	bne.n	80025bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f023 0201 	bic.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]
  }
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40014000 	.word	0x40014000
 80025f0:	40014400 	.word	0x40014400

080025f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 0201 	bic.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f023 0302 	bic.w	r3, r3, #2
 8002640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a24      	ldr	r2, [pc, #144]	@ (80026e0 <TIM_OC1_SetConfig+0xec>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <TIM_OC1_SetConfig+0x70>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <TIM_OC1_SetConfig+0xf0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC1_SetConfig+0x70>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <TIM_OC1_SetConfig+0xf4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10c      	bne.n	800267e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0308 	bic.w	r3, r3, #8
 800266a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <TIM_OC1_SetConfig+0xec>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_OC1_SetConfig+0xa2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a16      	ldr	r2, [pc, #88]	@ (80026e4 <TIM_OC1_SetConfig+0xf0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_OC1_SetConfig+0xa2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <TIM_OC1_SetConfig+0xf4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800269c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	621a      	str	r2, [r3, #32]
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40014400 	.word	0x40014400

080026ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 0210 	bic.w	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800271a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800271e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0320 	bic.w	r3, r3, #32
 800273a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a22      	ldr	r2, [pc, #136]	@ (80027d4 <TIM_OC2_SetConfig+0xe8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10d      	bne.n	800276c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800276a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <TIM_OC2_SetConfig+0xe8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <TIM_OC2_SetConfig+0x98>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <TIM_OC2_SetConfig+0xec>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_OC2_SetConfig+0x98>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <TIM_OC2_SetConfig+0xf0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d113      	bne.n	80027ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800278a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40014000 	.word	0x40014000
 80027dc:	40014400 	.word	0x40014400

080027e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800282c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a21      	ldr	r2, [pc, #132]	@ (80028c4 <TIM_OC3_SetConfig+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10d      	bne.n	800285e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800285c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <TIM_OC3_SetConfig+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <TIM_OC3_SetConfig+0x96>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <TIM_OC3_SetConfig+0xe8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <TIM_OC3_SetConfig+0x96>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a16      	ldr	r2, [pc, #88]	@ (80028cc <TIM_OC3_SetConfig+0xec>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800287c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	621a      	str	r2, [r3, #32]
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400

080028d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800291e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	031b      	lsls	r3, r3, #12
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <TIM_OC4_SetConfig+0xb0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <TIM_OC4_SetConfig+0x74>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <TIM_OC4_SetConfig+0xb4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <TIM_OC4_SetConfig+0x74>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <TIM_OC4_SetConfig+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d109      	bne.n	8002958 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800294a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	621a      	str	r2, [r3, #32]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40014000 	.word	0x40014000
 8002988:	40014400 	.word	0x40014400

0800298c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80029d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <TIM_OC5_SetConfig+0xa4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_OC5_SetConfig+0x6a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a12      	ldr	r2, [pc, #72]	@ (8002a34 <TIM_OC5_SetConfig+0xa8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC5_SetConfig+0x6a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <TIM_OC5_SetConfig+0xac>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d109      	bne.n	8002a0a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40014000 	.word	0x40014000
 8002a38:	40014400 	.word	0x40014400

08002a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	051b      	lsls	r3, r3, #20
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <TIM_OC6_SetConfig+0xa8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d007      	beq.n	8002aa8 <TIM_OC6_SetConfig+0x6c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <TIM_OC6_SetConfig+0xac>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <TIM_OC6_SetConfig+0x6c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <TIM_OC6_SetConfig+0xb0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d109      	bne.n	8002abc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	029b      	lsls	r3, r3, #10
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	621a      	str	r2, [r3, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40014400 	.word	0x40014400

08002af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0201 	bic.w	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 030a 	bic.w	r3, r3, #10
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 0210 	bic.w	r2, r3, #16
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	031b      	lsls	r3, r3, #12
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f043 0307 	orr.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	021a      	lsls	r2, r3, #8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2201      	movs	r2, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	401a      	ands	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e04f      	b.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a21      	ldr	r2, [pc, #132]	@ (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a14      	ldr	r2, [pc, #80]	@ (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a10      	ldr	r2, [pc, #64]	@ (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10c      	bne.n	8002d16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40014000 	.word	0x40014000

08002d3c <memset>:
 8002d3c:	4402      	add	r2, r0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002d84 <__libc_init_array+0x38>)
 8002d50:	4c0d      	ldr	r4, [pc, #52]	@ (8002d88 <__libc_init_array+0x3c>)
 8002d52:	1b64      	subs	r4, r4, r5
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	2600      	movs	r6, #0
 8002d58:	42a6      	cmp	r6, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8002d8c <__libc_init_array+0x40>)
 8002d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8002d90 <__libc_init_array+0x44>)
 8002d60:	f000 f818 	bl	8002d94 <_init>
 8002d64:	1b64      	subs	r4, r4, r5
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	2600      	movs	r6, #0
 8002d6a:	42a6      	cmp	r6, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d74:	4798      	blx	r3
 8002d76:	3601      	adds	r6, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7e:	4798      	blx	r3
 8002d80:	3601      	adds	r6, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002dec 	.word	0x08002dec
 8002d88:	08002dec 	.word	0x08002dec
 8002d8c:	08002dec 	.word	0x08002dec
 8002d90:	08002df0 	.word	0x08002df0

08002d94 <_init>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr

08002da0 <_fini>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr
